
NRF24L01_TRANSMITTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003748  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080038e8  080038e8  000048e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a24  08003a24  00005080  2**0
                  CONTENTS
  4 .ARM          00000008  08003a24  08003a24  00004a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a2c  08003a2c  00005080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a2c  08003a2c  00004a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a30  08003a30  00004a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08003a34  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000080  08003ab4  00005080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08003ab4  00005248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069ff  00000000  00000000  000050b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001743  00000000  00000000  0000baaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0000d1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000561  00000000  00000000  0000d948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167c2  00000000  00000000  0000dea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e28  00000000  00000000  0002466b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000871aa  00000000  00000000  0002c493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b363d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023e0  00000000  00000000  000b3680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000b5a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080038d0 	.word	0x080038d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080038d0 	.word	0x080038d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fcb4 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f820 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f8bc 	bl	80006f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000580:	f000 f884 	bl	800068c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 8000584:	f000 fa92 	bl	8000aac <NRF24_Init>

 // NRF24_RxMode(RxAddress, 10);

 NRF24_TxMode(TxAddress, 10);
 8000588:	210a      	movs	r1, #10
 800058a:	4809      	ldr	r0, [pc, #36]	@ (80005b0 <main+0x40>)
 800058c:	f000 fab2 	bl	8000af4 <NRF24_TxMode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (NRF24_Transmit(TxData) == 1)
 8000590:	4808      	ldr	r0, [pc, #32]	@ (80005b4 <main+0x44>)
 8000592:	f000 fad9 	bl	8000b48 <NRF24_Transmit>
 8000596:	4603      	mov	r3, r0
 8000598:	2b01      	cmp	r3, #1
 800059a:	d104      	bne.n	80005a6 <main+0x36>
	   	  {
	   		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800059c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a0:	4805      	ldr	r0, [pc, #20]	@ (80005b8 <main+0x48>)
 80005a2:	f000 ffb6 	bl	8001512 <HAL_GPIO_TogglePin>
	   	  }

	   	  HAL_Delay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005aa:	f000 fd0b 	bl	8000fc4 <HAL_Delay>
	  if (NRF24_Transmit(TxData) == 1)
 80005ae:	e7ef      	b.n	8000590 <main+0x20>
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000008 	.word	0x20000008
 80005b8:	40020c00 	.word	0x40020c00

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	@ 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	@ 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fbfc 	bl	8002dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b27      	ldr	r3, [pc, #156]	@ (8000684 <SystemClock_Config+0xc8>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	4a26      	ldr	r2, [pc, #152]	@ (8000684 <SystemClock_Config+0xc8>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f0:	4b24      	ldr	r3, [pc, #144]	@ (8000684 <SystemClock_Config+0xc8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <SystemClock_Config+0xcc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a20      	ldr	r2, [pc, #128]	@ (8000688 <SystemClock_Config+0xcc>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <SystemClock_Config+0xcc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000620:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000630:	2364      	movs	r3, #100	@ 0x64
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000638:	2308      	movs	r3, #8
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f000 ff81 	bl	8001548 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800064c:	f000 f900 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2103      	movs	r1, #3
 800066c:	4618      	mov	r0, r3
 800066e:	f001 f9e3 	bl	8001a38 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000678:	f000 f8ea 	bl	8000850 <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	@ 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000690:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <MX_SPI1_Init+0x64>)
 8000692:	4a18      	ldr	r2, [pc, #96]	@ (80006f4 <MX_SPI1_Init+0x68>)
 8000694:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000696:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <MX_SPI1_Init+0x64>)
 8000698:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800069c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80006be:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006c0:	2220      	movs	r2, #32
 80006c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006d8:	220a      	movs	r2, #10
 80006da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006de:	f001 fb97 	bl	8001e10 <HAL_SPI_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006e8:	f000 f8b2 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000009c 	.word	0x2000009c
 80006f4:	40013000 	.word	0x40013000

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	@ 0x28
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b4b      	ldr	r3, [pc, #300]	@ (8000840 <MX_GPIO_Init+0x148>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a4a      	ldr	r2, [pc, #296]	@ (8000840 <MX_GPIO_Init+0x148>)
 8000718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b48      	ldr	r3, [pc, #288]	@ (8000840 <MX_GPIO_Init+0x148>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b44      	ldr	r3, [pc, #272]	@ (8000840 <MX_GPIO_Init+0x148>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a43      	ldr	r2, [pc, #268]	@ (8000840 <MX_GPIO_Init+0x148>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b41      	ldr	r3, [pc, #260]	@ (8000840 <MX_GPIO_Init+0x148>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b3d      	ldr	r3, [pc, #244]	@ (8000840 <MX_GPIO_Init+0x148>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a3c      	ldr	r2, [pc, #240]	@ (8000840 <MX_GPIO_Init+0x148>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b3a      	ldr	r3, [pc, #232]	@ (8000840 <MX_GPIO_Init+0x148>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b36      	ldr	r3, [pc, #216]	@ (8000840 <MX_GPIO_Init+0x148>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a35      	ldr	r2, [pc, #212]	@ (8000840 <MX_GPIO_Init+0x148>)
 800076c:	f043 0308 	orr.w	r3, r3, #8
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b33      	ldr	r3, [pc, #204]	@ (8000840 <MX_GPIO_Init+0x148>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0308 	and.w	r3, r3, #8
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	4b2f      	ldr	r3, [pc, #188]	@ (8000840 <MX_GPIO_Init+0x148>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a2e      	ldr	r2, [pc, #184]	@ (8000840 <MX_GPIO_Init+0x148>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b2c      	ldr	r3, [pc, #176]	@ (8000840 <MX_GPIO_Init+0x148>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2101      	movs	r1, #1
 800079e:	4829      	ldr	r0, [pc, #164]	@ (8000844 <MX_GPIO_Init+0x14c>)
 80007a0:	f000 fe9e 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Chip_Enable_GPIO_Port, Chip_Enable_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2108      	movs	r1, #8
 80007a8:	4827      	ldr	r0, [pc, #156]	@ (8000848 <MX_GPIO_Init+0x150>)
 80007aa:	f000 fe99 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Chip_Select_GPIO_Port, Chip_Select_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2110      	movs	r1, #16
 80007b2:	4825      	ldr	r0, [pc, #148]	@ (8000848 <MX_GPIO_Init+0x150>)
 80007b4:	f000 fe94 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007be:	4823      	ldr	r0, [pc, #140]	@ (800084c <MX_GPIO_Init+0x154>)
 80007c0:	f000 fe8e 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007c4:	2301      	movs	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	481a      	ldr	r0, [pc, #104]	@ (8000844 <MX_GPIO_Init+0x14c>)
 80007dc:	f000 fcfc 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Chip_Enable_Pin */
  GPIO_InitStruct.Pin = Chip_Enable_Pin;
 80007e0:	2308      	movs	r3, #8
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007e8:	2302      	movs	r3, #2
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007ec:	2301      	movs	r3, #1
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Chip_Enable_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4814      	ldr	r0, [pc, #80]	@ (8000848 <MX_GPIO_Init+0x150>)
 80007f8:	f000 fcee 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Chip_Select_Pin */
  GPIO_InitStruct.Pin = Chip_Select_Pin;
 80007fc:	2310      	movs	r3, #16
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000804:	2301      	movs	r3, #1
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000808:	2302      	movs	r3, #2
 800080a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Chip_Select_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	480d      	ldr	r0, [pc, #52]	@ (8000848 <MX_GPIO_Init+0x150>)
 8000814:	f000 fce0 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4806      	ldr	r0, [pc, #24]	@ (800084c <MX_GPIO_Init+0x154>)
 8000832:	f000 fcd1 	bl	80011d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	@ 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40020800 	.word	0x40020800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020c00 	.word	0x40020c00

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <Error_Handler+0x8>

0800085c <CS_Select>:
#define Chip_Select_PIN    GPIO_PIN_4
//select = c5
//Chip_Enable
//Chip_Select_Pin
void CS_Select (void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Chip_Select_PORT, Chip_Select_PIN, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2110      	movs	r1, #16
 8000864:	4802      	ldr	r0, [pc, #8]	@ (8000870 <CS_Select+0x14>)
 8000866:	f000 fe3b 	bl	80014e0 <HAL_GPIO_WritePin>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40020000 	.word	0x40020000

08000874 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Chip_Select_PORT, Chip_Select_PIN, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2110      	movs	r1, #16
 800087c:	4802      	ldr	r0, [pc, #8]	@ (8000888 <CS_UnSelect+0x14>)
 800087e:	f000 fe2f 	bl	80014e0 <HAL_GPIO_WritePin>
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40020000 	.word	0x40020000

0800088c <CE_Enable>:


void CE_Enable (void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Chip_Enable_PORT, Chip_Enable_PIN, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2108      	movs	r1, #8
 8000894:	4802      	ldr	r0, [pc, #8]	@ (80008a0 <CE_Enable+0x14>)
 8000896:	f000 fe23 	bl	80014e0 <HAL_GPIO_WritePin>
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40020000 	.word	0x40020000

080008a4 <CE_Disable>:

void CE_Disable (void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Chip_Enable_PORT, Chip_Enable_PIN, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2108      	movs	r1, #8
 80008ac:	4802      	ldr	r0, [pc, #8]	@ (80008b8 <CE_Disable+0x14>)
 80008ae:	f000 fe17 	bl	80014e0 <HAL_GPIO_WritePin>
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40020000 	.word	0x40020000

080008bc <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	460a      	mov	r2, r1
 80008c6:	71fb      	strb	r3, [r7, #7]
 80008c8:	4613      	mov	r3, r2
 80008ca:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	f043 0320 	orr.w	r3, r3, #32
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80008d6:	79bb      	ldrb	r3, [r7, #6]
 80008d8:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80008da:	f7ff ffbf 	bl	800085c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80008de:	f107 010c 	add.w	r1, r7, #12
 80008e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e6:	2202      	movs	r2, #2
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <nrf24_WriteReg+0x40>)
 80008ea:	f001 fb1a 	bl	8001f22 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80008ee:	f7ff ffc1 	bl	8000874 <CS_UnSelect>
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000009c 	.word	0x2000009c

08000900 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
 800090c:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	f043 0320 	orr.w	r3, r3, #32
 8000914:	b2db      	uxtb	r3, r3
 8000916:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000918:	f7ff ffa0 	bl	800085c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 800091c:	f107 0114 	add.w	r1, r7, #20
 8000920:	2364      	movs	r3, #100	@ 0x64
 8000922:	2201      	movs	r2, #1
 8000924:	4808      	ldr	r0, [pc, #32]	@ (8000948 <nrf24_WriteRegMulti+0x48>)
 8000926:	f001 fafc 	bl	8001f22 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	b29a      	uxth	r2, r3
 800092e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000932:	68b9      	ldr	r1, [r7, #8]
 8000934:	4804      	ldr	r0, [pc, #16]	@ (8000948 <nrf24_WriteRegMulti+0x48>)
 8000936:	f001 faf4 	bl	8001f22 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800093a:	f7ff ff9b 	bl	8000874 <CS_UnSelect>
}
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000009c 	.word	0x2000009c

0800094c <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000956:	2300      	movs	r3, #0
 8000958:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800095a:	f7ff ff7f 	bl	800085c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800095e:	1df9      	adds	r1, r7, #7
 8000960:	2364      	movs	r3, #100	@ 0x64
 8000962:	2201      	movs	r2, #1
 8000964:	4808      	ldr	r0, [pc, #32]	@ (8000988 <nrf24_ReadReg+0x3c>)
 8000966:	f001 fadc 	bl	8001f22 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800096a:	f107 010f 	add.w	r1, r7, #15
 800096e:	2364      	movs	r3, #100	@ 0x64
 8000970:	2201      	movs	r2, #1
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <nrf24_ReadReg+0x3c>)
 8000974:	f001 fc19 	bl	80021aa <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000978:	f7ff ff7c 	bl	8000874 <CS_UnSelect>

	return data;
 800097c:	7bfb      	ldrb	r3, [r7, #15]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000009c 	.word	0x2000009c

0800098c <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
 8000998:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800099a:	f7ff ff5f 	bl	800085c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800099e:	f107 010f 	add.w	r1, r7, #15
 80009a2:	2364      	movs	r3, #100	@ 0x64
 80009a4:	2201      	movs	r2, #1
 80009a6:	4808      	ldr	r0, [pc, #32]	@ (80009c8 <nrf24_ReadReg_Multi+0x3c>)
 80009a8:	f001 fabb 	bl	8001f22 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b4:	68b9      	ldr	r1, [r7, #8]
 80009b6:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <nrf24_ReadReg_Multi+0x3c>)
 80009b8:	f001 fbf7 	bl	80021aa <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80009bc:	f7ff ff5a 	bl	8000874 <CS_UnSelect>
}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	2000009c 	.word	0x2000009c

080009cc <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80009d6:	f7ff ff41 	bl	800085c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80009da:	1df9      	adds	r1, r7, #7
 80009dc:	2364      	movs	r3, #100	@ 0x64
 80009de:	2201      	movs	r2, #1
 80009e0:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <nrfsendCmd+0x28>)
 80009e2:	f001 fa9e 	bl	8001f22 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80009e6:	f7ff ff45 	bl	8000874 <CS_UnSelect>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	2000009c 	.word	0x2000009c

080009f8 <NRF24_ReadKeyRegisters>:
//}
//


void NRF24_ReadKeyRegisters(void)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af02      	add	r7, sp, #8
    uint8_t status = nrf24_ReadReg(STATUS);
 80009fe:	2007      	movs	r0, #7
 8000a00:	f7ff ffa4 	bl	800094c <nrf24_ReadReg>
 8000a04:	4603      	mov	r3, r0
 8000a06:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_status = nrf24_ReadReg(FIFO_STATUS);
 8000a08:	2017      	movs	r0, #23
 8000a0a:	f7ff ff9f 	bl	800094c <nrf24_ReadReg>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	73bb      	strb	r3, [r7, #14]
    uint8_t config = nrf24_ReadReg(CONFIG);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff ff9a 	bl	800094c <nrf24_ReadReg>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	737b      	strb	r3, [r7, #13]
    uint8_t observe_tx = nrf24_ReadReg(OBSERVE_TX);
 8000a1c:	2008      	movs	r0, #8
 8000a1e:	f7ff ff95 	bl	800094c <nrf24_ReadReg>
 8000a22:	4603      	mov	r3, r0
 8000a24:	733b      	strb	r3, [r7, #12]
    uint8_t rf_channel = nrf24_ReadReg(RF_CH);
 8000a26:	2005      	movs	r0, #5
 8000a28:	f7ff ff90 	bl	800094c <nrf24_ReadReg>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	72fb      	strb	r3, [r7, #11]

    printf("STATUS Register: 0x%02X\n", status);
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	4619      	mov	r1, r3
 8000a34:	4817      	ldr	r0, [pc, #92]	@ (8000a94 <NRF24_ReadKeyRegisters+0x9c>)
 8000a36:	f002 f87f 	bl	8002b38 <iprintf>
    printf("FIFO_STATUS Register: 0x%02X\n", fifo_status);
 8000a3a:	7bbb      	ldrb	r3, [r7, #14]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4816      	ldr	r0, [pc, #88]	@ (8000a98 <NRF24_ReadKeyRegisters+0xa0>)
 8000a40:	f002 f87a 	bl	8002b38 <iprintf>
    printf("CONFIG Register: 0x%02X\n", config);
 8000a44:	7b7b      	ldrb	r3, [r7, #13]
 8000a46:	4619      	mov	r1, r3
 8000a48:	4814      	ldr	r0, [pc, #80]	@ (8000a9c <NRF24_ReadKeyRegisters+0xa4>)
 8000a4a:	f002 f875 	bl	8002b38 <iprintf>
    printf("OBSERVE_TX Register: 0x%02X\n", observe_tx);
 8000a4e:	7b3b      	ldrb	r3, [r7, #12]
 8000a50:	4619      	mov	r1, r3
 8000a52:	4813      	ldr	r0, [pc, #76]	@ (8000aa0 <NRF24_ReadKeyRegisters+0xa8>)
 8000a54:	f002 f870 	bl	8002b38 <iprintf>
    printf("RF_CH Register: 0x%02X\n", rf_channel);
 8000a58:	7afb      	ldrb	r3, [r7, #11]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4811      	ldr	r0, [pc, #68]	@ (8000aa4 <NRF24_ReadKeyRegisters+0xac>)
 8000a5e:	f002 f86b 	bl	8002b38 <iprintf>

    // Optionally, print the TX_ADDR
    uint8_t tx_address[5];
    nrf24_ReadReg_Multi(TX_ADDR, tx_address, 5);
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2205      	movs	r2, #5
 8000a66:	4619      	mov	r1, r3
 8000a68:	2010      	movs	r0, #16
 8000a6a:	f7ff ff8f 	bl	800098c <nrf24_ReadReg_Multi>
    printf("TX_ADDR: 0x%02X%02X%02X%02X%02X\n", tx_address[0], tx_address[1], tx_address[2], tx_address[3], tx_address[4]);
 8000a6e:	793b      	ldrb	r3, [r7, #4]
 8000a70:	4619      	mov	r1, r3
 8000a72:	797b      	ldrb	r3, [r7, #5]
 8000a74:	4618      	mov	r0, r3
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	461c      	mov	r4, r3
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	7a3a      	ldrb	r2, [r7, #8]
 8000a7e:	9201      	str	r2, [sp, #4]
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	4623      	mov	r3, r4
 8000a84:	4602      	mov	r2, r0
 8000a86:	4808      	ldr	r0, [pc, #32]	@ (8000aa8 <NRF24_ReadKeyRegisters+0xb0>)
 8000a88:	f002 f856 	bl	8002b38 <iprintf>
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	080038e8 	.word	0x080038e8
 8000a98:	08003904 	.word	0x08003904
 8000a9c:	08003924 	.word	0x08003924
 8000aa0:	08003940 	.word	0x08003940
 8000aa4:	08003960 	.word	0x08003960
 8000aa8:	08003978 	.word	0x08003978

08000aac <NRF24_Init>:




void NRF24_Init (void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000ab0:	f7ff fef8 	bl	80008a4 <CE_Disable>


	// reset everything
//	nrf24_reset (0);

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff ff00 	bl	80008bc <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8000abc:	2100      	movs	r1, #0
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f7ff fefc 	bl	80008bc <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f7ff fef8 	bl	80008bc <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000acc:	2103      	movs	r1, #3
 8000ace:	2003      	movs	r0, #3
 8000ad0:	f7ff fef4 	bl	80008bc <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2004      	movs	r0, #4
 8000ad8:	f7ff fef0 	bl	80008bc <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000adc:	2100      	movs	r1, #0
 8000ade:	2005      	movs	r0, #5
 8000ae0:	f7ff feec 	bl	80008bc <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000ae4:	210e      	movs	r1, #14
 8000ae6:	2006      	movs	r0, #6
 8000ae8:	f7ff fee8 	bl	80008bc <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000aec:	f7ff fece 	bl	800088c <CE_Enable>

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000b00:	f7ff fed0 	bl	80008a4 <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000b04:	78fb      	ldrb	r3, [r7, #3]
 8000b06:	4619      	mov	r1, r3
 8000b08:	2005      	movs	r0, #5
 8000b0a:	f7ff fed7 	bl	80008bc <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 8000b0e:	2205      	movs	r2, #5
 8000b10:	6879      	ldr	r1, [r7, #4]
 8000b12:	2010      	movs	r0, #16
 8000b14:	f7ff fef4 	bl	8000900 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f7ff ff17 	bl	800094c <nrf24_ReadReg>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	73fb      	strb	r3, [r7, #15]
	config &= ~(1 << PRIM_RX);  // Clear PRIM_RX (TX mode)
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	f023 0301 	bic.w	r3, r3, #1
 8000b28:	73fb      	strb	r3, [r7, #15]
	config |= (1 << PWR_UP);    // Ensure PWR_UP is set (power up the device)
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg(CONFIG, config);
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	4619      	mov	r1, r3
 8000b36:	2000      	movs	r0, #0
 8000b38:	f7ff fec0 	bl	80008bc <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000b3c:	f7ff fea6 	bl	800088c <CE_Enable>
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <NRF24_Transmit>:
//



uint8_t NRF24_Transmit (uint8_t *data)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
    uint8_t cmdtosend = W_TX_PAYLOAD;
 8000b50:	23a0      	movs	r3, #160	@ 0xa0
 8000b52:	73bb      	strb	r3, [r7, #14]

    printf("Before transmission:\n");
 8000b54:	481f      	ldr	r0, [pc, #124]	@ (8000bd4 <NRF24_Transmit+0x8c>)
 8000b56:	f002 f857 	bl	8002c08 <puts>
    NRF24_ReadKeyRegisters();  // Monitor registers before transmission
 8000b5a:	f7ff ff4d 	bl	80009f8 <NRF24_ReadKeyRegisters>

    // Select the device
    CS_Select();
 8000b5e:	f7ff fe7d 	bl	800085c <CS_Select>

    // Payload command
    HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8000b62:	f107 010e 	add.w	r1, r7, #14
 8000b66:	2364      	movs	r3, #100	@ 0x64
 8000b68:	2201      	movs	r2, #1
 8000b6a:	481b      	ldr	r0, [pc, #108]	@ (8000bd8 <NRF24_Transmit+0x90>)
 8000b6c:	f001 f9d9 	bl	8001f22 <HAL_SPI_Transmit>

    // Send the payload (32 bytes)
    HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 8000b70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b74:	2220      	movs	r2, #32
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	4817      	ldr	r0, [pc, #92]	@ (8000bd8 <NRF24_Transmit+0x90>)
 8000b7a:	f001 f9d2 	bl	8001f22 <HAL_SPI_Transmit>

    // Unselect the device
    CS_UnSelect();
 8000b7e:	f7ff fe79 	bl	8000874 <CS_UnSelect>

    HAL_Delay(1);
 8000b82:	2001      	movs	r0, #1
 8000b84:	f000 fa1e 	bl	8000fc4 <HAL_Delay>

    // Check the STATUS and FIFO_STATUS registers
    printf("After transmission:\n");
 8000b88:	4814      	ldr	r0, [pc, #80]	@ (8000bdc <NRF24_Transmit+0x94>)
 8000b8a:	f002 f83d 	bl	8002c08 <puts>
    NRF24_ReadKeyRegisters();  // Monitor registers after transmission
 8000b8e:	f7ff ff33 	bl	80009f8 <NRF24_ReadKeyRegisters>




    // Check the STATUS register for the TX_DS flag
    uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 8000b92:	2017      	movs	r0, #23
 8000b94:	f7ff feda 	bl	800094c <nrf24_ReadReg>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	73fb      	strb	r3, [r7, #15]
        	  if ((fifostatus & (1 << 5)) == 0)
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	f003 0320 	and.w	r3, r3, #32
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d107      	bne.n	8000bb6 <NRF24_Transmit+0x6e>
            {
        		cmdtosend = FLUSH_TX;
 8000ba6:	23e1      	movs	r3, #225	@ 0xe1
 8000ba8:	73bb      	strb	r3, [r7, #14]
        		nrfsendCmd(cmdtosend);
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff0d 	bl	80009cc <nrfsendCmd>
        		         		 	    // reset FIFO_STATUS
//   			    nrf24_reset (FIFO_STATUS);

        		  	       return 1;  // Transmission was successful
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e009      	b.n	8000bca <NRF24_Transmit+0x82>
    }

    // Flush the TX FIFO if the transmission fails
    cmdtosend = FLUSH_TX;
 8000bb6:	23e1      	movs	r3, #225	@ 0xe1
 8000bb8:	73bb      	strb	r3, [r7, #14]
    nrfsendCmd(cmdtosend);
 8000bba:	7bbb      	ldrb	r3, [r7, #14]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff05 	bl	80009cc <nrfsendCmd>

    printf("Transmission Failed.\n");
 8000bc2:	4807      	ldr	r0, [pc, #28]	@ (8000be0 <NRF24_Transmit+0x98>)
 8000bc4:	f002 f820 	bl	8002c08 <puts>
    return 0;  // Transmission failed
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	0800399c 	.word	0x0800399c
 8000bd8:	2000009c 	.word	0x2000009c
 8000bdc:	080039b4 	.word	0x080039b4
 8000be0:	080039c8 	.word	0x080039c8

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000bf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	4a08      	ldr	r2, [pc, #32]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c22:	2007      	movs	r0, #7
 8000c24:	f000 faa4 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800

08000c34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	@ 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a19      	ldr	r2, [pc, #100]	@ (8000cb8 <HAL_SPI_MspInit+0x84>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12b      	bne.n	8000cae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5e:	4a17      	ldr	r2, [pc, #92]	@ (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a10      	ldr	r2, [pc, #64]	@ (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <HAL_SPI_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c8e:	23e0      	movs	r3, #224	@ 0xe0
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c9e:	2305      	movs	r3, #5
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <HAL_SPI_MspInit+0x8c>)
 8000caa:	f000 fa95 	bl	80011d8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	@ 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40013000 	.word	0x40013000
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <NMI_Handler+0x4>

08000ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1a:	f000 f933 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e00a      	b.n	8000d4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d34:	f3af 8000 	nop.w
 8000d38:	4601      	mov	r1, r0
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1c5a      	adds	r2, r3, #1
 8000d3e:	60ba      	str	r2, [r7, #8]
 8000d40:	b2ca      	uxtb	r2, r1
 8000d42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	3301      	adds	r3, #1
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	dbf0      	blt.n	8000d34 <_read+0x12>
  }

  return len;
 8000d52:	687b      	ldr	r3, [r7, #4]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	e009      	b.n	8000d82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1c5a      	adds	r2, r3, #1
 8000d72:	60ba      	str	r2, [r7, #8]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	dbf1      	blt.n	8000d6e <_write+0x12>
  }
  return len;
 8000d8a:	687b      	ldr	r3, [r7, #4]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <_close>:

int _close(int file)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dbc:	605a      	str	r2, [r3, #4]
  return 0;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <_isatty>:

int _isatty(int file)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dd4:	2301      	movs	r3, #1
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b085      	sub	sp, #20
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e04:	4a14      	ldr	r2, [pc, #80]	@ (8000e58 <_sbrk+0x5c>)
 8000e06:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <_sbrk+0x60>)
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e10:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <_sbrk+0x64>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <_sbrk+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d207      	bcs.n	8000e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e2c:	f002 f81a 	bl	8002e64 <__errno>
 8000e30:	4603      	mov	r3, r0
 8000e32:	220c      	movs	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e3a:	e009      	b.n	8000e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e42:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a05      	ldr	r2, [pc, #20]	@ (8000e60 <_sbrk+0x64>)
 8000e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20020000 	.word	0x20020000
 8000e5c:	00000400 	.word	0x00000400
 8000e60:	200000f4 	.word	0x200000f4
 8000e64:	20000248 	.word	0x20000248

08000e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <SystemInit+0x20>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <SystemInit+0x20>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e90:	f7ff ffea 	bl	8000e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e96:	490d      	ldr	r1, [pc, #52]	@ (8000ecc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e98:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eac:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eba:	f001 ffd9 	bl	8002e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ebe:	f7ff fb57 	bl	8000570 <main>
  bx  lr    
 8000ec2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000ed0:	08003a34 	.word	0x08003a34
  ldr r2, =_sbss
 8000ed4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000ed8:	20000248 	.word	0x20000248

08000edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	@ (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f931 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f7ff fe66 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f93b 	bl	80011be <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f60:	f000 f911 	bl	8001186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	@ (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000018 	.word	0x20000018
 8000f7c:	20000020 	.word	0x20000020
 8000f80:	2000001c 	.word	0x2000001c

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	@ (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000020 	.word	0x20000020
 8000fa8:	200000f8 	.word	0x200000f8

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	@ (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200000f8 	.word	0x200000f8

08000fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff ffee 	bl	8000fac <HAL_GetTick>
 8000fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fdc:	d005      	beq.n	8000fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fde:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <HAL_Delay+0x44>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fea:	bf00      	nop
 8000fec:	f7ff ffde 	bl	8000fac <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f7      	bhi.n	8000fec <HAL_Delay+0x28>
  {
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000020 	.word	0x20000020

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	@ (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	@ (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	@ (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	@ 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	@ 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800113c:	d301      	bcc.n	8001142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113e:	2301      	movs	r3, #1
 8001140:	e00f      	b.n	8001162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001142:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <SysTick_Config+0x40>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114a:	210f      	movs	r1, #15
 800114c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001150:	f7ff ff8e 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001154:	4b05      	ldr	r3, [pc, #20]	@ (800116c <SysTick_Config+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115a:	4b04      	ldr	r3, [pc, #16]	@ (800116c <SysTick_Config+0x40>)
 800115c:	2207      	movs	r2, #7
 800115e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010

08001170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff47 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001198:	f7ff ff5c 	bl	8001054 <__NVIC_GetPriorityGrouping>
 800119c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ff8e 	bl	80010c4 <NVIC_EncodePriority>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5d 	bl	8001070 <__NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffb0 	bl	800112c <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	@ 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	e159      	b.n	80014a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	429a      	cmp	r2, r3
 800120e:	f040 8148 	bne.w	80014a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	2b01      	cmp	r3, #1
 800121c:	d005      	beq.n	800122a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001226:	2b02      	cmp	r3, #2
 8001228:	d130      	bne.n	800128c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001260:	2201      	movs	r2, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	f003 0201 	and.w	r2, r3, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b03      	cmp	r3, #3
 8001296:	d017      	beq.n	80012c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d123      	bne.n	800131c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	08da      	lsrs	r2, r3, #3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3208      	adds	r2, #8
 80012dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	220f      	movs	r2, #15
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	08da      	lsrs	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3208      	adds	r2, #8
 8001316:	69b9      	ldr	r1, [r7, #24]
 8001318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0203 	and.w	r2, r3, #3
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80a2 	beq.w	80014a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b57      	ldr	r3, [pc, #348]	@ (80014c0 <HAL_GPIO_Init+0x2e8>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	4a56      	ldr	r2, [pc, #344]	@ (80014c0 <HAL_GPIO_Init+0x2e8>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800136c:	6453      	str	r3, [r2, #68]	@ 0x44
 800136e:	4b54      	ldr	r3, [pc, #336]	@ (80014c0 <HAL_GPIO_Init+0x2e8>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800137a:	4a52      	ldr	r2, [pc, #328]	@ (80014c4 <HAL_GPIO_Init+0x2ec>)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	220f      	movs	r2, #15
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a49      	ldr	r2, [pc, #292]	@ (80014c8 <HAL_GPIO_Init+0x2f0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d019      	beq.n	80013da <HAL_GPIO_Init+0x202>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a48      	ldr	r2, [pc, #288]	@ (80014cc <HAL_GPIO_Init+0x2f4>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d013      	beq.n	80013d6 <HAL_GPIO_Init+0x1fe>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a47      	ldr	r2, [pc, #284]	@ (80014d0 <HAL_GPIO_Init+0x2f8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d00d      	beq.n	80013d2 <HAL_GPIO_Init+0x1fa>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a46      	ldr	r2, [pc, #280]	@ (80014d4 <HAL_GPIO_Init+0x2fc>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d007      	beq.n	80013ce <HAL_GPIO_Init+0x1f6>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a45      	ldr	r2, [pc, #276]	@ (80014d8 <HAL_GPIO_Init+0x300>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_GPIO_Init+0x1f2>
 80013c6:	2304      	movs	r3, #4
 80013c8:	e008      	b.n	80013dc <HAL_GPIO_Init+0x204>
 80013ca:	2307      	movs	r3, #7
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x204>
 80013ce:	2303      	movs	r3, #3
 80013d0:	e004      	b.n	80013dc <HAL_GPIO_Init+0x204>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_Init+0x204>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x204>
 80013da:	2300      	movs	r3, #0
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	f002 0203 	and.w	r2, r2, #3
 80013e2:	0092      	lsls	r2, r2, #2
 80013e4:	4093      	lsls	r3, r2
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ec:	4935      	ldr	r1, [pc, #212]	@ (80014c4 <HAL_GPIO_Init+0x2ec>)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3302      	adds	r3, #2
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fa:	4b38      	ldr	r3, [pc, #224]	@ (80014dc <HAL_GPIO_Init+0x304>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800141e:	4a2f      	ldr	r2, [pc, #188]	@ (80014dc <HAL_GPIO_Init+0x304>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001424:	4b2d      	ldr	r3, [pc, #180]	@ (80014dc <HAL_GPIO_Init+0x304>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001448:	4a24      	ldr	r2, [pc, #144]	@ (80014dc <HAL_GPIO_Init+0x304>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800144e:	4b23      	ldr	r3, [pc, #140]	@ (80014dc <HAL_GPIO_Init+0x304>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001472:	4a1a      	ldr	r2, [pc, #104]	@ (80014dc <HAL_GPIO_Init+0x304>)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001478:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <HAL_GPIO_Init+0x304>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800149c:	4a0f      	ldr	r2, [pc, #60]	@ (80014dc <HAL_GPIO_Init+0x304>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3301      	adds	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	2b0f      	cmp	r3, #15
 80014ac:	f67f aea2 	bls.w	80011f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3724      	adds	r7, #36	@ 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40013800 	.word	0x40013800
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40020400 	.word	0x40020400
 80014d0:	40020800 	.word	0x40020800
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40013c00 	.word	0x40013c00

080014e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f0:	787b      	ldrb	r3, [r7, #1]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014fc:	e003      	b.n	8001506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	041a      	lsls	r2, r3, #16
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	619a      	str	r2, [r3, #24]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001512:	b480      	push	{r7}
 8001514:	b085      	sub	sp, #20
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	460b      	mov	r3, r1
 800151c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001524:	887a      	ldrh	r2, [r7, #2]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4013      	ands	r3, r2
 800152a:	041a      	lsls	r2, r3, #16
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	43d9      	mvns	r1, r3
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	400b      	ands	r3, r1
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	619a      	str	r2, [r3, #24]
}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e267      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d075      	beq.n	8001652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001566:	4b88      	ldr	r3, [pc, #544]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b04      	cmp	r3, #4
 8001570:	d00c      	beq.n	800158c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001572:	4b85      	ldr	r3, [pc, #532]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800157a:	2b08      	cmp	r3, #8
 800157c:	d112      	bne.n	80015a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800157e:	4b82      	ldr	r3, [pc, #520]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001586:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800158a:	d10b      	bne.n	80015a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	4b7e      	ldr	r3, [pc, #504]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d05b      	beq.n	8001650 <HAL_RCC_OscConfig+0x108>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d157      	bne.n	8001650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e242      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015ac:	d106      	bne.n	80015bc <HAL_RCC_OscConfig+0x74>
 80015ae:	4b76      	ldr	r3, [pc, #472]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a75      	ldr	r2, [pc, #468]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 80015b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e01d      	b.n	80015f8 <HAL_RCC_OscConfig+0xb0>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x98>
 80015c6:	4b70      	ldr	r3, [pc, #448]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a6f      	ldr	r2, [pc, #444]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 80015cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a6c      	ldr	r2, [pc, #432]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 80015d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e00b      	b.n	80015f8 <HAL_RCC_OscConfig+0xb0>
 80015e0:	4b69      	ldr	r3, [pc, #420]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a68      	ldr	r2, [pc, #416]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 80015e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b66      	ldr	r3, [pc, #408]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a65      	ldr	r2, [pc, #404]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 80015f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d013      	beq.n	8001628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fcd4 	bl	8000fac <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fcd0 	bl	8000fac <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	@ 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e207      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	4b5b      	ldr	r3, [pc, #364]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0xc0>
 8001626:	e014      	b.n	8001652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fcc0 	bl	8000fac <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fcbc 	bl	8000fac <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	@ 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e1f3      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	4b51      	ldr	r3, [pc, #324]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0xe8>
 800164e:	e000      	b.n	8001652 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d063      	beq.n	8001726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800165e:	4b4a      	ldr	r3, [pc, #296]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00b      	beq.n	8001682 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800166a:	4b47      	ldr	r3, [pc, #284]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001672:	2b08      	cmp	r3, #8
 8001674:	d11c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001676:	4b44      	ldr	r3, [pc, #272]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d116      	bne.n	80016b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001682:	4b41      	ldr	r3, [pc, #260]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <HAL_RCC_OscConfig+0x152>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d001      	beq.n	800169a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e1c7      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169a:	4b3b      	ldr	r3, [pc, #236]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4937      	ldr	r1, [pc, #220]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ae:	e03a      	b.n	8001726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d020      	beq.n	80016fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b8:	4b34      	ldr	r3, [pc, #208]	@ (800178c <HAL_RCC_OscConfig+0x244>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016be:	f7ff fc75 	bl	8000fac <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c6:	f7ff fc71 	bl	8000fac <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e1a8      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e4:	4b28      	ldr	r3, [pc, #160]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4925      	ldr	r1, [pc, #148]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	600b      	str	r3, [r1, #0]
 80016f8:	e015      	b.n	8001726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fa:	4b24      	ldr	r3, [pc, #144]	@ (800178c <HAL_RCC_OscConfig+0x244>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fc54 	bl	8000fac <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001708:	f7ff fc50 	bl	8000fac <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e187      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171a:	4b1b      	ldr	r3, [pc, #108]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d036      	beq.n	80017a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d016      	beq.n	8001768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <HAL_RCC_OscConfig+0x248>)
 800173c:	2201      	movs	r2, #1
 800173e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001740:	f7ff fc34 	bl	8000fac <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001748:	f7ff fc30 	bl	8000fac <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e167      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <HAL_RCC_OscConfig+0x240>)
 800175c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0x200>
 8001766:	e01b      	b.n	80017a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001768:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_RCC_OscConfig+0x248>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176e:	f7ff fc1d 	bl	8000fac <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001774:	e00e      	b.n	8001794 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001776:	f7ff fc19 	bl	8000fac <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d907      	bls.n	8001794 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e150      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
 8001788:	40023800 	.word	0x40023800
 800178c:	42470000 	.word	0x42470000
 8001790:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001794:	4b88      	ldr	r3, [pc, #544]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1ea      	bne.n	8001776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 8097 	beq.w	80018dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b2:	4b81      	ldr	r3, [pc, #516]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10f      	bne.n	80017de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	4b7d      	ldr	r3, [pc, #500]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	4a7c      	ldr	r2, [pc, #496]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 80017c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ce:	4b7a      	ldr	r3, [pc, #488]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017da:	2301      	movs	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017de:	4b77      	ldr	r3, [pc, #476]	@ (80019bc <HAL_RCC_OscConfig+0x474>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d118      	bne.n	800181c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ea:	4b74      	ldr	r3, [pc, #464]	@ (80019bc <HAL_RCC_OscConfig+0x474>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a73      	ldr	r2, [pc, #460]	@ (80019bc <HAL_RCC_OscConfig+0x474>)
 80017f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017f6:	f7ff fbd9 	bl	8000fac <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017fe:	f7ff fbd5 	bl	8000fac <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e10c      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001810:	4b6a      	ldr	r3, [pc, #424]	@ (80019bc <HAL_RCC_OscConfig+0x474>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x2ea>
 8001824:	4b64      	ldr	r3, [pc, #400]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001828:	4a63      	ldr	r2, [pc, #396]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001830:	e01c      	b.n	800186c <HAL_RCC_OscConfig+0x324>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b05      	cmp	r3, #5
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x30c>
 800183a:	4b5f      	ldr	r3, [pc, #380]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800183e:	4a5e      	ldr	r2, [pc, #376]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	6713      	str	r3, [r2, #112]	@ 0x70
 8001846:	4b5c      	ldr	r3, [pc, #368]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184a:	4a5b      	ldr	r2, [pc, #364]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6713      	str	r3, [r2, #112]	@ 0x70
 8001852:	e00b      	b.n	800186c <HAL_RCC_OscConfig+0x324>
 8001854:	4b58      	ldr	r3, [pc, #352]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001858:	4a57      	ldr	r2, [pc, #348]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001860:	4b55      	ldr	r3, [pc, #340]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001864:	4a54      	ldr	r2, [pc, #336]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001866:	f023 0304 	bic.w	r3, r3, #4
 800186a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d015      	beq.n	80018a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001874:	f7ff fb9a 	bl	8000fac <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187a:	e00a      	b.n	8001892 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187c:	f7ff fb96 	bl	8000fac <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e0cb      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001892:	4b49      	ldr	r3, [pc, #292]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0ee      	beq.n	800187c <HAL_RCC_OscConfig+0x334>
 800189e:	e014      	b.n	80018ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7ff fb84 	bl	8000fac <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a6:	e00a      	b.n	80018be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a8:	f7ff fb80 	bl	8000fac <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e0b5      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018be:	4b3e      	ldr	r3, [pc, #248]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1ee      	bne.n	80018a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d105      	bne.n	80018dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d0:	4b39      	ldr	r3, [pc, #228]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	4a38      	ldr	r2, [pc, #224]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 80018d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80a1 	beq.w	8001a28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018e6:	4b34      	ldr	r3, [pc, #208]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d05c      	beq.n	80019ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d141      	bne.n	800197e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fa:	4b31      	ldr	r3, [pc, #196]	@ (80019c0 <HAL_RCC_OscConfig+0x478>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fb54 	bl	8000fac <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff fb50 	bl	8000fac <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e087      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191a:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69da      	ldr	r2, [r3, #28]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001934:	019b      	lsls	r3, r3, #6
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	3b01      	subs	r3, #1
 8001940:	041b      	lsls	r3, r3, #16
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001948:	061b      	lsls	r3, r3, #24
 800194a:	491b      	ldr	r1, [pc, #108]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001950:	4b1b      	ldr	r3, [pc, #108]	@ (80019c0 <HAL_RCC_OscConfig+0x478>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff fb29 	bl	8000fac <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195e:	f7ff fb25 	bl	8000fac <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e05c      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001970:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x416>
 800197c:	e054      	b.n	8001a28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197e:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <HAL_RCC_OscConfig+0x478>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff fb12 	bl	8000fac <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff fb0e 	bl	8000fac <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e045      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_RCC_OscConfig+0x470>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x444>
 80019aa:	e03d      	b.n	8001a28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d107      	bne.n	80019c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e038      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40007000 	.word	0x40007000
 80019c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <HAL_RCC_OscConfig+0x4ec>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d028      	beq.n	8001a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d121      	bne.n	8001a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d11a      	bne.n	8001a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019f4:	4013      	ands	r3, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d111      	bne.n	8001a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0a:	085b      	lsrs	r3, r3, #1
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d107      	bne.n	8001a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0cc      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b68      	ldr	r3, [pc, #416]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d90c      	bls.n	8001a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b65      	ldr	r3, [pc, #404]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b63      	ldr	r3, [pc, #396]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0b8      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d020      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a8c:	4b59      	ldr	r3, [pc, #356]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4a58      	ldr	r2, [pc, #352]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa4:	4b53      	ldr	r3, [pc, #332]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	4a52      	ldr	r2, [pc, #328]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab0:	4b50      	ldr	r3, [pc, #320]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	494d      	ldr	r1, [pc, #308]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d044      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	4b47      	ldr	r3, [pc, #284]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d119      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e07f      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d003      	beq.n	8001af6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af6:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d109      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e06f      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b06:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e067      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b16:	4b37      	ldr	r3, [pc, #220]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f023 0203 	bic.w	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4934      	ldr	r1, [pc, #208]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b28:	f7ff fa40 	bl	8000fac <HAL_GetTick>
 8001b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b30:	f7ff fa3c 	bl	8000fac <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e04f      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 020c 	and.w	r2, r3, #12
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d1eb      	bne.n	8001b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b58:	4b25      	ldr	r3, [pc, #148]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d20c      	bcs.n	8001b80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b22      	ldr	r3, [pc, #136]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b20      	ldr	r3, [pc, #128]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e032      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8c:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4916      	ldr	r1, [pc, #88]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d009      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001baa:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	490e      	ldr	r1, [pc, #56]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bbe:	f000 f821 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	490a      	ldr	r1, [pc, #40]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	5ccb      	ldrb	r3, [r1, r3]
 8001bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd6:	4a09      	ldr	r2, [pc, #36]	@ (8001bfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001bda:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff f9a0 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023c00 	.word	0x40023c00
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	080039e0 	.word	0x080039e0
 8001bfc:	20000018 	.word	0x20000018
 8001c00:	2000001c 	.word	0x2000001c

08001c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c08:	b094      	sub	sp, #80	@ 0x50
 8001c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c1c:	4b79      	ldr	r3, [pc, #484]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d00d      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x40>
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	f200 80e1 	bhi.w	8001df0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x34>
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d003      	beq.n	8001c3e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c36:	e0db      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c38:	4b73      	ldr	r3, [pc, #460]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c3c:	e0db      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c3e:	4b73      	ldr	r3, [pc, #460]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x208>)
 8001c40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c42:	e0d8      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c44:	4b6f      	ldr	r3, [pc, #444]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c4c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d063      	beq.n	8001d22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5a:	4b6a      	ldr	r3, [pc, #424]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	099b      	lsrs	r3, r3, #6
 8001c60:	2200      	movs	r2, #0
 8001c62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c6e:	2300      	movs	r3, #0
 8001c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c76:	4622      	mov	r2, r4
 8001c78:	462b      	mov	r3, r5
 8001c7a:	f04f 0000 	mov.w	r0, #0
 8001c7e:	f04f 0100 	mov.w	r1, #0
 8001c82:	0159      	lsls	r1, r3, #5
 8001c84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c88:	0150      	lsls	r0, r2, #5
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4621      	mov	r1, r4
 8001c90:	1a51      	subs	r1, r2, r1
 8001c92:	6139      	str	r1, [r7, #16]
 8001c94:	4629      	mov	r1, r5
 8001c96:	eb63 0301 	sbc.w	r3, r3, r1
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ca8:	4659      	mov	r1, fp
 8001caa:	018b      	lsls	r3, r1, #6
 8001cac:	4651      	mov	r1, sl
 8001cae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cb2:	4651      	mov	r1, sl
 8001cb4:	018a      	lsls	r2, r1, #6
 8001cb6:	4651      	mov	r1, sl
 8001cb8:	ebb2 0801 	subs.w	r8, r2, r1
 8001cbc:	4659      	mov	r1, fp
 8001cbe:	eb63 0901 	sbc.w	r9, r3, r1
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cd6:	4690      	mov	r8, r2
 8001cd8:	4699      	mov	r9, r3
 8001cda:	4623      	mov	r3, r4
 8001cdc:	eb18 0303 	adds.w	r3, r8, r3
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	462b      	mov	r3, r5
 8001ce4:	eb49 0303 	adc.w	r3, r9, r3
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	024b      	lsls	r3, r1, #9
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d00:	4621      	mov	r1, r4
 8001d02:	024a      	lsls	r2, r1, #9
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d14:	f7fe fab4 	bl	8000280 <__aeabi_uldivmod>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d20:	e058      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d22:	4b38      	ldr	r3, [pc, #224]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	099b      	lsrs	r3, r3, #6
 8001d28:	2200      	movs	r2, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d32:	623b      	str	r3, [r7, #32]
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d3c:	4642      	mov	r2, r8
 8001d3e:	464b      	mov	r3, r9
 8001d40:	f04f 0000 	mov.w	r0, #0
 8001d44:	f04f 0100 	mov.w	r1, #0
 8001d48:	0159      	lsls	r1, r3, #5
 8001d4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d4e:	0150      	lsls	r0, r2, #5
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4641      	mov	r1, r8
 8001d56:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d5a:	4649      	mov	r1, r9
 8001d5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d74:	ebb2 040a 	subs.w	r4, r2, sl
 8001d78:	eb63 050b 	sbc.w	r5, r3, fp
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	00eb      	lsls	r3, r5, #3
 8001d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d8a:	00e2      	lsls	r2, r4, #3
 8001d8c:	4614      	mov	r4, r2
 8001d8e:	461d      	mov	r5, r3
 8001d90:	4643      	mov	r3, r8
 8001d92:	18e3      	adds	r3, r4, r3
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	464b      	mov	r3, r9
 8001d98:	eb45 0303 	adc.w	r3, r5, r3
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001daa:	4629      	mov	r1, r5
 8001dac:	028b      	lsls	r3, r1, #10
 8001dae:	4621      	mov	r1, r4
 8001db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001db4:	4621      	mov	r1, r4
 8001db6:	028a      	lsls	r2, r1, #10
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	61fa      	str	r2, [r7, #28]
 8001dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dc8:	f7fe fa5a 	bl	8000280 <__aeabi_uldivmod>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	0c1b      	lsrs	r3, r3, #16
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	3301      	adds	r3, #1
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001de4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001de6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dee:	e002      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001df0:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8001df2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001df6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3750      	adds	r7, #80	@ 0x50
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	00f42400 	.word	0x00f42400
 8001e0c:	007a1200 	.word	0x007a1200

08001e10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e07b      	b.n	8001f1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d108      	bne.n	8001e3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e32:	d009      	beq.n	8001e48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
 8001e3a:	e005      	b.n	8001e48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d106      	bne.n	8001e68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7fe fee6 	bl	8000c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ecc:	ea42 0103 	orr.w	r1, r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	f003 0104 	and.w	r1, r3, #4
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eee:	f003 0210 	and.w	r2, r3, #16
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69da      	ldr	r2, [r3, #28]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b088      	sub	sp, #32
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f32:	f7ff f83b 	bl	8000fac <HAL_GetTick>
 8001f36:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d001      	beq.n	8001f4c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e12a      	b.n	80021a2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <HAL_SPI_Transmit+0x36>
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e122      	b.n	80021a2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_SPI_Transmit+0x48>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e11b      	b.n	80021a2 <HAL_SPI_Transmit+0x280>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2203      	movs	r2, #3
 8001f76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	88fa      	ldrh	r2, [r7, #6]
 8001f8a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	88fa      	ldrh	r2, [r7, #6]
 8001f90:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fb8:	d10f      	bne.n	8001fda <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe4:	2b40      	cmp	r3, #64	@ 0x40
 8001fe6:	d007      	beq.n	8001ff8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ff6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002000:	d152      	bne.n	80020a8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <HAL_SPI_Transmit+0xee>
 800200a:	8b7b      	ldrh	r3, [r7, #26]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d145      	bne.n	800209c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002014:	881a      	ldrh	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002020:	1c9a      	adds	r2, r3, #2
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002034:	e032      	b.n	800209c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b02      	cmp	r3, #2
 8002042:	d112      	bne.n	800206a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002048:	881a      	ldrh	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002054:	1c9a      	adds	r2, r3, #2
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002068:	e018      	b.n	800209c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800206a:	f7fe ff9f 	bl	8000fac <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d803      	bhi.n	8002082 <HAL_SPI_Transmit+0x160>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002080:	d102      	bne.n	8002088 <HAL_SPI_Transmit+0x166>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d109      	bne.n	800209c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e082      	b.n	80021a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1c7      	bne.n	8002036 <HAL_SPI_Transmit+0x114>
 80020a6:	e053      	b.n	8002150 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_SPI_Transmit+0x194>
 80020b0:	8b7b      	ldrh	r3, [r7, #26]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d147      	bne.n	8002146 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	330c      	adds	r3, #12
 80020c0:	7812      	ldrb	r2, [r2, #0]
 80020c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020dc:	e033      	b.n	8002146 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d113      	bne.n	8002114 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	330c      	adds	r3, #12
 80020f6:	7812      	ldrb	r2, [r2, #0]
 80020f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002108:	b29b      	uxth	r3, r3
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002112:	e018      	b.n	8002146 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002114:	f7fe ff4a 	bl	8000fac <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d803      	bhi.n	800212c <HAL_SPI_Transmit+0x20a>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800212a:	d102      	bne.n	8002132 <HAL_SPI_Transmit+0x210>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e02d      	b.n	80021a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800214a:	b29b      	uxth	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1c6      	bne.n	80020de <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	6839      	ldr	r1, [r7, #0]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 fbd9 	bl	800290c <SPI_EndRxTxTransaction>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10a      	bne.n	8002184 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80021a0:	2300      	movs	r3, #0
  }
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3720      	adds	r7, #32
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b088      	sub	sp, #32
 80021ae:	af02      	add	r7, sp, #8
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	4613      	mov	r3, r2
 80021b8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d001      	beq.n	80021ca <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
 80021c8:	e104      	b.n	80023d4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021d2:	d112      	bne.n	80021fa <HAL_SPI_Receive+0x50>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10e      	bne.n	80021fa <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2204      	movs	r2, #4
 80021e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80021e4:	88fa      	ldrh	r2, [r7, #6]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	4613      	mov	r3, r2
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	68b9      	ldr	r1, [r7, #8]
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f8f3 	bl	80023dc <HAL_SPI_TransmitReceive>
 80021f6:	4603      	mov	r3, r0
 80021f8:	e0ec      	b.n	80023d4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021fa:	f7fe fed7 	bl	8000fac <HAL_GetTick>
 80021fe:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <HAL_SPI_Receive+0x62>
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0e1      	b.n	80023d4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_SPI_Receive+0x74>
 800221a:	2302      	movs	r3, #2
 800221c:	e0da      	b.n	80023d4 <HAL_SPI_Receive+0x22a>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2204      	movs	r2, #4
 800222a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	88fa      	ldrh	r2, [r7, #6]
 800223e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	88fa      	ldrh	r2, [r7, #6]
 8002244:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800226c:	d10f      	bne.n	800228e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800227c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002298:	2b40      	cmp	r3, #64	@ 0x40
 800229a:	d007      	beq.n	80022ac <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d170      	bne.n	8002396 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80022b4:	e035      	b.n	8002322 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d115      	bne.n	80022f0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f103 020c 	add.w	r2, r3, #12
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d0:	7812      	ldrb	r2, [r2, #0]
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80022ee:	e018      	b.n	8002322 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022f0:	f7fe fe5c 	bl	8000fac <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d803      	bhi.n	8002308 <HAL_SPI_Receive+0x15e>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002306:	d102      	bne.n	800230e <HAL_SPI_Receive+0x164>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d109      	bne.n	8002322 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e058      	b.n	80023d4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002326:	b29b      	uxth	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1c4      	bne.n	80022b6 <HAL_SPI_Receive+0x10c>
 800232c:	e038      	b.n	80023a0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d113      	bne.n	8002364 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002346:	b292      	uxth	r2, r2
 8002348:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234e:	1c9a      	adds	r2, r3, #2
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002362:	e018      	b.n	8002396 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002364:	f7fe fe22 	bl	8000fac <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d803      	bhi.n	800237c <HAL_SPI_Receive+0x1d2>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800237a:	d102      	bne.n	8002382 <HAL_SPI_Receive+0x1d8>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e01e      	b.n	80023d4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1c6      	bne.n	800232e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	6839      	ldr	r1, [r7, #0]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fa4b 	bl	8002840 <SPI_EndRxTransaction>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80023d2:	2300      	movs	r3, #0
  }
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	@ 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023ea:	2301      	movs	r3, #1
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023ee:	f7fe fddd 	bl	8000fac <HAL_GetTick>
 80023f2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023fa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002402:	887b      	ldrh	r3, [r7, #2]
 8002404:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002406:	7ffb      	ldrb	r3, [r7, #31]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d00c      	beq.n	8002426 <HAL_SPI_TransmitReceive+0x4a>
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002412:	d106      	bne.n	8002422 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <HAL_SPI_TransmitReceive+0x46>
 800241c:	7ffb      	ldrb	r3, [r7, #31]
 800241e:	2b04      	cmp	r3, #4
 8002420:	d001      	beq.n	8002426 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002422:	2302      	movs	r3, #2
 8002424:	e17f      	b.n	8002726 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_SPI_TransmitReceive+0x5c>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_SPI_TransmitReceive+0x5c>
 8002432:	887b      	ldrh	r3, [r7, #2]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e174      	b.n	8002726 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_SPI_TransmitReceive+0x6e>
 8002446:	2302      	movs	r3, #2
 8002448:	e16d      	b.n	8002726 <HAL_SPI_TransmitReceive+0x34a>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b04      	cmp	r3, #4
 800245c:	d003      	beq.n	8002466 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2205      	movs	r2, #5
 8002462:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	887a      	ldrh	r2, [r7, #2]
 8002476:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	887a      	ldrh	r2, [r7, #2]
 800247c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	887a      	ldrh	r2, [r7, #2]
 8002488:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	887a      	ldrh	r2, [r7, #2]
 800248e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a6:	2b40      	cmp	r3, #64	@ 0x40
 80024a8:	d007      	beq.n	80024ba <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024c2:	d17e      	bne.n	80025c2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <HAL_SPI_TransmitReceive+0xf6>
 80024cc:	8afb      	ldrh	r3, [r7, #22]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d16c      	bne.n	80025ac <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	881a      	ldrh	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	1c9a      	adds	r2, r3, #2
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024f6:	e059      	b.n	80025ac <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b02      	cmp	r3, #2
 8002504:	d11b      	bne.n	800253e <HAL_SPI_TransmitReceive+0x162>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d016      	beq.n	800253e <HAL_SPI_TransmitReceive+0x162>
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002512:	2b01      	cmp	r3, #1
 8002514:	d113      	bne.n	800253e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	881a      	ldrh	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	1c9a      	adds	r2, r3, #2
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d119      	bne.n	8002580 <HAL_SPI_TransmitReceive+0x1a4>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d014      	beq.n	8002580 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002560:	b292      	uxth	r2, r2
 8002562:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002568:	1c9a      	adds	r2, r3, #2
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800257c:	2301      	movs	r3, #1
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002580:	f7fe fd14 	bl	8000fac <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800258c:	429a      	cmp	r2, r3
 800258e:	d80d      	bhi.n	80025ac <HAL_SPI_TransmitReceive+0x1d0>
 8002590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002592:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002596:	d009      	beq.n	80025ac <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e0bc      	b.n	8002726 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1a0      	bne.n	80024f8 <HAL_SPI_TransmitReceive+0x11c>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d19b      	bne.n	80024f8 <HAL_SPI_TransmitReceive+0x11c>
 80025c0:	e082      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <HAL_SPI_TransmitReceive+0x1f4>
 80025ca:	8afb      	ldrh	r3, [r7, #22]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d171      	bne.n	80026b4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	330c      	adds	r3, #12
 80025da:	7812      	ldrb	r2, [r2, #0]
 80025dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025f6:	e05d      	b.n	80026b4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b02      	cmp	r3, #2
 8002604:	d11c      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x264>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d017      	beq.n	8002640 <HAL_SPI_TransmitReceive+0x264>
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	2b01      	cmp	r3, #1
 8002614:	d114      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	330c      	adds	r3, #12
 8002620:	7812      	ldrb	r2, [r2, #0]
 8002622:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b01      	cmp	r3, #1
 800264c:	d119      	bne.n	8002682 <HAL_SPI_TransmitReceive+0x2a6>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d014      	beq.n	8002682 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002674:	b29b      	uxth	r3, r3
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800267e:	2301      	movs	r3, #1
 8002680:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002682:	f7fe fc93 	bl	8000fac <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800268e:	429a      	cmp	r2, r3
 8002690:	d803      	bhi.n	800269a <HAL_SPI_TransmitReceive+0x2be>
 8002692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002698:	d102      	bne.n	80026a0 <HAL_SPI_TransmitReceive+0x2c4>
 800269a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800269c:	2b00      	cmp	r3, #0
 800269e:	d109      	bne.n	80026b4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e038      	b.n	8002726 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d19c      	bne.n	80025f8 <HAL_SPI_TransmitReceive+0x21c>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d197      	bne.n	80025f8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026c8:	6a3a      	ldr	r2, [r7, #32]
 80026ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f91d 	bl	800290c <SPI_EndRxTxTransaction>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e01d      	b.n	8002726 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10a      	bne.n	8002708 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002724:	2300      	movs	r3, #0
  }
}
 8002726:	4618      	mov	r0, r3
 8002728:	3728      	adds	r7, #40	@ 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002740:	f7fe fc34 	bl	8000fac <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	4413      	add	r3, r2
 800274e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002750:	f7fe fc2c 	bl	8000fac <HAL_GetTick>
 8002754:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002756:	4b39      	ldr	r3, [pc, #228]	@ (800283c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	015b      	lsls	r3, r3, #5
 800275c:	0d1b      	lsrs	r3, r3, #20
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	fb02 f303 	mul.w	r3, r2, r3
 8002764:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002766:	e054      	b.n	8002812 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800276e:	d050      	beq.n	8002812 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002770:	f7fe fc1c 	bl	8000fac <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	429a      	cmp	r2, r3
 800277e:	d902      	bls.n	8002786 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d13d      	bne.n	8002802 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002794:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800279e:	d111      	bne.n	80027c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027a8:	d004      	beq.n	80027b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027b2:	d107      	bne.n	80027c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027cc:	d10f      	bne.n	80027ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e017      	b.n	8002832 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	3b01      	subs	r3, #1
 8002810:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	4013      	ands	r3, r2
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	429a      	cmp	r2, r3
 8002820:	bf0c      	ite	eq
 8002822:	2301      	moveq	r3, #1
 8002824:	2300      	movne	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	429a      	cmp	r2, r3
 800282e:	d19b      	bne.n	8002768 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3720      	adds	r7, #32
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000018 	.word	0x20000018

08002840 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002854:	d111      	bne.n	800287a <SPI_EndRxTransaction+0x3a>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800285e:	d004      	beq.n	800286a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002868:	d107      	bne.n	800287a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002878:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002882:	d12a      	bne.n	80028da <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800288c:	d012      	beq.n	80028b4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2200      	movs	r2, #0
 8002896:	2180      	movs	r1, #128	@ 0x80
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f7ff ff49 	bl	8002730 <SPI_WaitFlagStateUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d02d      	beq.n	8002900 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e026      	b.n	8002902 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2200      	movs	r2, #0
 80028bc:	2101      	movs	r1, #1
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f7ff ff36 	bl	8002730 <SPI_WaitFlagStateUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d01a      	beq.n	8002900 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ce:	f043 0220 	orr.w	r2, r3, #32
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e013      	b.n	8002902 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2200      	movs	r2, #0
 80028e2:	2101      	movs	r1, #1
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f7ff ff23 	bl	8002730 <SPI_WaitFlagStateUntilTimeout>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d007      	beq.n	8002900 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f4:	f043 0220 	orr.w	r2, r3, #32
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e000      	b.n	8002902 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af02      	add	r7, sp, #8
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2201      	movs	r2, #1
 8002920:	2102      	movs	r1, #2
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f7ff ff04 	bl	8002730 <SPI_WaitFlagStateUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d007      	beq.n	800293e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002932:	f043 0220 	orr.w	r2, r3, #32
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e032      	b.n	80029a4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800293e:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <SPI_EndRxTxTransaction+0xa0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a1b      	ldr	r2, [pc, #108]	@ (80029b0 <SPI_EndRxTxTransaction+0xa4>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	0d5b      	lsrs	r3, r3, #21
 800294a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800294e:	fb02 f303 	mul.w	r3, r2, r3
 8002952:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800295c:	d112      	bne.n	8002984 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2200      	movs	r2, #0
 8002966:	2180      	movs	r1, #128	@ 0x80
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f7ff fee1 	bl	8002730 <SPI_WaitFlagStateUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d016      	beq.n	80029a2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002978:	f043 0220 	orr.w	r2, r3, #32
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e00f      	b.n	80029a4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	3b01      	subs	r3, #1
 800298e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800299a:	2b80      	cmp	r3, #128	@ 0x80
 800299c:	d0f2      	beq.n	8002984 <SPI_EndRxTxTransaction+0x78>
 800299e:	e000      	b.n	80029a2 <SPI_EndRxTxTransaction+0x96>
        break;
 80029a0:	bf00      	nop
  }

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000018 	.word	0x20000018
 80029b0:	165e9f81 	.word	0x165e9f81

080029b4 <std>:
 80029b4:	2300      	movs	r3, #0
 80029b6:	b510      	push	{r4, lr}
 80029b8:	4604      	mov	r4, r0
 80029ba:	e9c0 3300 	strd	r3, r3, [r0]
 80029be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80029c2:	6083      	str	r3, [r0, #8]
 80029c4:	8181      	strh	r1, [r0, #12]
 80029c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80029c8:	81c2      	strh	r2, [r0, #14]
 80029ca:	6183      	str	r3, [r0, #24]
 80029cc:	4619      	mov	r1, r3
 80029ce:	2208      	movs	r2, #8
 80029d0:	305c      	adds	r0, #92	@ 0x5c
 80029d2:	f000 f9f9 	bl	8002dc8 <memset>
 80029d6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a0c <std+0x58>)
 80029d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80029da:	4b0d      	ldr	r3, [pc, #52]	@ (8002a10 <std+0x5c>)
 80029dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80029de:	4b0d      	ldr	r3, [pc, #52]	@ (8002a14 <std+0x60>)
 80029e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80029e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002a18 <std+0x64>)
 80029e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80029e6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a1c <std+0x68>)
 80029e8:	6224      	str	r4, [r4, #32]
 80029ea:	429c      	cmp	r4, r3
 80029ec:	d006      	beq.n	80029fc <std+0x48>
 80029ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80029f2:	4294      	cmp	r4, r2
 80029f4:	d002      	beq.n	80029fc <std+0x48>
 80029f6:	33d0      	adds	r3, #208	@ 0xd0
 80029f8:	429c      	cmp	r4, r3
 80029fa:	d105      	bne.n	8002a08 <std+0x54>
 80029fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a04:	f000 ba58 	b.w	8002eb8 <__retarget_lock_init_recursive>
 8002a08:	bd10      	pop	{r4, pc}
 8002a0a:	bf00      	nop
 8002a0c:	08002c19 	.word	0x08002c19
 8002a10:	08002c3b 	.word	0x08002c3b
 8002a14:	08002c73 	.word	0x08002c73
 8002a18:	08002c97 	.word	0x08002c97
 8002a1c:	200000fc 	.word	0x200000fc

08002a20 <stdio_exit_handler>:
 8002a20:	4a02      	ldr	r2, [pc, #8]	@ (8002a2c <stdio_exit_handler+0xc>)
 8002a22:	4903      	ldr	r1, [pc, #12]	@ (8002a30 <stdio_exit_handler+0x10>)
 8002a24:	4803      	ldr	r0, [pc, #12]	@ (8002a34 <stdio_exit_handler+0x14>)
 8002a26:	f000 b869 	b.w	8002afc <_fwalk_sglue>
 8002a2a:	bf00      	nop
 8002a2c:	20000024 	.word	0x20000024
 8002a30:	08003759 	.word	0x08003759
 8002a34:	20000034 	.word	0x20000034

08002a38 <cleanup_stdio>:
 8002a38:	6841      	ldr	r1, [r0, #4]
 8002a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <cleanup_stdio+0x34>)
 8002a3c:	4299      	cmp	r1, r3
 8002a3e:	b510      	push	{r4, lr}
 8002a40:	4604      	mov	r4, r0
 8002a42:	d001      	beq.n	8002a48 <cleanup_stdio+0x10>
 8002a44:	f000 fe88 	bl	8003758 <_fflush_r>
 8002a48:	68a1      	ldr	r1, [r4, #8]
 8002a4a:	4b09      	ldr	r3, [pc, #36]	@ (8002a70 <cleanup_stdio+0x38>)
 8002a4c:	4299      	cmp	r1, r3
 8002a4e:	d002      	beq.n	8002a56 <cleanup_stdio+0x1e>
 8002a50:	4620      	mov	r0, r4
 8002a52:	f000 fe81 	bl	8003758 <_fflush_r>
 8002a56:	68e1      	ldr	r1, [r4, #12]
 8002a58:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <cleanup_stdio+0x3c>)
 8002a5a:	4299      	cmp	r1, r3
 8002a5c:	d004      	beq.n	8002a68 <cleanup_stdio+0x30>
 8002a5e:	4620      	mov	r0, r4
 8002a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a64:	f000 be78 	b.w	8003758 <_fflush_r>
 8002a68:	bd10      	pop	{r4, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200000fc 	.word	0x200000fc
 8002a70:	20000164 	.word	0x20000164
 8002a74:	200001cc 	.word	0x200001cc

08002a78 <global_stdio_init.part.0>:
 8002a78:	b510      	push	{r4, lr}
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <global_stdio_init.part.0+0x30>)
 8002a7c:	4c0b      	ldr	r4, [pc, #44]	@ (8002aac <global_stdio_init.part.0+0x34>)
 8002a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab0 <global_stdio_init.part.0+0x38>)
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	4620      	mov	r0, r4
 8002a84:	2200      	movs	r2, #0
 8002a86:	2104      	movs	r1, #4
 8002a88:	f7ff ff94 	bl	80029b4 <std>
 8002a8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002a90:	2201      	movs	r2, #1
 8002a92:	2109      	movs	r1, #9
 8002a94:	f7ff ff8e 	bl	80029b4 <std>
 8002a98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002aa2:	2112      	movs	r1, #18
 8002aa4:	f7ff bf86 	b.w	80029b4 <std>
 8002aa8:	20000234 	.word	0x20000234
 8002aac:	200000fc 	.word	0x200000fc
 8002ab0:	08002a21 	.word	0x08002a21

08002ab4 <__sfp_lock_acquire>:
 8002ab4:	4801      	ldr	r0, [pc, #4]	@ (8002abc <__sfp_lock_acquire+0x8>)
 8002ab6:	f000 ba00 	b.w	8002eba <__retarget_lock_acquire_recursive>
 8002aba:	bf00      	nop
 8002abc:	2000023d 	.word	0x2000023d

08002ac0 <__sfp_lock_release>:
 8002ac0:	4801      	ldr	r0, [pc, #4]	@ (8002ac8 <__sfp_lock_release+0x8>)
 8002ac2:	f000 b9fb 	b.w	8002ebc <__retarget_lock_release_recursive>
 8002ac6:	bf00      	nop
 8002ac8:	2000023d 	.word	0x2000023d

08002acc <__sinit>:
 8002acc:	b510      	push	{r4, lr}
 8002ace:	4604      	mov	r4, r0
 8002ad0:	f7ff fff0 	bl	8002ab4 <__sfp_lock_acquire>
 8002ad4:	6a23      	ldr	r3, [r4, #32]
 8002ad6:	b11b      	cbz	r3, 8002ae0 <__sinit+0x14>
 8002ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002adc:	f7ff bff0 	b.w	8002ac0 <__sfp_lock_release>
 8002ae0:	4b04      	ldr	r3, [pc, #16]	@ (8002af4 <__sinit+0x28>)
 8002ae2:	6223      	str	r3, [r4, #32]
 8002ae4:	4b04      	ldr	r3, [pc, #16]	@ (8002af8 <__sinit+0x2c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f5      	bne.n	8002ad8 <__sinit+0xc>
 8002aec:	f7ff ffc4 	bl	8002a78 <global_stdio_init.part.0>
 8002af0:	e7f2      	b.n	8002ad8 <__sinit+0xc>
 8002af2:	bf00      	nop
 8002af4:	08002a39 	.word	0x08002a39
 8002af8:	20000234 	.word	0x20000234

08002afc <_fwalk_sglue>:
 8002afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b00:	4607      	mov	r7, r0
 8002b02:	4688      	mov	r8, r1
 8002b04:	4614      	mov	r4, r2
 8002b06:	2600      	movs	r6, #0
 8002b08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b0c:	f1b9 0901 	subs.w	r9, r9, #1
 8002b10:	d505      	bpl.n	8002b1e <_fwalk_sglue+0x22>
 8002b12:	6824      	ldr	r4, [r4, #0]
 8002b14:	2c00      	cmp	r4, #0
 8002b16:	d1f7      	bne.n	8002b08 <_fwalk_sglue+0xc>
 8002b18:	4630      	mov	r0, r6
 8002b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b1e:	89ab      	ldrh	r3, [r5, #12]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d907      	bls.n	8002b34 <_fwalk_sglue+0x38>
 8002b24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	d003      	beq.n	8002b34 <_fwalk_sglue+0x38>
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	4638      	mov	r0, r7
 8002b30:	47c0      	blx	r8
 8002b32:	4306      	orrs	r6, r0
 8002b34:	3568      	adds	r5, #104	@ 0x68
 8002b36:	e7e9      	b.n	8002b0c <_fwalk_sglue+0x10>

08002b38 <iprintf>:
 8002b38:	b40f      	push	{r0, r1, r2, r3}
 8002b3a:	b507      	push	{r0, r1, r2, lr}
 8002b3c:	4906      	ldr	r1, [pc, #24]	@ (8002b58 <iprintf+0x20>)
 8002b3e:	ab04      	add	r3, sp, #16
 8002b40:	6808      	ldr	r0, [r1, #0]
 8002b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b46:	6881      	ldr	r1, [r0, #8]
 8002b48:	9301      	str	r3, [sp, #4]
 8002b4a:	f000 fadb 	bl	8003104 <_vfiprintf_r>
 8002b4e:	b003      	add	sp, #12
 8002b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b54:	b004      	add	sp, #16
 8002b56:	4770      	bx	lr
 8002b58:	20000030 	.word	0x20000030

08002b5c <_puts_r>:
 8002b5c:	6a03      	ldr	r3, [r0, #32]
 8002b5e:	b570      	push	{r4, r5, r6, lr}
 8002b60:	6884      	ldr	r4, [r0, #8]
 8002b62:	4605      	mov	r5, r0
 8002b64:	460e      	mov	r6, r1
 8002b66:	b90b      	cbnz	r3, 8002b6c <_puts_r+0x10>
 8002b68:	f7ff ffb0 	bl	8002acc <__sinit>
 8002b6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b6e:	07db      	lsls	r3, r3, #31
 8002b70:	d405      	bmi.n	8002b7e <_puts_r+0x22>
 8002b72:	89a3      	ldrh	r3, [r4, #12]
 8002b74:	0598      	lsls	r0, r3, #22
 8002b76:	d402      	bmi.n	8002b7e <_puts_r+0x22>
 8002b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b7a:	f000 f99e 	bl	8002eba <__retarget_lock_acquire_recursive>
 8002b7e:	89a3      	ldrh	r3, [r4, #12]
 8002b80:	0719      	lsls	r1, r3, #28
 8002b82:	d502      	bpl.n	8002b8a <_puts_r+0x2e>
 8002b84:	6923      	ldr	r3, [r4, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d135      	bne.n	8002bf6 <_puts_r+0x9a>
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	f000 f8c5 	bl	8002d1c <__swsetup_r>
 8002b92:	b380      	cbz	r0, 8002bf6 <_puts_r+0x9a>
 8002b94:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002b98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b9a:	07da      	lsls	r2, r3, #31
 8002b9c:	d405      	bmi.n	8002baa <_puts_r+0x4e>
 8002b9e:	89a3      	ldrh	r3, [r4, #12]
 8002ba0:	059b      	lsls	r3, r3, #22
 8002ba2:	d402      	bmi.n	8002baa <_puts_r+0x4e>
 8002ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ba6:	f000 f989 	bl	8002ebc <__retarget_lock_release_recursive>
 8002baa:	4628      	mov	r0, r5
 8002bac:	bd70      	pop	{r4, r5, r6, pc}
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	da04      	bge.n	8002bbc <_puts_r+0x60>
 8002bb2:	69a2      	ldr	r2, [r4, #24]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	dc17      	bgt.n	8002be8 <_puts_r+0x8c>
 8002bb8:	290a      	cmp	r1, #10
 8002bba:	d015      	beq.n	8002be8 <_puts_r+0x8c>
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	6022      	str	r2, [r4, #0]
 8002bc2:	7019      	strb	r1, [r3, #0]
 8002bc4:	68a3      	ldr	r3, [r4, #8]
 8002bc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	60a3      	str	r3, [r4, #8]
 8002bce:	2900      	cmp	r1, #0
 8002bd0:	d1ed      	bne.n	8002bae <_puts_r+0x52>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	da11      	bge.n	8002bfa <_puts_r+0x9e>
 8002bd6:	4622      	mov	r2, r4
 8002bd8:	210a      	movs	r1, #10
 8002bda:	4628      	mov	r0, r5
 8002bdc:	f000 f85f 	bl	8002c9e <__swbuf_r>
 8002be0:	3001      	adds	r0, #1
 8002be2:	d0d7      	beq.n	8002b94 <_puts_r+0x38>
 8002be4:	250a      	movs	r5, #10
 8002be6:	e7d7      	b.n	8002b98 <_puts_r+0x3c>
 8002be8:	4622      	mov	r2, r4
 8002bea:	4628      	mov	r0, r5
 8002bec:	f000 f857 	bl	8002c9e <__swbuf_r>
 8002bf0:	3001      	adds	r0, #1
 8002bf2:	d1e7      	bne.n	8002bc4 <_puts_r+0x68>
 8002bf4:	e7ce      	b.n	8002b94 <_puts_r+0x38>
 8002bf6:	3e01      	subs	r6, #1
 8002bf8:	e7e4      	b.n	8002bc4 <_puts_r+0x68>
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	6022      	str	r2, [r4, #0]
 8002c00:	220a      	movs	r2, #10
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e7ee      	b.n	8002be4 <_puts_r+0x88>
	...

08002c08 <puts>:
 8002c08:	4b02      	ldr	r3, [pc, #8]	@ (8002c14 <puts+0xc>)
 8002c0a:	4601      	mov	r1, r0
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	f7ff bfa5 	b.w	8002b5c <_puts_r>
 8002c12:	bf00      	nop
 8002c14:	20000030 	.word	0x20000030

08002c18 <__sread>:
 8002c18:	b510      	push	{r4, lr}
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c20:	f000 f8fc 	bl	8002e1c <_read_r>
 8002c24:	2800      	cmp	r0, #0
 8002c26:	bfab      	itete	ge
 8002c28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002c2a:	89a3      	ldrhlt	r3, [r4, #12]
 8002c2c:	181b      	addge	r3, r3, r0
 8002c2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002c32:	bfac      	ite	ge
 8002c34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002c36:	81a3      	strhlt	r3, [r4, #12]
 8002c38:	bd10      	pop	{r4, pc}

08002c3a <__swrite>:
 8002c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c3e:	461f      	mov	r7, r3
 8002c40:	898b      	ldrh	r3, [r1, #12]
 8002c42:	05db      	lsls	r3, r3, #23
 8002c44:	4605      	mov	r5, r0
 8002c46:	460c      	mov	r4, r1
 8002c48:	4616      	mov	r6, r2
 8002c4a:	d505      	bpl.n	8002c58 <__swrite+0x1e>
 8002c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c50:	2302      	movs	r3, #2
 8002c52:	2200      	movs	r2, #0
 8002c54:	f000 f8d0 	bl	8002df8 <_lseek_r>
 8002c58:	89a3      	ldrh	r3, [r4, #12]
 8002c5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c62:	81a3      	strh	r3, [r4, #12]
 8002c64:	4632      	mov	r2, r6
 8002c66:	463b      	mov	r3, r7
 8002c68:	4628      	mov	r0, r5
 8002c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c6e:	f000 b8e7 	b.w	8002e40 <_write_r>

08002c72 <__sseek>:
 8002c72:	b510      	push	{r4, lr}
 8002c74:	460c      	mov	r4, r1
 8002c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c7a:	f000 f8bd 	bl	8002df8 <_lseek_r>
 8002c7e:	1c43      	adds	r3, r0, #1
 8002c80:	89a3      	ldrh	r3, [r4, #12]
 8002c82:	bf15      	itete	ne
 8002c84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002c86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002c8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002c8e:	81a3      	strheq	r3, [r4, #12]
 8002c90:	bf18      	it	ne
 8002c92:	81a3      	strhne	r3, [r4, #12]
 8002c94:	bd10      	pop	{r4, pc}

08002c96 <__sclose>:
 8002c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c9a:	f000 b89d 	b.w	8002dd8 <_close_r>

08002c9e <__swbuf_r>:
 8002c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca0:	460e      	mov	r6, r1
 8002ca2:	4614      	mov	r4, r2
 8002ca4:	4605      	mov	r5, r0
 8002ca6:	b118      	cbz	r0, 8002cb0 <__swbuf_r+0x12>
 8002ca8:	6a03      	ldr	r3, [r0, #32]
 8002caa:	b90b      	cbnz	r3, 8002cb0 <__swbuf_r+0x12>
 8002cac:	f7ff ff0e 	bl	8002acc <__sinit>
 8002cb0:	69a3      	ldr	r3, [r4, #24]
 8002cb2:	60a3      	str	r3, [r4, #8]
 8002cb4:	89a3      	ldrh	r3, [r4, #12]
 8002cb6:	071a      	lsls	r2, r3, #28
 8002cb8:	d501      	bpl.n	8002cbe <__swbuf_r+0x20>
 8002cba:	6923      	ldr	r3, [r4, #16]
 8002cbc:	b943      	cbnz	r3, 8002cd0 <__swbuf_r+0x32>
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	f000 f82b 	bl	8002d1c <__swsetup_r>
 8002cc6:	b118      	cbz	r0, 8002cd0 <__swbuf_r+0x32>
 8002cc8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002ccc:	4638      	mov	r0, r7
 8002cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	6922      	ldr	r2, [r4, #16]
 8002cd4:	1a98      	subs	r0, r3, r2
 8002cd6:	6963      	ldr	r3, [r4, #20]
 8002cd8:	b2f6      	uxtb	r6, r6
 8002cda:	4283      	cmp	r3, r0
 8002cdc:	4637      	mov	r7, r6
 8002cde:	dc05      	bgt.n	8002cec <__swbuf_r+0x4e>
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	4628      	mov	r0, r5
 8002ce4:	f000 fd38 	bl	8003758 <_fflush_r>
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	d1ed      	bne.n	8002cc8 <__swbuf_r+0x2a>
 8002cec:	68a3      	ldr	r3, [r4, #8]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	60a3      	str	r3, [r4, #8]
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	6022      	str	r2, [r4, #0]
 8002cf8:	701e      	strb	r6, [r3, #0]
 8002cfa:	6962      	ldr	r2, [r4, #20]
 8002cfc:	1c43      	adds	r3, r0, #1
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d004      	beq.n	8002d0c <__swbuf_r+0x6e>
 8002d02:	89a3      	ldrh	r3, [r4, #12]
 8002d04:	07db      	lsls	r3, r3, #31
 8002d06:	d5e1      	bpl.n	8002ccc <__swbuf_r+0x2e>
 8002d08:	2e0a      	cmp	r6, #10
 8002d0a:	d1df      	bne.n	8002ccc <__swbuf_r+0x2e>
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	4628      	mov	r0, r5
 8002d10:	f000 fd22 	bl	8003758 <_fflush_r>
 8002d14:	2800      	cmp	r0, #0
 8002d16:	d0d9      	beq.n	8002ccc <__swbuf_r+0x2e>
 8002d18:	e7d6      	b.n	8002cc8 <__swbuf_r+0x2a>
	...

08002d1c <__swsetup_r>:
 8002d1c:	b538      	push	{r3, r4, r5, lr}
 8002d1e:	4b29      	ldr	r3, [pc, #164]	@ (8002dc4 <__swsetup_r+0xa8>)
 8002d20:	4605      	mov	r5, r0
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	460c      	mov	r4, r1
 8002d26:	b118      	cbz	r0, 8002d30 <__swsetup_r+0x14>
 8002d28:	6a03      	ldr	r3, [r0, #32]
 8002d2a:	b90b      	cbnz	r3, 8002d30 <__swsetup_r+0x14>
 8002d2c:	f7ff fece 	bl	8002acc <__sinit>
 8002d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d34:	0719      	lsls	r1, r3, #28
 8002d36:	d422      	bmi.n	8002d7e <__swsetup_r+0x62>
 8002d38:	06da      	lsls	r2, r3, #27
 8002d3a:	d407      	bmi.n	8002d4c <__swsetup_r+0x30>
 8002d3c:	2209      	movs	r2, #9
 8002d3e:	602a      	str	r2, [r5, #0]
 8002d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d44:	81a3      	strh	r3, [r4, #12]
 8002d46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d4a:	e033      	b.n	8002db4 <__swsetup_r+0x98>
 8002d4c:	0758      	lsls	r0, r3, #29
 8002d4e:	d512      	bpl.n	8002d76 <__swsetup_r+0x5a>
 8002d50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d52:	b141      	cbz	r1, 8002d66 <__swsetup_r+0x4a>
 8002d54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d58:	4299      	cmp	r1, r3
 8002d5a:	d002      	beq.n	8002d62 <__swsetup_r+0x46>
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	f000 f8af 	bl	8002ec0 <_free_r>
 8002d62:	2300      	movs	r3, #0
 8002d64:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d66:	89a3      	ldrh	r3, [r4, #12]
 8002d68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002d6c:	81a3      	strh	r3, [r4, #12]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	6063      	str	r3, [r4, #4]
 8002d72:	6923      	ldr	r3, [r4, #16]
 8002d74:	6023      	str	r3, [r4, #0]
 8002d76:	89a3      	ldrh	r3, [r4, #12]
 8002d78:	f043 0308 	orr.w	r3, r3, #8
 8002d7c:	81a3      	strh	r3, [r4, #12]
 8002d7e:	6923      	ldr	r3, [r4, #16]
 8002d80:	b94b      	cbnz	r3, 8002d96 <__swsetup_r+0x7a>
 8002d82:	89a3      	ldrh	r3, [r4, #12]
 8002d84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d8c:	d003      	beq.n	8002d96 <__swsetup_r+0x7a>
 8002d8e:	4621      	mov	r1, r4
 8002d90:	4628      	mov	r0, r5
 8002d92:	f000 fd2f 	bl	80037f4 <__smakebuf_r>
 8002d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d9a:	f013 0201 	ands.w	r2, r3, #1
 8002d9e:	d00a      	beq.n	8002db6 <__swsetup_r+0x9a>
 8002da0:	2200      	movs	r2, #0
 8002da2:	60a2      	str	r2, [r4, #8]
 8002da4:	6962      	ldr	r2, [r4, #20]
 8002da6:	4252      	negs	r2, r2
 8002da8:	61a2      	str	r2, [r4, #24]
 8002daa:	6922      	ldr	r2, [r4, #16]
 8002dac:	b942      	cbnz	r2, 8002dc0 <__swsetup_r+0xa4>
 8002dae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002db2:	d1c5      	bne.n	8002d40 <__swsetup_r+0x24>
 8002db4:	bd38      	pop	{r3, r4, r5, pc}
 8002db6:	0799      	lsls	r1, r3, #30
 8002db8:	bf58      	it	pl
 8002dba:	6962      	ldrpl	r2, [r4, #20]
 8002dbc:	60a2      	str	r2, [r4, #8]
 8002dbe:	e7f4      	b.n	8002daa <__swsetup_r+0x8e>
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	e7f7      	b.n	8002db4 <__swsetup_r+0x98>
 8002dc4:	20000030 	.word	0x20000030

08002dc8 <memset>:
 8002dc8:	4402      	add	r2, r0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d100      	bne.n	8002dd2 <memset+0xa>
 8002dd0:	4770      	bx	lr
 8002dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002dd6:	e7f9      	b.n	8002dcc <memset+0x4>

08002dd8 <_close_r>:
 8002dd8:	b538      	push	{r3, r4, r5, lr}
 8002dda:	4d06      	ldr	r5, [pc, #24]	@ (8002df4 <_close_r+0x1c>)
 8002ddc:	2300      	movs	r3, #0
 8002dde:	4604      	mov	r4, r0
 8002de0:	4608      	mov	r0, r1
 8002de2:	602b      	str	r3, [r5, #0]
 8002de4:	f7fd ffd6 	bl	8000d94 <_close>
 8002de8:	1c43      	adds	r3, r0, #1
 8002dea:	d102      	bne.n	8002df2 <_close_r+0x1a>
 8002dec:	682b      	ldr	r3, [r5, #0]
 8002dee:	b103      	cbz	r3, 8002df2 <_close_r+0x1a>
 8002df0:	6023      	str	r3, [r4, #0]
 8002df2:	bd38      	pop	{r3, r4, r5, pc}
 8002df4:	20000238 	.word	0x20000238

08002df8 <_lseek_r>:
 8002df8:	b538      	push	{r3, r4, r5, lr}
 8002dfa:	4d07      	ldr	r5, [pc, #28]	@ (8002e18 <_lseek_r+0x20>)
 8002dfc:	4604      	mov	r4, r0
 8002dfe:	4608      	mov	r0, r1
 8002e00:	4611      	mov	r1, r2
 8002e02:	2200      	movs	r2, #0
 8002e04:	602a      	str	r2, [r5, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	f7fd ffeb 	bl	8000de2 <_lseek>
 8002e0c:	1c43      	adds	r3, r0, #1
 8002e0e:	d102      	bne.n	8002e16 <_lseek_r+0x1e>
 8002e10:	682b      	ldr	r3, [r5, #0]
 8002e12:	b103      	cbz	r3, 8002e16 <_lseek_r+0x1e>
 8002e14:	6023      	str	r3, [r4, #0]
 8002e16:	bd38      	pop	{r3, r4, r5, pc}
 8002e18:	20000238 	.word	0x20000238

08002e1c <_read_r>:
 8002e1c:	b538      	push	{r3, r4, r5, lr}
 8002e1e:	4d07      	ldr	r5, [pc, #28]	@ (8002e3c <_read_r+0x20>)
 8002e20:	4604      	mov	r4, r0
 8002e22:	4608      	mov	r0, r1
 8002e24:	4611      	mov	r1, r2
 8002e26:	2200      	movs	r2, #0
 8002e28:	602a      	str	r2, [r5, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f7fd ff79 	bl	8000d22 <_read>
 8002e30:	1c43      	adds	r3, r0, #1
 8002e32:	d102      	bne.n	8002e3a <_read_r+0x1e>
 8002e34:	682b      	ldr	r3, [r5, #0]
 8002e36:	b103      	cbz	r3, 8002e3a <_read_r+0x1e>
 8002e38:	6023      	str	r3, [r4, #0]
 8002e3a:	bd38      	pop	{r3, r4, r5, pc}
 8002e3c:	20000238 	.word	0x20000238

08002e40 <_write_r>:
 8002e40:	b538      	push	{r3, r4, r5, lr}
 8002e42:	4d07      	ldr	r5, [pc, #28]	@ (8002e60 <_write_r+0x20>)
 8002e44:	4604      	mov	r4, r0
 8002e46:	4608      	mov	r0, r1
 8002e48:	4611      	mov	r1, r2
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	602a      	str	r2, [r5, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f7fd ff84 	bl	8000d5c <_write>
 8002e54:	1c43      	adds	r3, r0, #1
 8002e56:	d102      	bne.n	8002e5e <_write_r+0x1e>
 8002e58:	682b      	ldr	r3, [r5, #0]
 8002e5a:	b103      	cbz	r3, 8002e5e <_write_r+0x1e>
 8002e5c:	6023      	str	r3, [r4, #0]
 8002e5e:	bd38      	pop	{r3, r4, r5, pc}
 8002e60:	20000238 	.word	0x20000238

08002e64 <__errno>:
 8002e64:	4b01      	ldr	r3, [pc, #4]	@ (8002e6c <__errno+0x8>)
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20000030 	.word	0x20000030

08002e70 <__libc_init_array>:
 8002e70:	b570      	push	{r4, r5, r6, lr}
 8002e72:	4d0d      	ldr	r5, [pc, #52]	@ (8002ea8 <__libc_init_array+0x38>)
 8002e74:	4c0d      	ldr	r4, [pc, #52]	@ (8002eac <__libc_init_array+0x3c>)
 8002e76:	1b64      	subs	r4, r4, r5
 8002e78:	10a4      	asrs	r4, r4, #2
 8002e7a:	2600      	movs	r6, #0
 8002e7c:	42a6      	cmp	r6, r4
 8002e7e:	d109      	bne.n	8002e94 <__libc_init_array+0x24>
 8002e80:	4d0b      	ldr	r5, [pc, #44]	@ (8002eb0 <__libc_init_array+0x40>)
 8002e82:	4c0c      	ldr	r4, [pc, #48]	@ (8002eb4 <__libc_init_array+0x44>)
 8002e84:	f000 fd24 	bl	80038d0 <_init>
 8002e88:	1b64      	subs	r4, r4, r5
 8002e8a:	10a4      	asrs	r4, r4, #2
 8002e8c:	2600      	movs	r6, #0
 8002e8e:	42a6      	cmp	r6, r4
 8002e90:	d105      	bne.n	8002e9e <__libc_init_array+0x2e>
 8002e92:	bd70      	pop	{r4, r5, r6, pc}
 8002e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e98:	4798      	blx	r3
 8002e9a:	3601      	adds	r6, #1
 8002e9c:	e7ee      	b.n	8002e7c <__libc_init_array+0xc>
 8002e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea2:	4798      	blx	r3
 8002ea4:	3601      	adds	r6, #1
 8002ea6:	e7f2      	b.n	8002e8e <__libc_init_array+0x1e>
 8002ea8:	08003a2c 	.word	0x08003a2c
 8002eac:	08003a2c 	.word	0x08003a2c
 8002eb0:	08003a2c 	.word	0x08003a2c
 8002eb4:	08003a30 	.word	0x08003a30

08002eb8 <__retarget_lock_init_recursive>:
 8002eb8:	4770      	bx	lr

08002eba <__retarget_lock_acquire_recursive>:
 8002eba:	4770      	bx	lr

08002ebc <__retarget_lock_release_recursive>:
 8002ebc:	4770      	bx	lr
	...

08002ec0 <_free_r>:
 8002ec0:	b538      	push	{r3, r4, r5, lr}
 8002ec2:	4605      	mov	r5, r0
 8002ec4:	2900      	cmp	r1, #0
 8002ec6:	d041      	beq.n	8002f4c <_free_r+0x8c>
 8002ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ecc:	1f0c      	subs	r4, r1, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bfb8      	it	lt
 8002ed2:	18e4      	addlt	r4, r4, r3
 8002ed4:	f000 f8e0 	bl	8003098 <__malloc_lock>
 8002ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f50 <_free_r+0x90>)
 8002eda:	6813      	ldr	r3, [r2, #0]
 8002edc:	b933      	cbnz	r3, 8002eec <_free_r+0x2c>
 8002ede:	6063      	str	r3, [r4, #4]
 8002ee0:	6014      	str	r4, [r2, #0]
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ee8:	f000 b8dc 	b.w	80030a4 <__malloc_unlock>
 8002eec:	42a3      	cmp	r3, r4
 8002eee:	d908      	bls.n	8002f02 <_free_r+0x42>
 8002ef0:	6820      	ldr	r0, [r4, #0]
 8002ef2:	1821      	adds	r1, r4, r0
 8002ef4:	428b      	cmp	r3, r1
 8002ef6:	bf01      	itttt	eq
 8002ef8:	6819      	ldreq	r1, [r3, #0]
 8002efa:	685b      	ldreq	r3, [r3, #4]
 8002efc:	1809      	addeq	r1, r1, r0
 8002efe:	6021      	streq	r1, [r4, #0]
 8002f00:	e7ed      	b.n	8002ede <_free_r+0x1e>
 8002f02:	461a      	mov	r2, r3
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	b10b      	cbz	r3, 8002f0c <_free_r+0x4c>
 8002f08:	42a3      	cmp	r3, r4
 8002f0a:	d9fa      	bls.n	8002f02 <_free_r+0x42>
 8002f0c:	6811      	ldr	r1, [r2, #0]
 8002f0e:	1850      	adds	r0, r2, r1
 8002f10:	42a0      	cmp	r0, r4
 8002f12:	d10b      	bne.n	8002f2c <_free_r+0x6c>
 8002f14:	6820      	ldr	r0, [r4, #0]
 8002f16:	4401      	add	r1, r0
 8002f18:	1850      	adds	r0, r2, r1
 8002f1a:	4283      	cmp	r3, r0
 8002f1c:	6011      	str	r1, [r2, #0]
 8002f1e:	d1e0      	bne.n	8002ee2 <_free_r+0x22>
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	6053      	str	r3, [r2, #4]
 8002f26:	4408      	add	r0, r1
 8002f28:	6010      	str	r0, [r2, #0]
 8002f2a:	e7da      	b.n	8002ee2 <_free_r+0x22>
 8002f2c:	d902      	bls.n	8002f34 <_free_r+0x74>
 8002f2e:	230c      	movs	r3, #12
 8002f30:	602b      	str	r3, [r5, #0]
 8002f32:	e7d6      	b.n	8002ee2 <_free_r+0x22>
 8002f34:	6820      	ldr	r0, [r4, #0]
 8002f36:	1821      	adds	r1, r4, r0
 8002f38:	428b      	cmp	r3, r1
 8002f3a:	bf04      	itt	eq
 8002f3c:	6819      	ldreq	r1, [r3, #0]
 8002f3e:	685b      	ldreq	r3, [r3, #4]
 8002f40:	6063      	str	r3, [r4, #4]
 8002f42:	bf04      	itt	eq
 8002f44:	1809      	addeq	r1, r1, r0
 8002f46:	6021      	streq	r1, [r4, #0]
 8002f48:	6054      	str	r4, [r2, #4]
 8002f4a:	e7ca      	b.n	8002ee2 <_free_r+0x22>
 8002f4c:	bd38      	pop	{r3, r4, r5, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000244 	.word	0x20000244

08002f54 <sbrk_aligned>:
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	4e0f      	ldr	r6, [pc, #60]	@ (8002f94 <sbrk_aligned+0x40>)
 8002f58:	460c      	mov	r4, r1
 8002f5a:	6831      	ldr	r1, [r6, #0]
 8002f5c:	4605      	mov	r5, r0
 8002f5e:	b911      	cbnz	r1, 8002f66 <sbrk_aligned+0x12>
 8002f60:	f000 fca6 	bl	80038b0 <_sbrk_r>
 8002f64:	6030      	str	r0, [r6, #0]
 8002f66:	4621      	mov	r1, r4
 8002f68:	4628      	mov	r0, r5
 8002f6a:	f000 fca1 	bl	80038b0 <_sbrk_r>
 8002f6e:	1c43      	adds	r3, r0, #1
 8002f70:	d103      	bne.n	8002f7a <sbrk_aligned+0x26>
 8002f72:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002f76:	4620      	mov	r0, r4
 8002f78:	bd70      	pop	{r4, r5, r6, pc}
 8002f7a:	1cc4      	adds	r4, r0, #3
 8002f7c:	f024 0403 	bic.w	r4, r4, #3
 8002f80:	42a0      	cmp	r0, r4
 8002f82:	d0f8      	beq.n	8002f76 <sbrk_aligned+0x22>
 8002f84:	1a21      	subs	r1, r4, r0
 8002f86:	4628      	mov	r0, r5
 8002f88:	f000 fc92 	bl	80038b0 <_sbrk_r>
 8002f8c:	3001      	adds	r0, #1
 8002f8e:	d1f2      	bne.n	8002f76 <sbrk_aligned+0x22>
 8002f90:	e7ef      	b.n	8002f72 <sbrk_aligned+0x1e>
 8002f92:	bf00      	nop
 8002f94:	20000240 	.word	0x20000240

08002f98 <_malloc_r>:
 8002f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f9c:	1ccd      	adds	r5, r1, #3
 8002f9e:	f025 0503 	bic.w	r5, r5, #3
 8002fa2:	3508      	adds	r5, #8
 8002fa4:	2d0c      	cmp	r5, #12
 8002fa6:	bf38      	it	cc
 8002fa8:	250c      	movcc	r5, #12
 8002faa:	2d00      	cmp	r5, #0
 8002fac:	4606      	mov	r6, r0
 8002fae:	db01      	blt.n	8002fb4 <_malloc_r+0x1c>
 8002fb0:	42a9      	cmp	r1, r5
 8002fb2:	d904      	bls.n	8002fbe <_malloc_r+0x26>
 8002fb4:	230c      	movs	r3, #12
 8002fb6:	6033      	str	r3, [r6, #0]
 8002fb8:	2000      	movs	r0, #0
 8002fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003094 <_malloc_r+0xfc>
 8002fc2:	f000 f869 	bl	8003098 <__malloc_lock>
 8002fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8002fca:	461c      	mov	r4, r3
 8002fcc:	bb44      	cbnz	r4, 8003020 <_malloc_r+0x88>
 8002fce:	4629      	mov	r1, r5
 8002fd0:	4630      	mov	r0, r6
 8002fd2:	f7ff ffbf 	bl	8002f54 <sbrk_aligned>
 8002fd6:	1c43      	adds	r3, r0, #1
 8002fd8:	4604      	mov	r4, r0
 8002fda:	d158      	bne.n	800308e <_malloc_r+0xf6>
 8002fdc:	f8d8 4000 	ldr.w	r4, [r8]
 8002fe0:	4627      	mov	r7, r4
 8002fe2:	2f00      	cmp	r7, #0
 8002fe4:	d143      	bne.n	800306e <_malloc_r+0xd6>
 8002fe6:	2c00      	cmp	r4, #0
 8002fe8:	d04b      	beq.n	8003082 <_malloc_r+0xea>
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	4639      	mov	r1, r7
 8002fee:	4630      	mov	r0, r6
 8002ff0:	eb04 0903 	add.w	r9, r4, r3
 8002ff4:	f000 fc5c 	bl	80038b0 <_sbrk_r>
 8002ff8:	4581      	cmp	r9, r0
 8002ffa:	d142      	bne.n	8003082 <_malloc_r+0xea>
 8002ffc:	6821      	ldr	r1, [r4, #0]
 8002ffe:	1a6d      	subs	r5, r5, r1
 8003000:	4629      	mov	r1, r5
 8003002:	4630      	mov	r0, r6
 8003004:	f7ff ffa6 	bl	8002f54 <sbrk_aligned>
 8003008:	3001      	adds	r0, #1
 800300a:	d03a      	beq.n	8003082 <_malloc_r+0xea>
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	442b      	add	r3, r5
 8003010:	6023      	str	r3, [r4, #0]
 8003012:	f8d8 3000 	ldr.w	r3, [r8]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	bb62      	cbnz	r2, 8003074 <_malloc_r+0xdc>
 800301a:	f8c8 7000 	str.w	r7, [r8]
 800301e:	e00f      	b.n	8003040 <_malloc_r+0xa8>
 8003020:	6822      	ldr	r2, [r4, #0]
 8003022:	1b52      	subs	r2, r2, r5
 8003024:	d420      	bmi.n	8003068 <_malloc_r+0xd0>
 8003026:	2a0b      	cmp	r2, #11
 8003028:	d917      	bls.n	800305a <_malloc_r+0xc2>
 800302a:	1961      	adds	r1, r4, r5
 800302c:	42a3      	cmp	r3, r4
 800302e:	6025      	str	r5, [r4, #0]
 8003030:	bf18      	it	ne
 8003032:	6059      	strne	r1, [r3, #4]
 8003034:	6863      	ldr	r3, [r4, #4]
 8003036:	bf08      	it	eq
 8003038:	f8c8 1000 	streq.w	r1, [r8]
 800303c:	5162      	str	r2, [r4, r5]
 800303e:	604b      	str	r3, [r1, #4]
 8003040:	4630      	mov	r0, r6
 8003042:	f000 f82f 	bl	80030a4 <__malloc_unlock>
 8003046:	f104 000b 	add.w	r0, r4, #11
 800304a:	1d23      	adds	r3, r4, #4
 800304c:	f020 0007 	bic.w	r0, r0, #7
 8003050:	1ac2      	subs	r2, r0, r3
 8003052:	bf1c      	itt	ne
 8003054:	1a1b      	subne	r3, r3, r0
 8003056:	50a3      	strne	r3, [r4, r2]
 8003058:	e7af      	b.n	8002fba <_malloc_r+0x22>
 800305a:	6862      	ldr	r2, [r4, #4]
 800305c:	42a3      	cmp	r3, r4
 800305e:	bf0c      	ite	eq
 8003060:	f8c8 2000 	streq.w	r2, [r8]
 8003064:	605a      	strne	r2, [r3, #4]
 8003066:	e7eb      	b.n	8003040 <_malloc_r+0xa8>
 8003068:	4623      	mov	r3, r4
 800306a:	6864      	ldr	r4, [r4, #4]
 800306c:	e7ae      	b.n	8002fcc <_malloc_r+0x34>
 800306e:	463c      	mov	r4, r7
 8003070:	687f      	ldr	r7, [r7, #4]
 8003072:	e7b6      	b.n	8002fe2 <_malloc_r+0x4a>
 8003074:	461a      	mov	r2, r3
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	42a3      	cmp	r3, r4
 800307a:	d1fb      	bne.n	8003074 <_malloc_r+0xdc>
 800307c:	2300      	movs	r3, #0
 800307e:	6053      	str	r3, [r2, #4]
 8003080:	e7de      	b.n	8003040 <_malloc_r+0xa8>
 8003082:	230c      	movs	r3, #12
 8003084:	6033      	str	r3, [r6, #0]
 8003086:	4630      	mov	r0, r6
 8003088:	f000 f80c 	bl	80030a4 <__malloc_unlock>
 800308c:	e794      	b.n	8002fb8 <_malloc_r+0x20>
 800308e:	6005      	str	r5, [r0, #0]
 8003090:	e7d6      	b.n	8003040 <_malloc_r+0xa8>
 8003092:	bf00      	nop
 8003094:	20000244 	.word	0x20000244

08003098 <__malloc_lock>:
 8003098:	4801      	ldr	r0, [pc, #4]	@ (80030a0 <__malloc_lock+0x8>)
 800309a:	f7ff bf0e 	b.w	8002eba <__retarget_lock_acquire_recursive>
 800309e:	bf00      	nop
 80030a0:	2000023c 	.word	0x2000023c

080030a4 <__malloc_unlock>:
 80030a4:	4801      	ldr	r0, [pc, #4]	@ (80030ac <__malloc_unlock+0x8>)
 80030a6:	f7ff bf09 	b.w	8002ebc <__retarget_lock_release_recursive>
 80030aa:	bf00      	nop
 80030ac:	2000023c 	.word	0x2000023c

080030b0 <__sfputc_r>:
 80030b0:	6893      	ldr	r3, [r2, #8]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	b410      	push	{r4}
 80030b8:	6093      	str	r3, [r2, #8]
 80030ba:	da08      	bge.n	80030ce <__sfputc_r+0x1e>
 80030bc:	6994      	ldr	r4, [r2, #24]
 80030be:	42a3      	cmp	r3, r4
 80030c0:	db01      	blt.n	80030c6 <__sfputc_r+0x16>
 80030c2:	290a      	cmp	r1, #10
 80030c4:	d103      	bne.n	80030ce <__sfputc_r+0x1e>
 80030c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030ca:	f7ff bde8 	b.w	8002c9e <__swbuf_r>
 80030ce:	6813      	ldr	r3, [r2, #0]
 80030d0:	1c58      	adds	r0, r3, #1
 80030d2:	6010      	str	r0, [r2, #0]
 80030d4:	7019      	strb	r1, [r3, #0]
 80030d6:	4608      	mov	r0, r1
 80030d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030dc:	4770      	bx	lr

080030de <__sfputs_r>:
 80030de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e0:	4606      	mov	r6, r0
 80030e2:	460f      	mov	r7, r1
 80030e4:	4614      	mov	r4, r2
 80030e6:	18d5      	adds	r5, r2, r3
 80030e8:	42ac      	cmp	r4, r5
 80030ea:	d101      	bne.n	80030f0 <__sfputs_r+0x12>
 80030ec:	2000      	movs	r0, #0
 80030ee:	e007      	b.n	8003100 <__sfputs_r+0x22>
 80030f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030f4:	463a      	mov	r2, r7
 80030f6:	4630      	mov	r0, r6
 80030f8:	f7ff ffda 	bl	80030b0 <__sfputc_r>
 80030fc:	1c43      	adds	r3, r0, #1
 80030fe:	d1f3      	bne.n	80030e8 <__sfputs_r+0xa>
 8003100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003104 <_vfiprintf_r>:
 8003104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003108:	460d      	mov	r5, r1
 800310a:	b09d      	sub	sp, #116	@ 0x74
 800310c:	4614      	mov	r4, r2
 800310e:	4698      	mov	r8, r3
 8003110:	4606      	mov	r6, r0
 8003112:	b118      	cbz	r0, 800311c <_vfiprintf_r+0x18>
 8003114:	6a03      	ldr	r3, [r0, #32]
 8003116:	b90b      	cbnz	r3, 800311c <_vfiprintf_r+0x18>
 8003118:	f7ff fcd8 	bl	8002acc <__sinit>
 800311c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800311e:	07d9      	lsls	r1, r3, #31
 8003120:	d405      	bmi.n	800312e <_vfiprintf_r+0x2a>
 8003122:	89ab      	ldrh	r3, [r5, #12]
 8003124:	059a      	lsls	r2, r3, #22
 8003126:	d402      	bmi.n	800312e <_vfiprintf_r+0x2a>
 8003128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800312a:	f7ff fec6 	bl	8002eba <__retarget_lock_acquire_recursive>
 800312e:	89ab      	ldrh	r3, [r5, #12]
 8003130:	071b      	lsls	r3, r3, #28
 8003132:	d501      	bpl.n	8003138 <_vfiprintf_r+0x34>
 8003134:	692b      	ldr	r3, [r5, #16]
 8003136:	b99b      	cbnz	r3, 8003160 <_vfiprintf_r+0x5c>
 8003138:	4629      	mov	r1, r5
 800313a:	4630      	mov	r0, r6
 800313c:	f7ff fdee 	bl	8002d1c <__swsetup_r>
 8003140:	b170      	cbz	r0, 8003160 <_vfiprintf_r+0x5c>
 8003142:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003144:	07dc      	lsls	r4, r3, #31
 8003146:	d504      	bpl.n	8003152 <_vfiprintf_r+0x4e>
 8003148:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800314c:	b01d      	add	sp, #116	@ 0x74
 800314e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003152:	89ab      	ldrh	r3, [r5, #12]
 8003154:	0598      	lsls	r0, r3, #22
 8003156:	d4f7      	bmi.n	8003148 <_vfiprintf_r+0x44>
 8003158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800315a:	f7ff feaf 	bl	8002ebc <__retarget_lock_release_recursive>
 800315e:	e7f3      	b.n	8003148 <_vfiprintf_r+0x44>
 8003160:	2300      	movs	r3, #0
 8003162:	9309      	str	r3, [sp, #36]	@ 0x24
 8003164:	2320      	movs	r3, #32
 8003166:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800316a:	f8cd 800c 	str.w	r8, [sp, #12]
 800316e:	2330      	movs	r3, #48	@ 0x30
 8003170:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003320 <_vfiprintf_r+0x21c>
 8003174:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003178:	f04f 0901 	mov.w	r9, #1
 800317c:	4623      	mov	r3, r4
 800317e:	469a      	mov	sl, r3
 8003180:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003184:	b10a      	cbz	r2, 800318a <_vfiprintf_r+0x86>
 8003186:	2a25      	cmp	r2, #37	@ 0x25
 8003188:	d1f9      	bne.n	800317e <_vfiprintf_r+0x7a>
 800318a:	ebba 0b04 	subs.w	fp, sl, r4
 800318e:	d00b      	beq.n	80031a8 <_vfiprintf_r+0xa4>
 8003190:	465b      	mov	r3, fp
 8003192:	4622      	mov	r2, r4
 8003194:	4629      	mov	r1, r5
 8003196:	4630      	mov	r0, r6
 8003198:	f7ff ffa1 	bl	80030de <__sfputs_r>
 800319c:	3001      	adds	r0, #1
 800319e:	f000 80a7 	beq.w	80032f0 <_vfiprintf_r+0x1ec>
 80031a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031a4:	445a      	add	r2, fp
 80031a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80031a8:	f89a 3000 	ldrb.w	r3, [sl]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 809f 	beq.w	80032f0 <_vfiprintf_r+0x1ec>
 80031b2:	2300      	movs	r3, #0
 80031b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031bc:	f10a 0a01 	add.w	sl, sl, #1
 80031c0:	9304      	str	r3, [sp, #16]
 80031c2:	9307      	str	r3, [sp, #28]
 80031c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80031c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80031ca:	4654      	mov	r4, sl
 80031cc:	2205      	movs	r2, #5
 80031ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031d2:	4853      	ldr	r0, [pc, #332]	@ (8003320 <_vfiprintf_r+0x21c>)
 80031d4:	f7fd f804 	bl	80001e0 <memchr>
 80031d8:	9a04      	ldr	r2, [sp, #16]
 80031da:	b9d8      	cbnz	r0, 8003214 <_vfiprintf_r+0x110>
 80031dc:	06d1      	lsls	r1, r2, #27
 80031de:	bf44      	itt	mi
 80031e0:	2320      	movmi	r3, #32
 80031e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031e6:	0713      	lsls	r3, r2, #28
 80031e8:	bf44      	itt	mi
 80031ea:	232b      	movmi	r3, #43	@ 0x2b
 80031ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031f0:	f89a 3000 	ldrb.w	r3, [sl]
 80031f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80031f6:	d015      	beq.n	8003224 <_vfiprintf_r+0x120>
 80031f8:	9a07      	ldr	r2, [sp, #28]
 80031fa:	4654      	mov	r4, sl
 80031fc:	2000      	movs	r0, #0
 80031fe:	f04f 0c0a 	mov.w	ip, #10
 8003202:	4621      	mov	r1, r4
 8003204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003208:	3b30      	subs	r3, #48	@ 0x30
 800320a:	2b09      	cmp	r3, #9
 800320c:	d94b      	bls.n	80032a6 <_vfiprintf_r+0x1a2>
 800320e:	b1b0      	cbz	r0, 800323e <_vfiprintf_r+0x13a>
 8003210:	9207      	str	r2, [sp, #28]
 8003212:	e014      	b.n	800323e <_vfiprintf_r+0x13a>
 8003214:	eba0 0308 	sub.w	r3, r0, r8
 8003218:	fa09 f303 	lsl.w	r3, r9, r3
 800321c:	4313      	orrs	r3, r2
 800321e:	9304      	str	r3, [sp, #16]
 8003220:	46a2      	mov	sl, r4
 8003222:	e7d2      	b.n	80031ca <_vfiprintf_r+0xc6>
 8003224:	9b03      	ldr	r3, [sp, #12]
 8003226:	1d19      	adds	r1, r3, #4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	9103      	str	r1, [sp, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	bfbb      	ittet	lt
 8003230:	425b      	neglt	r3, r3
 8003232:	f042 0202 	orrlt.w	r2, r2, #2
 8003236:	9307      	strge	r3, [sp, #28]
 8003238:	9307      	strlt	r3, [sp, #28]
 800323a:	bfb8      	it	lt
 800323c:	9204      	strlt	r2, [sp, #16]
 800323e:	7823      	ldrb	r3, [r4, #0]
 8003240:	2b2e      	cmp	r3, #46	@ 0x2e
 8003242:	d10a      	bne.n	800325a <_vfiprintf_r+0x156>
 8003244:	7863      	ldrb	r3, [r4, #1]
 8003246:	2b2a      	cmp	r3, #42	@ 0x2a
 8003248:	d132      	bne.n	80032b0 <_vfiprintf_r+0x1ac>
 800324a:	9b03      	ldr	r3, [sp, #12]
 800324c:	1d1a      	adds	r2, r3, #4
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	9203      	str	r2, [sp, #12]
 8003252:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003256:	3402      	adds	r4, #2
 8003258:	9305      	str	r3, [sp, #20]
 800325a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003330 <_vfiprintf_r+0x22c>
 800325e:	7821      	ldrb	r1, [r4, #0]
 8003260:	2203      	movs	r2, #3
 8003262:	4650      	mov	r0, sl
 8003264:	f7fc ffbc 	bl	80001e0 <memchr>
 8003268:	b138      	cbz	r0, 800327a <_vfiprintf_r+0x176>
 800326a:	9b04      	ldr	r3, [sp, #16]
 800326c:	eba0 000a 	sub.w	r0, r0, sl
 8003270:	2240      	movs	r2, #64	@ 0x40
 8003272:	4082      	lsls	r2, r0
 8003274:	4313      	orrs	r3, r2
 8003276:	3401      	adds	r4, #1
 8003278:	9304      	str	r3, [sp, #16]
 800327a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800327e:	4829      	ldr	r0, [pc, #164]	@ (8003324 <_vfiprintf_r+0x220>)
 8003280:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003284:	2206      	movs	r2, #6
 8003286:	f7fc ffab 	bl	80001e0 <memchr>
 800328a:	2800      	cmp	r0, #0
 800328c:	d03f      	beq.n	800330e <_vfiprintf_r+0x20a>
 800328e:	4b26      	ldr	r3, [pc, #152]	@ (8003328 <_vfiprintf_r+0x224>)
 8003290:	bb1b      	cbnz	r3, 80032da <_vfiprintf_r+0x1d6>
 8003292:	9b03      	ldr	r3, [sp, #12]
 8003294:	3307      	adds	r3, #7
 8003296:	f023 0307 	bic.w	r3, r3, #7
 800329a:	3308      	adds	r3, #8
 800329c:	9303      	str	r3, [sp, #12]
 800329e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032a0:	443b      	add	r3, r7
 80032a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80032a4:	e76a      	b.n	800317c <_vfiprintf_r+0x78>
 80032a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80032aa:	460c      	mov	r4, r1
 80032ac:	2001      	movs	r0, #1
 80032ae:	e7a8      	b.n	8003202 <_vfiprintf_r+0xfe>
 80032b0:	2300      	movs	r3, #0
 80032b2:	3401      	adds	r4, #1
 80032b4:	9305      	str	r3, [sp, #20]
 80032b6:	4619      	mov	r1, r3
 80032b8:	f04f 0c0a 	mov.w	ip, #10
 80032bc:	4620      	mov	r0, r4
 80032be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032c2:	3a30      	subs	r2, #48	@ 0x30
 80032c4:	2a09      	cmp	r2, #9
 80032c6:	d903      	bls.n	80032d0 <_vfiprintf_r+0x1cc>
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0c6      	beq.n	800325a <_vfiprintf_r+0x156>
 80032cc:	9105      	str	r1, [sp, #20]
 80032ce:	e7c4      	b.n	800325a <_vfiprintf_r+0x156>
 80032d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80032d4:	4604      	mov	r4, r0
 80032d6:	2301      	movs	r3, #1
 80032d8:	e7f0      	b.n	80032bc <_vfiprintf_r+0x1b8>
 80032da:	ab03      	add	r3, sp, #12
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	462a      	mov	r2, r5
 80032e0:	4b12      	ldr	r3, [pc, #72]	@ (800332c <_vfiprintf_r+0x228>)
 80032e2:	a904      	add	r1, sp, #16
 80032e4:	4630      	mov	r0, r6
 80032e6:	f3af 8000 	nop.w
 80032ea:	4607      	mov	r7, r0
 80032ec:	1c78      	adds	r0, r7, #1
 80032ee:	d1d6      	bne.n	800329e <_vfiprintf_r+0x19a>
 80032f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032f2:	07d9      	lsls	r1, r3, #31
 80032f4:	d405      	bmi.n	8003302 <_vfiprintf_r+0x1fe>
 80032f6:	89ab      	ldrh	r3, [r5, #12]
 80032f8:	059a      	lsls	r2, r3, #22
 80032fa:	d402      	bmi.n	8003302 <_vfiprintf_r+0x1fe>
 80032fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032fe:	f7ff fddd 	bl	8002ebc <__retarget_lock_release_recursive>
 8003302:	89ab      	ldrh	r3, [r5, #12]
 8003304:	065b      	lsls	r3, r3, #25
 8003306:	f53f af1f 	bmi.w	8003148 <_vfiprintf_r+0x44>
 800330a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800330c:	e71e      	b.n	800314c <_vfiprintf_r+0x48>
 800330e:	ab03      	add	r3, sp, #12
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	462a      	mov	r2, r5
 8003314:	4b05      	ldr	r3, [pc, #20]	@ (800332c <_vfiprintf_r+0x228>)
 8003316:	a904      	add	r1, sp, #16
 8003318:	4630      	mov	r0, r6
 800331a:	f000 f879 	bl	8003410 <_printf_i>
 800331e:	e7e4      	b.n	80032ea <_vfiprintf_r+0x1e6>
 8003320:	080039f0 	.word	0x080039f0
 8003324:	080039fa 	.word	0x080039fa
 8003328:	00000000 	.word	0x00000000
 800332c:	080030df 	.word	0x080030df
 8003330:	080039f6 	.word	0x080039f6

08003334 <_printf_common>:
 8003334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003338:	4616      	mov	r6, r2
 800333a:	4698      	mov	r8, r3
 800333c:	688a      	ldr	r2, [r1, #8]
 800333e:	690b      	ldr	r3, [r1, #16]
 8003340:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003344:	4293      	cmp	r3, r2
 8003346:	bfb8      	it	lt
 8003348:	4613      	movlt	r3, r2
 800334a:	6033      	str	r3, [r6, #0]
 800334c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003350:	4607      	mov	r7, r0
 8003352:	460c      	mov	r4, r1
 8003354:	b10a      	cbz	r2, 800335a <_printf_common+0x26>
 8003356:	3301      	adds	r3, #1
 8003358:	6033      	str	r3, [r6, #0]
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	0699      	lsls	r1, r3, #26
 800335e:	bf42      	ittt	mi
 8003360:	6833      	ldrmi	r3, [r6, #0]
 8003362:	3302      	addmi	r3, #2
 8003364:	6033      	strmi	r3, [r6, #0]
 8003366:	6825      	ldr	r5, [r4, #0]
 8003368:	f015 0506 	ands.w	r5, r5, #6
 800336c:	d106      	bne.n	800337c <_printf_common+0x48>
 800336e:	f104 0a19 	add.w	sl, r4, #25
 8003372:	68e3      	ldr	r3, [r4, #12]
 8003374:	6832      	ldr	r2, [r6, #0]
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	42ab      	cmp	r3, r5
 800337a:	dc26      	bgt.n	80033ca <_printf_common+0x96>
 800337c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003380:	6822      	ldr	r2, [r4, #0]
 8003382:	3b00      	subs	r3, #0
 8003384:	bf18      	it	ne
 8003386:	2301      	movne	r3, #1
 8003388:	0692      	lsls	r2, r2, #26
 800338a:	d42b      	bmi.n	80033e4 <_printf_common+0xb0>
 800338c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003390:	4641      	mov	r1, r8
 8003392:	4638      	mov	r0, r7
 8003394:	47c8      	blx	r9
 8003396:	3001      	adds	r0, #1
 8003398:	d01e      	beq.n	80033d8 <_printf_common+0xa4>
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	6922      	ldr	r2, [r4, #16]
 800339e:	f003 0306 	and.w	r3, r3, #6
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	bf02      	ittt	eq
 80033a6:	68e5      	ldreq	r5, [r4, #12]
 80033a8:	6833      	ldreq	r3, [r6, #0]
 80033aa:	1aed      	subeq	r5, r5, r3
 80033ac:	68a3      	ldr	r3, [r4, #8]
 80033ae:	bf0c      	ite	eq
 80033b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033b4:	2500      	movne	r5, #0
 80033b6:	4293      	cmp	r3, r2
 80033b8:	bfc4      	itt	gt
 80033ba:	1a9b      	subgt	r3, r3, r2
 80033bc:	18ed      	addgt	r5, r5, r3
 80033be:	2600      	movs	r6, #0
 80033c0:	341a      	adds	r4, #26
 80033c2:	42b5      	cmp	r5, r6
 80033c4:	d11a      	bne.n	80033fc <_printf_common+0xc8>
 80033c6:	2000      	movs	r0, #0
 80033c8:	e008      	b.n	80033dc <_printf_common+0xa8>
 80033ca:	2301      	movs	r3, #1
 80033cc:	4652      	mov	r2, sl
 80033ce:	4641      	mov	r1, r8
 80033d0:	4638      	mov	r0, r7
 80033d2:	47c8      	blx	r9
 80033d4:	3001      	adds	r0, #1
 80033d6:	d103      	bne.n	80033e0 <_printf_common+0xac>
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e0:	3501      	adds	r5, #1
 80033e2:	e7c6      	b.n	8003372 <_printf_common+0x3e>
 80033e4:	18e1      	adds	r1, r4, r3
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	2030      	movs	r0, #48	@ 0x30
 80033ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80033ee:	4422      	add	r2, r4
 80033f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80033f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80033f8:	3302      	adds	r3, #2
 80033fa:	e7c7      	b.n	800338c <_printf_common+0x58>
 80033fc:	2301      	movs	r3, #1
 80033fe:	4622      	mov	r2, r4
 8003400:	4641      	mov	r1, r8
 8003402:	4638      	mov	r0, r7
 8003404:	47c8      	blx	r9
 8003406:	3001      	adds	r0, #1
 8003408:	d0e6      	beq.n	80033d8 <_printf_common+0xa4>
 800340a:	3601      	adds	r6, #1
 800340c:	e7d9      	b.n	80033c2 <_printf_common+0x8e>
	...

08003410 <_printf_i>:
 8003410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003414:	7e0f      	ldrb	r7, [r1, #24]
 8003416:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003418:	2f78      	cmp	r7, #120	@ 0x78
 800341a:	4691      	mov	r9, r2
 800341c:	4680      	mov	r8, r0
 800341e:	460c      	mov	r4, r1
 8003420:	469a      	mov	sl, r3
 8003422:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003426:	d807      	bhi.n	8003438 <_printf_i+0x28>
 8003428:	2f62      	cmp	r7, #98	@ 0x62
 800342a:	d80a      	bhi.n	8003442 <_printf_i+0x32>
 800342c:	2f00      	cmp	r7, #0
 800342e:	f000 80d2 	beq.w	80035d6 <_printf_i+0x1c6>
 8003432:	2f58      	cmp	r7, #88	@ 0x58
 8003434:	f000 80b9 	beq.w	80035aa <_printf_i+0x19a>
 8003438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800343c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003440:	e03a      	b.n	80034b8 <_printf_i+0xa8>
 8003442:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003446:	2b15      	cmp	r3, #21
 8003448:	d8f6      	bhi.n	8003438 <_printf_i+0x28>
 800344a:	a101      	add	r1, pc, #4	@ (adr r1, 8003450 <_printf_i+0x40>)
 800344c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003450:	080034a9 	.word	0x080034a9
 8003454:	080034bd 	.word	0x080034bd
 8003458:	08003439 	.word	0x08003439
 800345c:	08003439 	.word	0x08003439
 8003460:	08003439 	.word	0x08003439
 8003464:	08003439 	.word	0x08003439
 8003468:	080034bd 	.word	0x080034bd
 800346c:	08003439 	.word	0x08003439
 8003470:	08003439 	.word	0x08003439
 8003474:	08003439 	.word	0x08003439
 8003478:	08003439 	.word	0x08003439
 800347c:	080035bd 	.word	0x080035bd
 8003480:	080034e7 	.word	0x080034e7
 8003484:	08003577 	.word	0x08003577
 8003488:	08003439 	.word	0x08003439
 800348c:	08003439 	.word	0x08003439
 8003490:	080035df 	.word	0x080035df
 8003494:	08003439 	.word	0x08003439
 8003498:	080034e7 	.word	0x080034e7
 800349c:	08003439 	.word	0x08003439
 80034a0:	08003439 	.word	0x08003439
 80034a4:	0800357f 	.word	0x0800357f
 80034a8:	6833      	ldr	r3, [r6, #0]
 80034aa:	1d1a      	adds	r2, r3, #4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6032      	str	r2, [r6, #0]
 80034b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80034b8:	2301      	movs	r3, #1
 80034ba:	e09d      	b.n	80035f8 <_printf_i+0x1e8>
 80034bc:	6833      	ldr	r3, [r6, #0]
 80034be:	6820      	ldr	r0, [r4, #0]
 80034c0:	1d19      	adds	r1, r3, #4
 80034c2:	6031      	str	r1, [r6, #0]
 80034c4:	0606      	lsls	r6, r0, #24
 80034c6:	d501      	bpl.n	80034cc <_printf_i+0xbc>
 80034c8:	681d      	ldr	r5, [r3, #0]
 80034ca:	e003      	b.n	80034d4 <_printf_i+0xc4>
 80034cc:	0645      	lsls	r5, r0, #25
 80034ce:	d5fb      	bpl.n	80034c8 <_printf_i+0xb8>
 80034d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80034d4:	2d00      	cmp	r5, #0
 80034d6:	da03      	bge.n	80034e0 <_printf_i+0xd0>
 80034d8:	232d      	movs	r3, #45	@ 0x2d
 80034da:	426d      	negs	r5, r5
 80034dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034e0:	4859      	ldr	r0, [pc, #356]	@ (8003648 <_printf_i+0x238>)
 80034e2:	230a      	movs	r3, #10
 80034e4:	e011      	b.n	800350a <_printf_i+0xfa>
 80034e6:	6821      	ldr	r1, [r4, #0]
 80034e8:	6833      	ldr	r3, [r6, #0]
 80034ea:	0608      	lsls	r0, r1, #24
 80034ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80034f0:	d402      	bmi.n	80034f8 <_printf_i+0xe8>
 80034f2:	0649      	lsls	r1, r1, #25
 80034f4:	bf48      	it	mi
 80034f6:	b2ad      	uxthmi	r5, r5
 80034f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80034fa:	4853      	ldr	r0, [pc, #332]	@ (8003648 <_printf_i+0x238>)
 80034fc:	6033      	str	r3, [r6, #0]
 80034fe:	bf14      	ite	ne
 8003500:	230a      	movne	r3, #10
 8003502:	2308      	moveq	r3, #8
 8003504:	2100      	movs	r1, #0
 8003506:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800350a:	6866      	ldr	r6, [r4, #4]
 800350c:	60a6      	str	r6, [r4, #8]
 800350e:	2e00      	cmp	r6, #0
 8003510:	bfa2      	ittt	ge
 8003512:	6821      	ldrge	r1, [r4, #0]
 8003514:	f021 0104 	bicge.w	r1, r1, #4
 8003518:	6021      	strge	r1, [r4, #0]
 800351a:	b90d      	cbnz	r5, 8003520 <_printf_i+0x110>
 800351c:	2e00      	cmp	r6, #0
 800351e:	d04b      	beq.n	80035b8 <_printf_i+0x1a8>
 8003520:	4616      	mov	r6, r2
 8003522:	fbb5 f1f3 	udiv	r1, r5, r3
 8003526:	fb03 5711 	mls	r7, r3, r1, r5
 800352a:	5dc7      	ldrb	r7, [r0, r7]
 800352c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003530:	462f      	mov	r7, r5
 8003532:	42bb      	cmp	r3, r7
 8003534:	460d      	mov	r5, r1
 8003536:	d9f4      	bls.n	8003522 <_printf_i+0x112>
 8003538:	2b08      	cmp	r3, #8
 800353a:	d10b      	bne.n	8003554 <_printf_i+0x144>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	07df      	lsls	r7, r3, #31
 8003540:	d508      	bpl.n	8003554 <_printf_i+0x144>
 8003542:	6923      	ldr	r3, [r4, #16]
 8003544:	6861      	ldr	r1, [r4, #4]
 8003546:	4299      	cmp	r1, r3
 8003548:	bfde      	ittt	le
 800354a:	2330      	movle	r3, #48	@ 0x30
 800354c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003550:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003554:	1b92      	subs	r2, r2, r6
 8003556:	6122      	str	r2, [r4, #16]
 8003558:	f8cd a000 	str.w	sl, [sp]
 800355c:	464b      	mov	r3, r9
 800355e:	aa03      	add	r2, sp, #12
 8003560:	4621      	mov	r1, r4
 8003562:	4640      	mov	r0, r8
 8003564:	f7ff fee6 	bl	8003334 <_printf_common>
 8003568:	3001      	adds	r0, #1
 800356a:	d14a      	bne.n	8003602 <_printf_i+0x1f2>
 800356c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003570:	b004      	add	sp, #16
 8003572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	f043 0320 	orr.w	r3, r3, #32
 800357c:	6023      	str	r3, [r4, #0]
 800357e:	4833      	ldr	r0, [pc, #204]	@ (800364c <_printf_i+0x23c>)
 8003580:	2778      	movs	r7, #120	@ 0x78
 8003582:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	6831      	ldr	r1, [r6, #0]
 800358a:	061f      	lsls	r7, r3, #24
 800358c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003590:	d402      	bmi.n	8003598 <_printf_i+0x188>
 8003592:	065f      	lsls	r7, r3, #25
 8003594:	bf48      	it	mi
 8003596:	b2ad      	uxthmi	r5, r5
 8003598:	6031      	str	r1, [r6, #0]
 800359a:	07d9      	lsls	r1, r3, #31
 800359c:	bf44      	itt	mi
 800359e:	f043 0320 	orrmi.w	r3, r3, #32
 80035a2:	6023      	strmi	r3, [r4, #0]
 80035a4:	b11d      	cbz	r5, 80035ae <_printf_i+0x19e>
 80035a6:	2310      	movs	r3, #16
 80035a8:	e7ac      	b.n	8003504 <_printf_i+0xf4>
 80035aa:	4827      	ldr	r0, [pc, #156]	@ (8003648 <_printf_i+0x238>)
 80035ac:	e7e9      	b.n	8003582 <_printf_i+0x172>
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	f023 0320 	bic.w	r3, r3, #32
 80035b4:	6023      	str	r3, [r4, #0]
 80035b6:	e7f6      	b.n	80035a6 <_printf_i+0x196>
 80035b8:	4616      	mov	r6, r2
 80035ba:	e7bd      	b.n	8003538 <_printf_i+0x128>
 80035bc:	6833      	ldr	r3, [r6, #0]
 80035be:	6825      	ldr	r5, [r4, #0]
 80035c0:	6961      	ldr	r1, [r4, #20]
 80035c2:	1d18      	adds	r0, r3, #4
 80035c4:	6030      	str	r0, [r6, #0]
 80035c6:	062e      	lsls	r6, r5, #24
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	d501      	bpl.n	80035d0 <_printf_i+0x1c0>
 80035cc:	6019      	str	r1, [r3, #0]
 80035ce:	e002      	b.n	80035d6 <_printf_i+0x1c6>
 80035d0:	0668      	lsls	r0, r5, #25
 80035d2:	d5fb      	bpl.n	80035cc <_printf_i+0x1bc>
 80035d4:	8019      	strh	r1, [r3, #0]
 80035d6:	2300      	movs	r3, #0
 80035d8:	6123      	str	r3, [r4, #16]
 80035da:	4616      	mov	r6, r2
 80035dc:	e7bc      	b.n	8003558 <_printf_i+0x148>
 80035de:	6833      	ldr	r3, [r6, #0]
 80035e0:	1d1a      	adds	r2, r3, #4
 80035e2:	6032      	str	r2, [r6, #0]
 80035e4:	681e      	ldr	r6, [r3, #0]
 80035e6:	6862      	ldr	r2, [r4, #4]
 80035e8:	2100      	movs	r1, #0
 80035ea:	4630      	mov	r0, r6
 80035ec:	f7fc fdf8 	bl	80001e0 <memchr>
 80035f0:	b108      	cbz	r0, 80035f6 <_printf_i+0x1e6>
 80035f2:	1b80      	subs	r0, r0, r6
 80035f4:	6060      	str	r0, [r4, #4]
 80035f6:	6863      	ldr	r3, [r4, #4]
 80035f8:	6123      	str	r3, [r4, #16]
 80035fa:	2300      	movs	r3, #0
 80035fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003600:	e7aa      	b.n	8003558 <_printf_i+0x148>
 8003602:	6923      	ldr	r3, [r4, #16]
 8003604:	4632      	mov	r2, r6
 8003606:	4649      	mov	r1, r9
 8003608:	4640      	mov	r0, r8
 800360a:	47d0      	blx	sl
 800360c:	3001      	adds	r0, #1
 800360e:	d0ad      	beq.n	800356c <_printf_i+0x15c>
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	079b      	lsls	r3, r3, #30
 8003614:	d413      	bmi.n	800363e <_printf_i+0x22e>
 8003616:	68e0      	ldr	r0, [r4, #12]
 8003618:	9b03      	ldr	r3, [sp, #12]
 800361a:	4298      	cmp	r0, r3
 800361c:	bfb8      	it	lt
 800361e:	4618      	movlt	r0, r3
 8003620:	e7a6      	b.n	8003570 <_printf_i+0x160>
 8003622:	2301      	movs	r3, #1
 8003624:	4632      	mov	r2, r6
 8003626:	4649      	mov	r1, r9
 8003628:	4640      	mov	r0, r8
 800362a:	47d0      	blx	sl
 800362c:	3001      	adds	r0, #1
 800362e:	d09d      	beq.n	800356c <_printf_i+0x15c>
 8003630:	3501      	adds	r5, #1
 8003632:	68e3      	ldr	r3, [r4, #12]
 8003634:	9903      	ldr	r1, [sp, #12]
 8003636:	1a5b      	subs	r3, r3, r1
 8003638:	42ab      	cmp	r3, r5
 800363a:	dcf2      	bgt.n	8003622 <_printf_i+0x212>
 800363c:	e7eb      	b.n	8003616 <_printf_i+0x206>
 800363e:	2500      	movs	r5, #0
 8003640:	f104 0619 	add.w	r6, r4, #25
 8003644:	e7f5      	b.n	8003632 <_printf_i+0x222>
 8003646:	bf00      	nop
 8003648:	08003a01 	.word	0x08003a01
 800364c:	08003a12 	.word	0x08003a12

08003650 <__sflush_r>:
 8003650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003658:	0716      	lsls	r6, r2, #28
 800365a:	4605      	mov	r5, r0
 800365c:	460c      	mov	r4, r1
 800365e:	d454      	bmi.n	800370a <__sflush_r+0xba>
 8003660:	684b      	ldr	r3, [r1, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	dc02      	bgt.n	800366c <__sflush_r+0x1c>
 8003666:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	dd48      	ble.n	80036fe <__sflush_r+0xae>
 800366c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800366e:	2e00      	cmp	r6, #0
 8003670:	d045      	beq.n	80036fe <__sflush_r+0xae>
 8003672:	2300      	movs	r3, #0
 8003674:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003678:	682f      	ldr	r7, [r5, #0]
 800367a:	6a21      	ldr	r1, [r4, #32]
 800367c:	602b      	str	r3, [r5, #0]
 800367e:	d030      	beq.n	80036e2 <__sflush_r+0x92>
 8003680:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003682:	89a3      	ldrh	r3, [r4, #12]
 8003684:	0759      	lsls	r1, r3, #29
 8003686:	d505      	bpl.n	8003694 <__sflush_r+0x44>
 8003688:	6863      	ldr	r3, [r4, #4]
 800368a:	1ad2      	subs	r2, r2, r3
 800368c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800368e:	b10b      	cbz	r3, 8003694 <__sflush_r+0x44>
 8003690:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003692:	1ad2      	subs	r2, r2, r3
 8003694:	2300      	movs	r3, #0
 8003696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003698:	6a21      	ldr	r1, [r4, #32]
 800369a:	4628      	mov	r0, r5
 800369c:	47b0      	blx	r6
 800369e:	1c43      	adds	r3, r0, #1
 80036a0:	89a3      	ldrh	r3, [r4, #12]
 80036a2:	d106      	bne.n	80036b2 <__sflush_r+0x62>
 80036a4:	6829      	ldr	r1, [r5, #0]
 80036a6:	291d      	cmp	r1, #29
 80036a8:	d82b      	bhi.n	8003702 <__sflush_r+0xb2>
 80036aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003754 <__sflush_r+0x104>)
 80036ac:	410a      	asrs	r2, r1
 80036ae:	07d6      	lsls	r6, r2, #31
 80036b0:	d427      	bmi.n	8003702 <__sflush_r+0xb2>
 80036b2:	2200      	movs	r2, #0
 80036b4:	6062      	str	r2, [r4, #4]
 80036b6:	04d9      	lsls	r1, r3, #19
 80036b8:	6922      	ldr	r2, [r4, #16]
 80036ba:	6022      	str	r2, [r4, #0]
 80036bc:	d504      	bpl.n	80036c8 <__sflush_r+0x78>
 80036be:	1c42      	adds	r2, r0, #1
 80036c0:	d101      	bne.n	80036c6 <__sflush_r+0x76>
 80036c2:	682b      	ldr	r3, [r5, #0]
 80036c4:	b903      	cbnz	r3, 80036c8 <__sflush_r+0x78>
 80036c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80036c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036ca:	602f      	str	r7, [r5, #0]
 80036cc:	b1b9      	cbz	r1, 80036fe <__sflush_r+0xae>
 80036ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80036d2:	4299      	cmp	r1, r3
 80036d4:	d002      	beq.n	80036dc <__sflush_r+0x8c>
 80036d6:	4628      	mov	r0, r5
 80036d8:	f7ff fbf2 	bl	8002ec0 <_free_r>
 80036dc:	2300      	movs	r3, #0
 80036de:	6363      	str	r3, [r4, #52]	@ 0x34
 80036e0:	e00d      	b.n	80036fe <__sflush_r+0xae>
 80036e2:	2301      	movs	r3, #1
 80036e4:	4628      	mov	r0, r5
 80036e6:	47b0      	blx	r6
 80036e8:	4602      	mov	r2, r0
 80036ea:	1c50      	adds	r0, r2, #1
 80036ec:	d1c9      	bne.n	8003682 <__sflush_r+0x32>
 80036ee:	682b      	ldr	r3, [r5, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0c6      	beq.n	8003682 <__sflush_r+0x32>
 80036f4:	2b1d      	cmp	r3, #29
 80036f6:	d001      	beq.n	80036fc <__sflush_r+0xac>
 80036f8:	2b16      	cmp	r3, #22
 80036fa:	d11e      	bne.n	800373a <__sflush_r+0xea>
 80036fc:	602f      	str	r7, [r5, #0]
 80036fe:	2000      	movs	r0, #0
 8003700:	e022      	b.n	8003748 <__sflush_r+0xf8>
 8003702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003706:	b21b      	sxth	r3, r3
 8003708:	e01b      	b.n	8003742 <__sflush_r+0xf2>
 800370a:	690f      	ldr	r7, [r1, #16]
 800370c:	2f00      	cmp	r7, #0
 800370e:	d0f6      	beq.n	80036fe <__sflush_r+0xae>
 8003710:	0793      	lsls	r3, r2, #30
 8003712:	680e      	ldr	r6, [r1, #0]
 8003714:	bf08      	it	eq
 8003716:	694b      	ldreq	r3, [r1, #20]
 8003718:	600f      	str	r7, [r1, #0]
 800371a:	bf18      	it	ne
 800371c:	2300      	movne	r3, #0
 800371e:	eba6 0807 	sub.w	r8, r6, r7
 8003722:	608b      	str	r3, [r1, #8]
 8003724:	f1b8 0f00 	cmp.w	r8, #0
 8003728:	dde9      	ble.n	80036fe <__sflush_r+0xae>
 800372a:	6a21      	ldr	r1, [r4, #32]
 800372c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800372e:	4643      	mov	r3, r8
 8003730:	463a      	mov	r2, r7
 8003732:	4628      	mov	r0, r5
 8003734:	47b0      	blx	r6
 8003736:	2800      	cmp	r0, #0
 8003738:	dc08      	bgt.n	800374c <__sflush_r+0xfc>
 800373a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800373e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003742:	81a3      	strh	r3, [r4, #12]
 8003744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800374c:	4407      	add	r7, r0
 800374e:	eba8 0800 	sub.w	r8, r8, r0
 8003752:	e7e7      	b.n	8003724 <__sflush_r+0xd4>
 8003754:	dfbffffe 	.word	0xdfbffffe

08003758 <_fflush_r>:
 8003758:	b538      	push	{r3, r4, r5, lr}
 800375a:	690b      	ldr	r3, [r1, #16]
 800375c:	4605      	mov	r5, r0
 800375e:	460c      	mov	r4, r1
 8003760:	b913      	cbnz	r3, 8003768 <_fflush_r+0x10>
 8003762:	2500      	movs	r5, #0
 8003764:	4628      	mov	r0, r5
 8003766:	bd38      	pop	{r3, r4, r5, pc}
 8003768:	b118      	cbz	r0, 8003772 <_fflush_r+0x1a>
 800376a:	6a03      	ldr	r3, [r0, #32]
 800376c:	b90b      	cbnz	r3, 8003772 <_fflush_r+0x1a>
 800376e:	f7ff f9ad 	bl	8002acc <__sinit>
 8003772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f3      	beq.n	8003762 <_fflush_r+0xa>
 800377a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800377c:	07d0      	lsls	r0, r2, #31
 800377e:	d404      	bmi.n	800378a <_fflush_r+0x32>
 8003780:	0599      	lsls	r1, r3, #22
 8003782:	d402      	bmi.n	800378a <_fflush_r+0x32>
 8003784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003786:	f7ff fb98 	bl	8002eba <__retarget_lock_acquire_recursive>
 800378a:	4628      	mov	r0, r5
 800378c:	4621      	mov	r1, r4
 800378e:	f7ff ff5f 	bl	8003650 <__sflush_r>
 8003792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003794:	07da      	lsls	r2, r3, #31
 8003796:	4605      	mov	r5, r0
 8003798:	d4e4      	bmi.n	8003764 <_fflush_r+0xc>
 800379a:	89a3      	ldrh	r3, [r4, #12]
 800379c:	059b      	lsls	r3, r3, #22
 800379e:	d4e1      	bmi.n	8003764 <_fflush_r+0xc>
 80037a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037a2:	f7ff fb8b 	bl	8002ebc <__retarget_lock_release_recursive>
 80037a6:	e7dd      	b.n	8003764 <_fflush_r+0xc>

080037a8 <__swhatbuf_r>:
 80037a8:	b570      	push	{r4, r5, r6, lr}
 80037aa:	460c      	mov	r4, r1
 80037ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b0:	2900      	cmp	r1, #0
 80037b2:	b096      	sub	sp, #88	@ 0x58
 80037b4:	4615      	mov	r5, r2
 80037b6:	461e      	mov	r6, r3
 80037b8:	da0d      	bge.n	80037d6 <__swhatbuf_r+0x2e>
 80037ba:	89a3      	ldrh	r3, [r4, #12]
 80037bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80037c0:	f04f 0100 	mov.w	r1, #0
 80037c4:	bf14      	ite	ne
 80037c6:	2340      	movne	r3, #64	@ 0x40
 80037c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80037cc:	2000      	movs	r0, #0
 80037ce:	6031      	str	r1, [r6, #0]
 80037d0:	602b      	str	r3, [r5, #0]
 80037d2:	b016      	add	sp, #88	@ 0x58
 80037d4:	bd70      	pop	{r4, r5, r6, pc}
 80037d6:	466a      	mov	r2, sp
 80037d8:	f000 f848 	bl	800386c <_fstat_r>
 80037dc:	2800      	cmp	r0, #0
 80037de:	dbec      	blt.n	80037ba <__swhatbuf_r+0x12>
 80037e0:	9901      	ldr	r1, [sp, #4]
 80037e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80037e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80037ea:	4259      	negs	r1, r3
 80037ec:	4159      	adcs	r1, r3
 80037ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037f2:	e7eb      	b.n	80037cc <__swhatbuf_r+0x24>

080037f4 <__smakebuf_r>:
 80037f4:	898b      	ldrh	r3, [r1, #12]
 80037f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037f8:	079d      	lsls	r5, r3, #30
 80037fa:	4606      	mov	r6, r0
 80037fc:	460c      	mov	r4, r1
 80037fe:	d507      	bpl.n	8003810 <__smakebuf_r+0x1c>
 8003800:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003804:	6023      	str	r3, [r4, #0]
 8003806:	6123      	str	r3, [r4, #16]
 8003808:	2301      	movs	r3, #1
 800380a:	6163      	str	r3, [r4, #20]
 800380c:	b003      	add	sp, #12
 800380e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003810:	ab01      	add	r3, sp, #4
 8003812:	466a      	mov	r2, sp
 8003814:	f7ff ffc8 	bl	80037a8 <__swhatbuf_r>
 8003818:	9f00      	ldr	r7, [sp, #0]
 800381a:	4605      	mov	r5, r0
 800381c:	4639      	mov	r1, r7
 800381e:	4630      	mov	r0, r6
 8003820:	f7ff fbba 	bl	8002f98 <_malloc_r>
 8003824:	b948      	cbnz	r0, 800383a <__smakebuf_r+0x46>
 8003826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800382a:	059a      	lsls	r2, r3, #22
 800382c:	d4ee      	bmi.n	800380c <__smakebuf_r+0x18>
 800382e:	f023 0303 	bic.w	r3, r3, #3
 8003832:	f043 0302 	orr.w	r3, r3, #2
 8003836:	81a3      	strh	r3, [r4, #12]
 8003838:	e7e2      	b.n	8003800 <__smakebuf_r+0xc>
 800383a:	89a3      	ldrh	r3, [r4, #12]
 800383c:	6020      	str	r0, [r4, #0]
 800383e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003842:	81a3      	strh	r3, [r4, #12]
 8003844:	9b01      	ldr	r3, [sp, #4]
 8003846:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800384a:	b15b      	cbz	r3, 8003864 <__smakebuf_r+0x70>
 800384c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003850:	4630      	mov	r0, r6
 8003852:	f000 f81d 	bl	8003890 <_isatty_r>
 8003856:	b128      	cbz	r0, 8003864 <__smakebuf_r+0x70>
 8003858:	89a3      	ldrh	r3, [r4, #12]
 800385a:	f023 0303 	bic.w	r3, r3, #3
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	81a3      	strh	r3, [r4, #12]
 8003864:	89a3      	ldrh	r3, [r4, #12]
 8003866:	431d      	orrs	r5, r3
 8003868:	81a5      	strh	r5, [r4, #12]
 800386a:	e7cf      	b.n	800380c <__smakebuf_r+0x18>

0800386c <_fstat_r>:
 800386c:	b538      	push	{r3, r4, r5, lr}
 800386e:	4d07      	ldr	r5, [pc, #28]	@ (800388c <_fstat_r+0x20>)
 8003870:	2300      	movs	r3, #0
 8003872:	4604      	mov	r4, r0
 8003874:	4608      	mov	r0, r1
 8003876:	4611      	mov	r1, r2
 8003878:	602b      	str	r3, [r5, #0]
 800387a:	f7fd fa97 	bl	8000dac <_fstat>
 800387e:	1c43      	adds	r3, r0, #1
 8003880:	d102      	bne.n	8003888 <_fstat_r+0x1c>
 8003882:	682b      	ldr	r3, [r5, #0]
 8003884:	b103      	cbz	r3, 8003888 <_fstat_r+0x1c>
 8003886:	6023      	str	r3, [r4, #0]
 8003888:	bd38      	pop	{r3, r4, r5, pc}
 800388a:	bf00      	nop
 800388c:	20000238 	.word	0x20000238

08003890 <_isatty_r>:
 8003890:	b538      	push	{r3, r4, r5, lr}
 8003892:	4d06      	ldr	r5, [pc, #24]	@ (80038ac <_isatty_r+0x1c>)
 8003894:	2300      	movs	r3, #0
 8003896:	4604      	mov	r4, r0
 8003898:	4608      	mov	r0, r1
 800389a:	602b      	str	r3, [r5, #0]
 800389c:	f7fd fa96 	bl	8000dcc <_isatty>
 80038a0:	1c43      	adds	r3, r0, #1
 80038a2:	d102      	bne.n	80038aa <_isatty_r+0x1a>
 80038a4:	682b      	ldr	r3, [r5, #0]
 80038a6:	b103      	cbz	r3, 80038aa <_isatty_r+0x1a>
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	bd38      	pop	{r3, r4, r5, pc}
 80038ac:	20000238 	.word	0x20000238

080038b0 <_sbrk_r>:
 80038b0:	b538      	push	{r3, r4, r5, lr}
 80038b2:	4d06      	ldr	r5, [pc, #24]	@ (80038cc <_sbrk_r+0x1c>)
 80038b4:	2300      	movs	r3, #0
 80038b6:	4604      	mov	r4, r0
 80038b8:	4608      	mov	r0, r1
 80038ba:	602b      	str	r3, [r5, #0]
 80038bc:	f7fd fa9e 	bl	8000dfc <_sbrk>
 80038c0:	1c43      	adds	r3, r0, #1
 80038c2:	d102      	bne.n	80038ca <_sbrk_r+0x1a>
 80038c4:	682b      	ldr	r3, [r5, #0]
 80038c6:	b103      	cbz	r3, 80038ca <_sbrk_r+0x1a>
 80038c8:	6023      	str	r3, [r4, #0]
 80038ca:	bd38      	pop	{r3, r4, r5, pc}
 80038cc:	20000238 	.word	0x20000238

080038d0 <_init>:
 80038d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d2:	bf00      	nop
 80038d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d6:	bc08      	pop	{r3}
 80038d8:	469e      	mov	lr, r3
 80038da:	4770      	bx	lr

080038dc <_fini>:
 80038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038de:	bf00      	nop
 80038e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e2:	bc08      	pop	{r3}
 80038e4:	469e      	mov	lr, r3
 80038e6:	4770      	bx	lr
