
NRF24L01_RECIEVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004304  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080044a4  080044a4  000054a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800464c  0800464c  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  0800464c  0800464c  0000564c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004654  08004654  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004654  08004654  00005654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004658  08004658  00005658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800465c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006070  2**0
                  CONTENTS
 10 .bss          00000228  20000070  20000070  00006070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000298  20000298  00006070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000756b  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001838  00000000  00000000  0000d60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000760  00000000  00000000  0000ee48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000572  00000000  00000000  0000f5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207f1  00000000  00000000  0000fb1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000893f  00000000  00000000  0003030b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf3b7  00000000  00000000  00038c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f8001  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002414  00000000  00000000  000f8044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  000fa458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800448c 	.word	0x0800448c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800448c 	.word	0x0800448c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <CS_Select>:
#define Chip_Select_PORT   GPIOC
#define Chip_Select_PIN    GPIO_PIN_5


void CS_Select (void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Chip_Select_PORT, Chip_Select_PIN, GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	2120      	movs	r1, #32
 8000288:	4802      	ldr	r0, [pc, #8]	@ (8000294 <CS_Select+0x14>)
 800028a:	f000 ffff 	bl	800128c <HAL_GPIO_WritePin>
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	48000800 	.word	0x48000800

08000298 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Chip_Select_PORT, Chip_Select_PIN, GPIO_PIN_SET);
 800029c:	2201      	movs	r2, #1
 800029e:	2120      	movs	r1, #32
 80002a0:	4802      	ldr	r0, [pc, #8]	@ (80002ac <CS_UnSelect+0x14>)
 80002a2:	f000 fff3 	bl	800128c <HAL_GPIO_WritePin>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	48000800 	.word	0x48000800

080002b0 <CE_Enable>:


void CE_Enable (void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Chip_Enable_PORT, Chip_Enable_PIN, GPIO_PIN_SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2110      	movs	r1, #16
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002bc:	f000 ffe6 	bl	800128c <HAL_GPIO_WritePin>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <CE_Disable>:

void CE_Disable (void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Chip_Enable_PORT, Chip_Enable_PIN, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2110      	movs	r1, #16
 80002cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002d0:	f000 ffdc 	bl	800128c <HAL_GPIO_WritePin>
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	460a      	mov	r2, r1
 80002e2:	71fb      	strb	r3, [r7, #7]
 80002e4:	4613      	mov	r3, r2
 80002e6:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	f043 0320 	orr.w	r3, r3, #32
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80002f2:	79bb      	ldrb	r3, [r7, #6]
 80002f4:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002f6:	f7ff ffc3 	bl	8000280 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80002fa:	f107 010c 	add.w	r1, r7, #12
 80002fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000302:	2202      	movs	r2, #2
 8000304:	4804      	ldr	r0, [pc, #16]	@ (8000318 <nrf24_WriteReg+0x40>)
 8000306:	f002 faa8 	bl	800285a <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800030a:	f7ff ffc5 	bl	8000298 <CS_UnSelect>
}
 800030e:	bf00      	nop
 8000310:	3710      	adds	r7, #16
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	2000008c 	.word	0x2000008c

0800031c <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b086      	sub	sp, #24
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
 8000328:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800032a:	7bfb      	ldrb	r3, [r7, #15]
 800032c:	f043 0320 	orr.w	r3, r3, #32
 8000330:	b2db      	uxtb	r3, r3
 8000332:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000334:	f7ff ffa4 	bl	8000280 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000338:	f107 0114 	add.w	r1, r7, #20
 800033c:	2364      	movs	r3, #100	@ 0x64
 800033e:	2201      	movs	r2, #1
 8000340:	4808      	ldr	r0, [pc, #32]	@ (8000364 <nrf24_WriteRegMulti+0x48>)
 8000342:	f002 fa8a 	bl	800285a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	b29a      	uxth	r2, r3
 800034a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800034e:	68b9      	ldr	r1, [r7, #8]
 8000350:	4804      	ldr	r0, [pc, #16]	@ (8000364 <nrf24_WriteRegMulti+0x48>)
 8000352:	f002 fa82 	bl	800285a <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000356:	f7ff ff9f 	bl	8000298 <CS_UnSelect>
}
 800035a:	bf00      	nop
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	2000008c 	.word	0x2000008c

08000368 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000372:	2300      	movs	r3, #0
 8000374:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000376:	f7ff ff83 	bl	8000280 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800037a:	1df9      	adds	r1, r7, #7
 800037c:	2364      	movs	r3, #100	@ 0x64
 800037e:	2201      	movs	r2, #1
 8000380:	4808      	ldr	r0, [pc, #32]	@ (80003a4 <nrf24_ReadReg+0x3c>)
 8000382:	f002 fa6a 	bl	800285a <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000386:	f107 010f 	add.w	r1, r7, #15
 800038a:	2364      	movs	r3, #100	@ 0x64
 800038c:	2201      	movs	r2, #1
 800038e:	4805      	ldr	r0, [pc, #20]	@ (80003a4 <nrf24_ReadReg+0x3c>)
 8000390:	f002 fbd8 	bl	8002b44 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000394:	f7ff ff80 	bl	8000298 <CS_UnSelect>

	return data;
 8000398:	7bfb      	ldrb	r3, [r7, #15]
}
 800039a:	4618      	mov	r0, r3
 800039c:	3710      	adds	r7, #16
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	2000008c 	.word	0x2000008c

080003a8 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	60b9      	str	r1, [r7, #8]
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80003b6:	f7ff ff63 	bl	8000280 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80003ba:	f107 010f 	add.w	r1, r7, #15
 80003be:	2364      	movs	r3, #100	@ 0x64
 80003c0:	2201      	movs	r2, #1
 80003c2:	4808      	ldr	r0, [pc, #32]	@ (80003e4 <nrf24_ReadReg_Multi+0x3c>)
 80003c4:	f002 fa49 	bl	800285a <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	b29a      	uxth	r2, r3
 80003cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003d0:	68b9      	ldr	r1, [r7, #8]
 80003d2:	4804      	ldr	r0, [pc, #16]	@ (80003e4 <nrf24_ReadReg_Multi+0x3c>)
 80003d4:	f002 fbb6 	bl	8002b44 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80003d8:	f7ff ff5e 	bl	8000298 <CS_UnSelect>
}
 80003dc:	bf00      	nop
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	2000008c 	.word	0x2000008c

080003e8 <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80003f2:	f7ff ff45 	bl	8000280 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80003f6:	1df9      	adds	r1, r7, #7
 80003f8:	2364      	movs	r3, #100	@ 0x64
 80003fa:	2201      	movs	r2, #1
 80003fc:	4804      	ldr	r0, [pc, #16]	@ (8000410 <nrfsendCmd+0x28>)
 80003fe:	f002 fa2c 	bl	800285a <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000402:	f7ff ff49 	bl	8000298 <CS_UnSelect>
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	2000008c 	.word	0x2000008c

08000414 <NRF24_PrintReceiverRegisters>:
}


// Function to read and print NRF24L01+ receiver registers
void NRF24_PrintReceiverRegisters(void)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b087      	sub	sp, #28
 8000418:	af02      	add	r7, sp, #8
    uint8_t status = nrf24_ReadReg(STATUS);          // Read STATUS register
 800041a:	2007      	movs	r0, #7
 800041c:	f7ff ffa4 	bl	8000368 <nrf24_ReadReg>
 8000420:	4603      	mov	r3, r0
 8000422:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_status = nrf24_ReadReg(FIFO_STATUS);  // Read FIFO_STATUS register
 8000424:	2017      	movs	r0, #23
 8000426:	f7ff ff9f 	bl	8000368 <nrf24_ReadReg>
 800042a:	4603      	mov	r3, r0
 800042c:	73bb      	strb	r3, [r7, #14]
    uint8_t config = nrf24_ReadReg(CONFIG);            // Read CONFIG register
 800042e:	2000      	movs	r0, #0
 8000430:	f7ff ff9a 	bl	8000368 <nrf24_ReadReg>
 8000434:	4603      	mov	r3, r0
 8000436:	737b      	strb	r3, [r7, #13]
    uint8_t observe_tx = nrf24_ReadReg(OBSERVE_TX);    // Read OBSERVE_TX register (for TX-related info)
 8000438:	2008      	movs	r0, #8
 800043a:	f7ff ff95 	bl	8000368 <nrf24_ReadReg>
 800043e:	4603      	mov	r3, r0
 8000440:	733b      	strb	r3, [r7, #12]
    uint8_t rf_ch = nrf24_ReadReg(RF_CH);              // Read RF channel
 8000442:	2005      	movs	r0, #5
 8000444:	f7ff ff90 	bl	8000368 <nrf24_ReadReg>
 8000448:	4603      	mov	r3, r0
 800044a:	72fb      	strb	r3, [r7, #11]
    uint8_t rx_addr_p0[5];                             // Buffer for RX_ADDR_P0
    nrf24_ReadReg_Multi(RX_ADDR_P0, rx_addr_p0, 5);     // Read RX_ADDR_P0 (Receiver Address)
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2205      	movs	r2, #5
 8000450:	4619      	mov	r1, r3
 8000452:	200a      	movs	r0, #10
 8000454:	f7ff ffa8 	bl	80003a8 <nrf24_ReadReg_Multi>

    // Print the values of important registers
    printf("STATUS Register: 0x%02X\n", status);
 8000458:	7bfb      	ldrb	r3, [r7, #15]
 800045a:	4619      	mov	r1, r3
 800045c:	4814      	ldr	r0, [pc, #80]	@ (80004b0 <NRF24_PrintReceiverRegisters+0x9c>)
 800045e:	f003 f949 	bl	80036f4 <iprintf>
    printf("FIFO_STATUS Register: 0x%02X\n", fifo_status);
 8000462:	7bbb      	ldrb	r3, [r7, #14]
 8000464:	4619      	mov	r1, r3
 8000466:	4813      	ldr	r0, [pc, #76]	@ (80004b4 <NRF24_PrintReceiverRegisters+0xa0>)
 8000468:	f003 f944 	bl	80036f4 <iprintf>
    printf("CONFIG Register: 0x%02X\n", config);
 800046c:	7b7b      	ldrb	r3, [r7, #13]
 800046e:	4619      	mov	r1, r3
 8000470:	4811      	ldr	r0, [pc, #68]	@ (80004b8 <NRF24_PrintReceiverRegisters+0xa4>)
 8000472:	f003 f93f 	bl	80036f4 <iprintf>
    printf("OBSERVE_TX Register: 0x%02X\n", observe_tx);  // Not as important in RX, but check it
 8000476:	7b3b      	ldrb	r3, [r7, #12]
 8000478:	4619      	mov	r1, r3
 800047a:	4810      	ldr	r0, [pc, #64]	@ (80004bc <NRF24_PrintReceiverRegisters+0xa8>)
 800047c:	f003 f93a 	bl	80036f4 <iprintf>
    printf("RF_CH Register: 0x%02X\n", rf_ch);
 8000480:	7afb      	ldrb	r3, [r7, #11]
 8000482:	4619      	mov	r1, r3
 8000484:	480e      	ldr	r0, [pc, #56]	@ (80004c0 <NRF24_PrintReceiverRegisters+0xac>)
 8000486:	f003 f935 	bl	80036f4 <iprintf>

    // Print the RX_ADDR_P0 register (5 bytes)
    printf("RX_ADDR_P0: 0x%02X%02X%02X%02X%02X\n",
           rx_addr_p0[0], rx_addr_p0[1], rx_addr_p0[2], rx_addr_p0[3], rx_addr_p0[4]);
 800048a:	793b      	ldrb	r3, [r7, #4]
    printf("RX_ADDR_P0: 0x%02X%02X%02X%02X%02X\n",
 800048c:	4619      	mov	r1, r3
           rx_addr_p0[0], rx_addr_p0[1], rx_addr_p0[2], rx_addr_p0[3], rx_addr_p0[4]);
 800048e:	797b      	ldrb	r3, [r7, #5]
    printf("RX_ADDR_P0: 0x%02X%02X%02X%02X%02X\n",
 8000490:	4618      	mov	r0, r3
           rx_addr_p0[0], rx_addr_p0[1], rx_addr_p0[2], rx_addr_p0[3], rx_addr_p0[4]);
 8000492:	79bb      	ldrb	r3, [r7, #6]
    printf("RX_ADDR_P0: 0x%02X%02X%02X%02X%02X\n",
 8000494:	461c      	mov	r4, r3
           rx_addr_p0[0], rx_addr_p0[1], rx_addr_p0[2], rx_addr_p0[3], rx_addr_p0[4]);
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	7a3a      	ldrb	r2, [r7, #8]
    printf("RX_ADDR_P0: 0x%02X%02X%02X%02X%02X\n",
 800049a:	9201      	str	r2, [sp, #4]
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	4623      	mov	r3, r4
 80004a0:	4602      	mov	r2, r0
 80004a2:	4808      	ldr	r0, [pc, #32]	@ (80004c4 <NRF24_PrintReceiverRegisters+0xb0>)
 80004a4:	f003 f926 	bl	80036f4 <iprintf>
}
 80004a8:	bf00      	nop
 80004aa:	3714      	adds	r7, #20
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd90      	pop	{r4, r7, pc}
 80004b0:	080044a4 	.word	0x080044a4
 80004b4:	080044c0 	.word	0x080044c0
 80004b8:	080044e0 	.word	0x080044e0
 80004bc:	080044fc 	.word	0x080044fc
 80004c0:	0800451c 	.word	0x0800451c
 80004c4:	08004558 	.word	0x08004558

080004c8 <NRF24_Init>:




void NRF24_Init (void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80004cc:	f7ff fefa 	bl	80002c4 <CE_Disable>


	// reset everything
//	nrf24_reset (0);

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80004d0:	2100      	movs	r1, #0
 80004d2:	2000      	movs	r0, #0
 80004d4:	f7ff ff00 	bl	80002d8 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80004d8:	2100      	movs	r1, #0
 80004da:	2001      	movs	r0, #1
 80004dc:	f7ff fefc 	bl	80002d8 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80004e0:	2100      	movs	r1, #0
 80004e2:	2002      	movs	r0, #2
 80004e4:	f7ff fef8 	bl	80002d8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80004e8:	2103      	movs	r1, #3
 80004ea:	2003      	movs	r0, #3
 80004ec:	f7ff fef4 	bl	80002d8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80004f0:	2100      	movs	r1, #0
 80004f2:	2004      	movs	r0, #4
 80004f4:	f7ff fef0 	bl	80002d8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80004f8:	2100      	movs	r1, #0
 80004fa:	2005      	movs	r0, #5
 80004fc:	f7ff feec 	bl	80002d8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000500:	210e      	movs	r1, #14
 8000502:	2006      	movs	r0, #6
 8000504:	f7ff fee8 	bl	80002d8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000508:	f7ff fed2 	bl	80002b0 <CE_Enable>

}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <NRF24_RxMode>:




void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800051c:	f7ff fed2 	bl	80002c4 <CE_Disable>

//	nrf24_reset (STATUS);

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000520:	78fb      	ldrb	r3, [r7, #3]
 8000522:	4619      	mov	r1, r3
 8000524:	2005      	movs	r0, #5
 8000526:	f7ff fed7 	bl	80002d8 <nrf24_WriteReg>

	// select data pipe 1 (instead of Pipe 2, if using Pipe 1 for data)
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800052a:	2002      	movs	r0, #2
 800052c:	f7ff ff1c 	bl	8000368 <nrf24_ReadReg>
 8000530:	4603      	mov	r3, r0
 8000532:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1 << 1);  // enable Pipe 1 instead of Pipe 2
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	f043 0302 	orr.w	r3, r3, #2
 800053a:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	4619      	mov	r1, r3
 8000540:	2002      	movs	r0, #2
 8000542:	f7ff fec9 	bl	80002d8 <nrf24_WriteReg>

	/* Write the address for Data Pipe 1 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe 1 address
 8000546:	2205      	movs	r2, #5
 8000548:	6879      	ldr	r1, [r7, #4]
 800054a:	200b      	movs	r0, #11
 800054c:	f7ff fee6 	bl	800031c <nrf24_WriteRegMulti>

	// Set the payload size for Pipe 1 (32 bytes)
	nrf24_WriteReg (RX_PW_P1, 32);  // Set the payload size for pipe 1
 8000550:	2120      	movs	r1, #32
 8000552:	2012      	movs	r0, #18
 8000554:	f7ff fec0 	bl	80002d8 <nrf24_WriteReg>

	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000558:	2000      	movs	r0, #0
 800055a:	f7ff ff05 	bl	8000368 <nrf24_ReadReg>
 800055e:	4603      	mov	r3, r0
 8000560:	73bb      	strb	r3, [r7, #14]
	config = config | (1 << 1) | (1 << 0);  // Power up and set PRIM_RX
 8000562:	7bbb      	ldrb	r3, [r7, #14]
 8000564:	f043 0303 	orr.w	r3, r3, #3
 8000568:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 800056a:	7bbb      	ldrb	r3, [r7, #14]
 800056c:	4619      	mov	r1, r3
 800056e:	2000      	movs	r0, #0
 8000570:	f7ff feb2 	bl	80002d8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000574:	f7ff fe9c 	bl	80002b0 <CE_Enable>
}
 8000578:	bf00      	nop
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <isDataAvailable>:



//
uint8_t isDataAvailable (int pipenum)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000588:	2007      	movs	r0, #7
 800058a:	f7ff feed 	bl	8000368 <nrf24_ReadReg>
 800058e:	4603      	mov	r3, r0
 8000590:	73fb      	strb	r3, [r7, #15]

    if ((status & (1 << 6)) && (((status >> 1) & 0x07) == pipenum))
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00d      	beq.n	80005b8 <isDataAvailable+0x38>
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	085b      	lsrs	r3, r3, #1
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d105      	bne.n	80005b8 <isDataAvailable+0x38>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 80005ac:	2140      	movs	r1, #64	@ 0x40
 80005ae:	2007      	movs	r0, #7
 80005b0:	f7ff fe92 	bl	80002d8 <nrf24_WriteReg>

		return 1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	e000      	b.n	80005ba <isDataAvailable+0x3a>
	}

	return 0;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <NRF24_Receive>:



void NRF24_Receive (uint8_t *data)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 80005d0:	f7ff fe56 	bl	8000280 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 80005d4:	2361      	movs	r3, #97	@ 0x61
 80005d6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80005d8:	f107 010f 	add.w	r1, r7, #15
 80005dc:	2364      	movs	r3, #100	@ 0x64
 80005de:	2201      	movs	r2, #1
 80005e0:	480c      	ldr	r0, [pc, #48]	@ (8000614 <NRF24_Receive+0x50>)
 80005e2:	f002 f93a 	bl	800285a <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 80005e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ea:	2220      	movs	r2, #32
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	4809      	ldr	r0, [pc, #36]	@ (8000614 <NRF24_Receive+0x50>)
 80005f0:	f002 faa8 	bl	8002b44 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 80005f4:	f7ff fe50 	bl	8000298 <CS_UnSelect>

	HAL_Delay(1);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 fbb3 	bl	8000d64 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 80005fe:	23e2      	movs	r3, #226	@ 0xe2
 8000600:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff feef 	bl	80003e8 <nrfsendCmd>
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	2000008c 	.word	0x2000008c

08000618 <NRF24_ReadAll>:



void NRF24_ReadAll (uint8_t *data)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	e00c      	b.n	8000640 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	b2d9      	uxtb	r1, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	18d4      	adds	r4, r2, r3
 8000630:	4608      	mov	r0, r1
 8000632:	f7ff fe99 	bl	8000368 <nrf24_ReadReg>
 8000636:	4603      	mov	r3, r0
 8000638:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	3301      	adds	r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2b09      	cmp	r3, #9
 8000644:	ddef      	ble.n	8000626 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	330a      	adds	r3, #10
 800064a:	2205      	movs	r2, #5
 800064c:	4619      	mov	r1, r3
 800064e:	200a      	movs	r0, #10
 8000650:	f7ff feaa 	bl	80003a8 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	330f      	adds	r3, #15
 8000658:	2205      	movs	r2, #5
 800065a:	4619      	mov	r1, r3
 800065c:	200b      	movs	r0, #11
 800065e:	f7ff fea3 	bl	80003a8 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f103 0414 	add.w	r4, r3, #20
 8000668:	200c      	movs	r0, #12
 800066a:	f7ff fe7d 	bl	8000368 <nrf24_ReadReg>
 800066e:	4603      	mov	r3, r0
 8000670:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f103 0415 	add.w	r4, r3, #21
 8000678:	200d      	movs	r0, #13
 800067a:	f7ff fe75 	bl	8000368 <nrf24_ReadReg>
 800067e:	4603      	mov	r3, r0
 8000680:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f103 0416 	add.w	r4, r3, #22
 8000688:	200e      	movs	r0, #14
 800068a:	f7ff fe6d 	bl	8000368 <nrf24_ReadReg>
 800068e:	4603      	mov	r3, r0
 8000690:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f103 0417 	add.w	r4, r3, #23
 8000698:	200f      	movs	r0, #15
 800069a:	f7ff fe65 	bl	8000368 <nrf24_ReadReg>
 800069e:	4603      	mov	r3, r0
 80006a0:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3318      	adds	r3, #24
 80006a6:	2205      	movs	r2, #5
 80006a8:	4619      	mov	r1, r3
 80006aa:	200a      	movs	r0, #10
 80006ac:	f7ff fe7c 	bl	80003a8 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 80006b0:	231d      	movs	r3, #29
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	e00e      	b.n	80006d4 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	3b0c      	subs	r3, #12
 80006bc:	b2d9      	uxtb	r1, r3
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	18d4      	adds	r4, r2, r3
 80006c4:	4608      	mov	r0, r1
 80006c6:	f7ff fe4f 	bl	8000368 <nrf24_ReadReg>
 80006ca:	4603      	mov	r3, r0
 80006cc:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	2b25      	cmp	r3, #37	@ 0x25
 80006d8:	dded      	ble.n	80006b6 <NRF24_ReadAll+0x9e>
	}

}
 80006da:	bf00      	nop
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd90      	pop	{r4, r7, pc}

080006e4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006f0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80006f4:	f003 0301 	and.w	r3, r3, #1
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d013      	beq.n	8000724 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000700:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000704:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000708:	2b00      	cmp	r3, #0
 800070a:	d00b      	beq.n	8000724 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800070c:	e000      	b.n	8000710 <ITM_SendChar+0x2c>
    {
      __NOP();
 800070e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000710:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d0f9      	beq.n	800070e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800071a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000724:	687b      	ldr	r3, [r7, #4]
}
 8000726:	4618      	mov	r0, r3
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
	...

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000738:	f000 faae 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073c:	f000 f82e 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000740:	f000 f8ae 	bl	80008a0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000744:	f000 f86e 	bl	8000824 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  NRF24_Init();
 8000748:	f7ff febe 	bl	80004c8 <NRF24_Init>


  NRF24_RxMode(RxAddress_P1, 10);
 800074c:	210a      	movs	r1, #10
 800074e:	480e      	ldr	r0, [pc, #56]	@ (8000788 <main+0x54>)
 8000750:	f7ff fede 	bl	8000510 <NRF24_RxMode>

  NRF24_ReadAll(data);
 8000754:	480d      	ldr	r0, [pc, #52]	@ (800078c <main+0x58>)
 8000756:	f7ff ff5f 	bl	8000618 <NRF24_ReadAll>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("Wassup\n");
 800075a:	480d      	ldr	r0, [pc, #52]	@ (8000790 <main+0x5c>)
 800075c:	f003 f832 	bl	80037c4 <puts>
	       NRF24_PrintReceiverRegisters();
 8000760:	f7ff fe58 	bl	8000414 <NRF24_PrintReceiverRegisters>

	 	  if (isDataAvailable(1) == 1)
 8000764:	2001      	movs	r0, #1
 8000766:	f7ff ff0b 	bl	8000580 <isDataAvailable>
 800076a:	4603      	mov	r3, r0
 800076c:	2b01      	cmp	r3, #1
 800076e:	d1f4      	bne.n	800075a <main+0x26>
	 	 	  {
	 		  NRF24_Receive(RxData);
 8000770:	4808      	ldr	r0, [pc, #32]	@ (8000794 <main+0x60>)
 8000772:	f7ff ff27 	bl	80005c4 <NRF24_Receive>

	    		// Ensure the received data is null-terminated to be printed correctly
	    		    RxData[31] = '\0';  // Assuming NRF24_Receive fills the entire buffer, add null terminator
 8000776:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <main+0x60>)
 8000778:	2200      	movs	r2, #0
 800077a:	77da      	strb	r2, [r3, #31]

	    		    // Print received data using printf
	    		    printf("%s", RxData);
 800077c:	4905      	ldr	r1, [pc, #20]	@ (8000794 <main+0x60>)
 800077e:	4806      	ldr	r0, [pc, #24]	@ (8000798 <main+0x64>)
 8000780:	f002 ffb8 	bl	80036f4 <iprintf>
	  printf("Wassup\n");
 8000784:	e7e9      	b.n	800075a <main+0x26>
 8000786:	bf00      	nop
 8000788:	20000000 	.word	0x20000000
 800078c:	20000110 	.word	0x20000110
 8000790:	080045dc 	.word	0x080045dc
 8000794:	200000f0 	.word	0x200000f0
 8000798:	080045e4 	.word	0x080045e4

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b090      	sub	sp, #64	@ 0x40
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0318 	add.w	r3, r7, #24
 80007a6:	2228      	movs	r2, #40	@ 0x28
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f003 f8ea 	bl	8003984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007be:	2302      	movs	r3, #2
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c2:	2301      	movs	r3, #1
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c6:	2310      	movs	r3, #16
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007d4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0318 	add.w	r3, r7, #24
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fd6a 	bl	80012bc <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80007ee:	f000 f8f3 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2302      	movs	r3, #2
 80007f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2102      	movs	r1, #2
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fda9 	bl	8002364 <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000818:	f000 f8de 	bl	80009d8 <Error_Handler>
  }
}
 800081c:	bf00      	nop
 800081e:	3740      	adds	r7, #64	@ 0x40
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000828:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <MX_SPI2_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	@ (800089c <MX_SPI2_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_SPI2_Init+0x74>)
 8000830:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000834:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <MX_SPI2_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800083c:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <MX_SPI2_Init+0x74>)
 800083e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000842:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_SPI2_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084a:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <MX_SPI2_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_SPI2_Init+0x74>)
 8000852:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000856:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_SPI2_Init+0x74>)
 800085a:	2210      	movs	r2, #16
 800085c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_SPI2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_SPI2_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_SPI2_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_SPI2_Init+0x74>)
 8000872:	2207      	movs	r2, #7
 8000874:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_SPI2_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_SPI2_Init+0x74>)
 800087e:	2208      	movs	r2, #8
 8000880:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_SPI2_Init+0x74>)
 8000884:	f001 ff3e 	bl	8002704 <HAL_SPI_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 f8a3 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2000008c 	.word	0x2000008c
 800089c:	40003800 	.word	0x40003800

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b38      	ldr	r3, [pc, #224]	@ (8000998 <MX_GPIO_Init+0xf8>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a37      	ldr	r2, [pc, #220]	@ (8000998 <MX_GPIO_Init+0xf8>)
 80008bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008c0:	6153      	str	r3, [r2, #20]
 80008c2:	4b35      	ldr	r3, [pc, #212]	@ (8000998 <MX_GPIO_Init+0xf8>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ce:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <MX_GPIO_Init+0xf8>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	4a31      	ldr	r2, [pc, #196]	@ (8000998 <MX_GPIO_Init+0xf8>)
 80008d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008d8:	6153      	str	r3, [r2, #20]
 80008da:	4b2f      	ldr	r3, [pc, #188]	@ (8000998 <MX_GPIO_Init+0xf8>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000998 <MX_GPIO_Init+0xf8>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4a2b      	ldr	r2, [pc, #172]	@ (8000998 <MX_GPIO_Init+0xf8>)
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f0:	6153      	str	r3, [r2, #20]
 80008f2:	4b29      	ldr	r3, [pc, #164]	@ (8000998 <MX_GPIO_Init+0xf8>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <MX_GPIO_Init+0xf8>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4a25      	ldr	r2, [pc, #148]	@ (8000998 <MX_GPIO_Init+0xf8>)
 8000904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000908:	6153      	str	r3, [r2, #20]
 800090a:	4b23      	ldr	r3, [pc, #140]	@ (8000998 <MX_GPIO_Init+0xf8>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Chip_SelecT_GPIO_Port, Chip_SelecT_Pin, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	2110      	movs	r1, #16
 800091a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091e:	f000 fcb5 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2120      	movs	r1, #32
 8000926:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800092a:	f000 fcaf 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Chip_Enable_GPIO_Port, Chip_Enable_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2120      	movs	r1, #32
 8000932:	481a      	ldr	r0, [pc, #104]	@ (800099c <MX_GPIO_Init+0xfc>)
 8000934:	f000 fcaa 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Chip_SelecT_Pin */
  GPIO_InitStruct.Pin = Chip_SelecT_Pin;
 8000938:	2310      	movs	r3, #16
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000940:	2301      	movs	r3, #1
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Chip_SelecT_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000952:	f000 fb11 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000956:	2320      	movs	r3, #32
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000970:	f000 fb02 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : Chip_Enable_Pin */
  GPIO_InitStruct.Pin = Chip_Enable_Pin;
 8000974:	2320      	movs	r3, #32
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Chip_Enable_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4804      	ldr	r0, [pc, #16]	@ (800099c <MX_GPIO_Init+0xfc>)
 800098c:	f000 faf4 	bl	8000f78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	@ 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40021000 	.word	0x40021000
 800099c:	48000800 	.word	0x48000800

080009a0 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	e009      	b.n	80009c6 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	60ba      	str	r2, [r7, #8]
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fe92 	bl	80006e4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	3301      	adds	r3, #1
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	dbf1      	blt.n	80009b2 <_write+0x12>
  }
  return len;
 80009ce:	687b      	ldr	r3, [r7, #4]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <Error_Handler+0x8>

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <HAL_MspInit+0x44>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000a28 <HAL_MspInit+0x44>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <HAL_MspInit+0x44>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4a08      	ldr	r2, [pc, #32]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0c:	61d3      	str	r3, [r2, #28]
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a1a:	2007      	movs	r0, #7
 8000a1c:	f000 fa78 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	@ 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a17      	ldr	r2, [pc, #92]	@ (8000aa8 <HAL_SPI_MspInit+0x7c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d128      	bne.n	8000aa0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a4e:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <HAL_SPI_MspInit+0x80>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	4a16      	ldr	r2, [pc, #88]	@ (8000aac <HAL_SPI_MspInit+0x80>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a58:	61d3      	str	r3, [r2, #28]
 8000a5a:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <HAL_SPI_MspInit+0x80>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <HAL_SPI_MspInit+0x80>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a10      	ldr	r2, [pc, #64]	@ (8000aac <HAL_SPI_MspInit+0x80>)
 8000a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a70:	6153      	str	r3, [r2, #20]
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <HAL_SPI_MspInit+0x80>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a7e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a90:	2305      	movs	r3, #5
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <HAL_SPI_MspInit+0x84>)
 8000a9c:	f000 fa6c 	bl	8000f78 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	@ 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40003800 	.word	0x40003800
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	48000400 	.word	0x48000400

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <NMI_Handler+0x4>

08000abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <MemManage_Handler+0x4>

08000acc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0a:	f000 f90b 	bl	8000d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b086      	sub	sp, #24
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	60f8      	str	r0, [r7, #12]
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	e00a      	b.n	8000b3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b24:	f3af 8000 	nop.w
 8000b28:	4601      	mov	r1, r0
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	1c5a      	adds	r2, r3, #1
 8000b2e:	60ba      	str	r2, [r7, #8]
 8000b30:	b2ca      	uxtb	r2, r1
 8000b32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	3301      	adds	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	697a      	ldr	r2, [r7, #20]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	dbf0      	blt.n	8000b24 <_read+0x12>
  }

  return len;
 8000b42:	687b      	ldr	r3, [r7, #4]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b74:	605a      	str	r2, [r3, #4]
  return 0;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <_isatty>:

int _isatty(int file)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b8c:	2301      	movs	r3, #1
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b085      	sub	sp, #20
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bbc:	4a14      	ldr	r2, [pc, #80]	@ (8000c10 <_sbrk+0x5c>)
 8000bbe:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <_sbrk+0x60>)
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc8:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <_sbrk+0x64>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	@ (8000c1c <_sbrk+0x68>)
 8000bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d207      	bcs.n	8000bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be4:	f002 ff1c 	bl	8003a20 <__errno>
 8000be8:	4603      	mov	r3, r0
 8000bea:	220c      	movs	r2, #12
 8000bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bf2:	e009      	b.n	8000c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf4:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfa:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	4a05      	ldr	r2, [pc, #20]	@ (8000c18 <_sbrk+0x64>)
 8000c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c06:	68fb      	ldr	r3, [r7, #12]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20010000 	.word	0x20010000
 8000c14:	00000400 	.word	0x00000400
 8000c18:	20000144 	.word	0x20000144
 8000c1c:	20000298 	.word	0x20000298

08000c20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c7c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c48:	f7ff ffea 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c4c:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c4e:	490d      	ldr	r1, [pc, #52]	@ (8000c84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <LoopForever+0xe>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c64:	4c0a      	ldr	r4, [pc, #40]	@ (8000c90 <LoopForever+0x16>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c72:	f002 fedb 	bl	8003a2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c76:	f7ff fd5d 	bl	8000734 <main>

08000c7a <LoopForever>:

LoopForever:
    b LoopForever
 8000c7a:	e7fe      	b.n	8000c7a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c7c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c88:	0800465c 	.word	0x0800465c
  ldr r2, =_sbss
 8000c8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c90:	20000298 	.word	0x20000298

08000c94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC1_2_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <HAL_Init+0x28>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	@ (8000cc0 <HAL_Init+0x28>)
 8000ca2:	f043 0310 	orr.w	r3, r3, #16
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f931 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 f808 	bl	8000cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb4:	f7ff fe96 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40022000 	.word	0x40022000

08000cc4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <HAL_InitTick+0x54>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <HAL_InitTick+0x58>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f93b 	bl	8000f5e <HAL_SYSTICK_Config>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00e      	b.n	8000d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	d80a      	bhi.n	8000d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d00:	f000 f911 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d04:	4a06      	ldr	r2, [pc, #24]	@ (8000d20 <HAL_InitTick+0x5c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e000      	b.n	8000d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000010 	.word	0x20000010
 8000d20:	2000000c 	.word	0x2000000c

08000d24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <HAL_IncTick+0x20>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <HAL_IncTick+0x24>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <HAL_IncTick+0x24>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000010 	.word	0x20000010
 8000d48:	20000148 	.word	0x20000148

08000d4c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d50:	4b03      	ldr	r3, [pc, #12]	@ (8000d60 <HAL_GetTick+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000148 	.word	0x20000148

08000d64 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d6c:	f7ff ffee 	bl	8000d4c <HAL_GetTick>
 8000d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d7c:	d005      	beq.n	8000d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <HAL_Delay+0x44>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d8a:	bf00      	nop
 8000d8c:	f7ff ffde 	bl	8000d4c <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d8f7      	bhi.n	8000d8c <HAL_Delay+0x28>
  {
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000010 	.word	0x20000010

08000dac <__NVIC_SetPriorityGrouping>:
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_SetPriority>:
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	@ (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	@ (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	@ 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff47 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff5c 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff8e 	bl	8000e64 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ffb0 	bl	8000ecc <SysTick_Config>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f86:	e160      	b.n	800124a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 8152 	beq.w	8001244 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d005      	beq.n	8000fb8 <HAL_GPIO_Init+0x40>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d130      	bne.n	800101a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fee:	2201      	movs	r2, #1
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	f003 0201 	and.w	r2, r3, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b03      	cmp	r3, #3
 8001024:	d017      	beq.n	8001056 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d123      	bne.n	80010aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	691a      	ldr	r2, [r3, #16]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	6939      	ldr	r1, [r7, #16]
 80010a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0203 	and.w	r2, r3, #3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 80ac 	beq.w	8001244 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001268 <HAL_GPIO_Init+0x2f0>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001268 <HAL_GPIO_Init+0x2f0>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b5b      	ldr	r3, [pc, #364]	@ (8001268 <HAL_GPIO_Init+0x2f0>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001104:	4a59      	ldr	r2, [pc, #356]	@ (800126c <HAL_GPIO_Init+0x2f4>)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800112e:	d025      	beq.n	800117c <HAL_GPIO_Init+0x204>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a4f      	ldr	r2, [pc, #316]	@ (8001270 <HAL_GPIO_Init+0x2f8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d01f      	beq.n	8001178 <HAL_GPIO_Init+0x200>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a4e      	ldr	r2, [pc, #312]	@ (8001274 <HAL_GPIO_Init+0x2fc>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d019      	beq.n	8001174 <HAL_GPIO_Init+0x1fc>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a4d      	ldr	r2, [pc, #308]	@ (8001278 <HAL_GPIO_Init+0x300>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d013      	beq.n	8001170 <HAL_GPIO_Init+0x1f8>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a4c      	ldr	r2, [pc, #304]	@ (800127c <HAL_GPIO_Init+0x304>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d00d      	beq.n	800116c <HAL_GPIO_Init+0x1f4>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a4b      	ldr	r2, [pc, #300]	@ (8001280 <HAL_GPIO_Init+0x308>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d007      	beq.n	8001168 <HAL_GPIO_Init+0x1f0>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a4a      	ldr	r2, [pc, #296]	@ (8001284 <HAL_GPIO_Init+0x30c>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d101      	bne.n	8001164 <HAL_GPIO_Init+0x1ec>
 8001160:	2306      	movs	r3, #6
 8001162:	e00c      	b.n	800117e <HAL_GPIO_Init+0x206>
 8001164:	2307      	movs	r3, #7
 8001166:	e00a      	b.n	800117e <HAL_GPIO_Init+0x206>
 8001168:	2305      	movs	r3, #5
 800116a:	e008      	b.n	800117e <HAL_GPIO_Init+0x206>
 800116c:	2304      	movs	r3, #4
 800116e:	e006      	b.n	800117e <HAL_GPIO_Init+0x206>
 8001170:	2303      	movs	r3, #3
 8001172:	e004      	b.n	800117e <HAL_GPIO_Init+0x206>
 8001174:	2302      	movs	r3, #2
 8001176:	e002      	b.n	800117e <HAL_GPIO_Init+0x206>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_GPIO_Init+0x206>
 800117c:	2300      	movs	r3, #0
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	f002 0203 	and.w	r2, r2, #3
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	4093      	lsls	r3, r2
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800118e:	4937      	ldr	r1, [pc, #220]	@ (800126c <HAL_GPIO_Init+0x2f4>)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119c:	4b3a      	ldr	r3, [pc, #232]	@ (8001288 <HAL_GPIO_Init+0x310>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011c0:	4a31      	ldr	r2, [pc, #196]	@ (8001288 <HAL_GPIO_Init+0x310>)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c6:	4b30      	ldr	r3, [pc, #192]	@ (8001288 <HAL_GPIO_Init+0x310>)
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011ea:	4a27      	ldr	r2, [pc, #156]	@ (8001288 <HAL_GPIO_Init+0x310>)
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f0:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <HAL_GPIO_Init+0x310>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001214:	4a1c      	ldr	r2, [pc, #112]	@ (8001288 <HAL_GPIO_Init+0x310>)
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800121a:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <HAL_GPIO_Init+0x310>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800123e:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <HAL_GPIO_Init+0x310>)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3301      	adds	r3, #1
 8001248:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	fa22 f303 	lsr.w	r3, r2, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	f47f ae97 	bne.w	8000f88 <HAL_GPIO_Init+0x10>
  }
}
 800125a:	bf00      	nop
 800125c:	bf00      	nop
 800125e:	371c      	adds	r7, #28
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	40021000 	.word	0x40021000
 800126c:	40010000 	.word	0x40010000
 8001270:	48000400 	.word	0x48000400
 8001274:	48000800 	.word	0x48000800
 8001278:	48000c00 	.word	0x48000c00
 800127c:	48001000 	.word	0x48001000
 8001280:	48001400 	.word	0x48001400
 8001284:	48001800 	.word	0x48001800
 8001288:	40010400 	.word	0x40010400

0800128c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
 8001298:	4613      	mov	r3, r2
 800129a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800129c:	787b      	ldrb	r3, [r7, #1]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	f001 b83a 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 816f 	beq.w	80015d6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012f8:	4bb5      	ldr	r3, [pc, #724]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	2b04      	cmp	r3, #4
 8001302:	d00c      	beq.n	800131e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001304:	4bb2      	ldr	r3, [pc, #712]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b08      	cmp	r3, #8
 800130e:	d15c      	bne.n	80013ca <HAL_RCC_OscConfig+0x10e>
 8001310:	4baf      	ldr	r3, [pc, #700]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800131c:	d155      	bne.n	80013ca <HAL_RCC_OscConfig+0x10e>
 800131e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001322:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001332:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001336:	fab3 f383 	clz	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	095b      	lsrs	r3, r3, #5
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b01      	cmp	r3, #1
 8001348:	d102      	bne.n	8001350 <HAL_RCC_OscConfig+0x94>
 800134a:	4ba1      	ldr	r3, [pc, #644]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	e015      	b.n	800137c <HAL_RCC_OscConfig+0xc0>
 8001350:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001354:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001358:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001364:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001368:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800136c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001370:	fa93 f3a3 	rbit	r3, r3
 8001374:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001378:	4b95      	ldr	r3, [pc, #596]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 800137a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001380:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001384:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001388:	fa92 f2a2 	rbit	r2, r2
 800138c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001390:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001394:	fab2 f282 	clz	r2, r2
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	f042 0220 	orr.w	r2, r2, #32
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	f002 021f 	and.w	r2, r2, #31
 80013a4:	2101      	movs	r1, #1
 80013a6:	fa01 f202 	lsl.w	r2, r1, r2
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 8111 	beq.w	80015d4 <HAL_RCC_OscConfig+0x318>
 80013b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f040 8108 	bne.w	80015d4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	f000 bfc6 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x12e>
 80013dc:	4b7c      	ldr	r3, [pc, #496]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a7b      	ldr	r2, [pc, #492]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 80013e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	e036      	b.n	8001458 <HAL_RCC_OscConfig+0x19c>
 80013ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0x158>
 80013fa:	4b75      	ldr	r3, [pc, #468]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a74      	ldr	r2, [pc, #464]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b72      	ldr	r3, [pc, #456]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a71      	ldr	r2, [pc, #452]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 800140c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e021      	b.n	8001458 <HAL_RCC_OscConfig+0x19c>
 8001414:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001418:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x184>
 8001426:	4b6a      	ldr	r3, [pc, #424]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a69      	ldr	r2, [pc, #420]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b67      	ldr	r3, [pc, #412]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a66      	ldr	r2, [pc, #408]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0x19c>
 8001440:	4b63      	ldr	r3, [pc, #396]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a62      	ldr	r2, [pc, #392]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b60      	ldr	r3, [pc, #384]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a5f      	ldr	r2, [pc, #380]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001456:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001458:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800145c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d059      	beq.n	800151c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fc70 	bl	8000d4c <HAL_GetTick>
 800146c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001470:	e00a      	b.n	8001488 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001472:	f7ff fc6b 	bl	8000d4c <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	@ 0x64
 8001480:	d902      	bls.n	8001488 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	f000 bf67 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 8001488:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800148c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001494:	fa93 f3a3 	rbit	r3, r3
 8001498:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800149c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a0:	fab3 f383 	clz	r3, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d102      	bne.n	80014ba <HAL_RCC_OscConfig+0x1fe>
 80014b4:	4b46      	ldr	r3, [pc, #280]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	e015      	b.n	80014e6 <HAL_RCC_OscConfig+0x22a>
 80014ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014be:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80014c6:	fa93 f3a3 	rbit	r3, r3
 80014ca:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80014ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014d2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80014d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80014da:	fa93 f3a3 	rbit	r3, r3
 80014de:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80014e2:	4b3b      	ldr	r3, [pc, #236]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 80014e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014ea:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80014ee:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80014f2:	fa92 f2a2 	rbit	r2, r2
 80014f6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80014fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80014fe:	fab2 f282 	clz	r2, r2
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	f042 0220 	orr.w	r2, r2, #32
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	f002 021f 	and.w	r2, r2, #31
 800150e:	2101      	movs	r1, #1
 8001510:	fa01 f202 	lsl.w	r2, r1, r2
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0ab      	beq.n	8001472 <HAL_RCC_OscConfig+0x1b6>
 800151a:	e05c      	b.n	80015d6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fc16 	bl	8000d4c <HAL_GetTick>
 8001520:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001524:	e00a      	b.n	800153c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001526:	f7ff fc11 	bl	8000d4c <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	@ 0x64
 8001534:	d902      	bls.n	800153c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	f000 bf0d 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 800153c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001540:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001548:	fa93 f3a3 	rbit	r3, r3
 800154c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001550:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001554:	fab3 f383 	clz	r3, r3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	b2db      	uxtb	r3, r3
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b01      	cmp	r3, #1
 8001566:	d102      	bne.n	800156e <HAL_RCC_OscConfig+0x2b2>
 8001568:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	e015      	b.n	800159a <HAL_RCC_OscConfig+0x2de>
 800156e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001572:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001576:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800157a:	fa93 f3a3 	rbit	r3, r3
 800157e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001582:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001586:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800158a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800158e:	fa93 f3a3 	rbit	r3, r3
 8001592:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <HAL_RCC_OscConfig+0x314>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800159e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80015a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80015a6:	fa92 f2a2 	rbit	r2, r2
 80015aa:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80015ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80015b2:	fab2 f282 	clz	r2, r2
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	f042 0220 	orr.w	r2, r2, #32
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	f002 021f 	and.w	r2, r2, #31
 80015c2:	2101      	movs	r1, #1
 80015c4:	fa01 f202 	lsl.w	r2, r1, r2
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1ab      	bne.n	8001526 <HAL_RCC_OscConfig+0x26a>
 80015ce:	e002      	b.n	80015d6 <HAL_RCC_OscConfig+0x31a>
 80015d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 817f 	beq.w	80018ea <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015ec:	4ba7      	ldr	r3, [pc, #668]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00c      	beq.n	8001612 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015f8:	4ba4      	ldr	r3, [pc, #656]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b08      	cmp	r3, #8
 8001602:	d173      	bne.n	80016ec <HAL_RCC_OscConfig+0x430>
 8001604:	4ba1      	ldr	r3, [pc, #644]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800160c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001610:	d16c      	bne.n	80016ec <HAL_RCC_OscConfig+0x430>
 8001612:	2302      	movs	r3, #2
 8001614:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001618:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800161c:	fa93 f3a3 	rbit	r3, r3
 8001620:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001624:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d102      	bne.n	8001642 <HAL_RCC_OscConfig+0x386>
 800163c:	4b93      	ldr	r3, [pc, #588]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	e013      	b.n	800166a <HAL_RCC_OscConfig+0x3ae>
 8001642:	2302      	movs	r3, #2
 8001644:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800164c:	fa93 f3a3 	rbit	r3, r3
 8001650:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001654:	2302      	movs	r3, #2
 8001656:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800165a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001666:	4b89      	ldr	r3, [pc, #548]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 8001668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166a:	2202      	movs	r2, #2
 800166c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001670:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001674:	fa92 f2a2 	rbit	r2, r2
 8001678:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800167c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001680:	fab2 f282 	clz	r2, r2
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	f042 0220 	orr.w	r2, r2, #32
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	f002 021f 	and.w	r2, r2, #31
 8001690:	2101      	movs	r1, #1
 8001692:	fa01 f202 	lsl.w	r2, r1, r2
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00a      	beq.n	80016b2 <HAL_RCC_OscConfig+0x3f6>
 800169c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d002      	beq.n	80016b2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	f000 be52 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b2:	4b76      	ldr	r3, [pc, #472]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	21f8      	movs	r1, #248	@ 0xf8
 80016c8:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80016d0:	fa91 f1a1 	rbit	r1, r1
 80016d4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80016d8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80016dc:	fab1 f181 	clz	r1, r1
 80016e0:	b2c9      	uxtb	r1, r1
 80016e2:	408b      	lsls	r3, r1
 80016e4:	4969      	ldr	r1, [pc, #420]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	e0fe      	b.n	80018ea <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 8088 	beq.w	800180e <HAL_RCC_OscConfig+0x552>
 80016fe:	2301      	movs	r3, #1
 8001700:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001710:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001714:	fab3 f383 	clz	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800171e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	461a      	mov	r2, r3
 8001726:	2301      	movs	r3, #1
 8001728:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff fb0f 	bl	8000d4c <HAL_GetTick>
 800172e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	e00a      	b.n	800174a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001734:	f7ff fb0a 	bl	8000d4c <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d902      	bls.n	800174a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	f000 be06 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800175c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b01      	cmp	r3, #1
 8001772:	d102      	bne.n	800177a <HAL_RCC_OscConfig+0x4be>
 8001774:	4b45      	ldr	r3, [pc, #276]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	e013      	b.n	80017a2 <HAL_RCC_OscConfig+0x4e6>
 800177a:	2302      	movs	r3, #2
 800177c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001784:	fa93 f3a3 	rbit	r3, r3
 8001788:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800178c:	2302      	movs	r3, #2
 800178e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001792:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800179e:	4b3b      	ldr	r3, [pc, #236]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 80017a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a2:	2202      	movs	r2, #2
 80017a4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80017a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80017ac:	fa92 f2a2 	rbit	r2, r2
 80017b0:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80017b4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80017b8:	fab2 f282 	clz	r2, r2
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	f042 0220 	orr.w	r2, r2, #32
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	f002 021f 	and.w	r2, r2, #31
 80017c8:	2101      	movs	r1, #1
 80017ca:	fa01 f202 	lsl.w	r2, r1, r2
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0af      	beq.n	8001734 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d4:	4b2d      	ldr	r3, [pc, #180]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	21f8      	movs	r1, #248	@ 0xf8
 80017ea:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80017f2:	fa91 f1a1 	rbit	r1, r1
 80017f6:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80017fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80017fe:	fab1 f181 	clz	r1, r1
 8001802:	b2c9      	uxtb	r1, r1
 8001804:	408b      	lsls	r3, r1
 8001806:	4921      	ldr	r1, [pc, #132]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 8001808:	4313      	orrs	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
 800180c:	e06d      	b.n	80018ea <HAL_RCC_OscConfig+0x62e>
 800180e:	2301      	movs	r3, #1
 8001810:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001818:	fa93 f3a3 	rbit	r3, r3
 800181c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001820:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800182e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	461a      	mov	r2, r3
 8001836:	2300      	movs	r3, #0
 8001838:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff fa87 	bl	8000d4c <HAL_GetTick>
 800183e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	e00a      	b.n	800185a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001844:	f7ff fa82 	bl	8000d4c <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d902      	bls.n	800185a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	f000 bd7e 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 800185a:	2302      	movs	r3, #2
 800185c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001864:	fa93 f3a3 	rbit	r3, r3
 8001868:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 800186c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_RCC_OscConfig+0x5d4>
 8001884:	4b01      	ldr	r3, [pc, #4]	@ (800188c <HAL_RCC_OscConfig+0x5d0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e016      	b.n	80018b8 <HAL_RCC_OscConfig+0x5fc>
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	2302      	movs	r3, #2
 8001892:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80018a2:	2302      	movs	r3, #2
 80018a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80018a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80018ac:	fa93 f3a3 	rbit	r3, r3
 80018b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80018b4:	4bbf      	ldr	r3, [pc, #764]	@ (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	2202      	movs	r2, #2
 80018ba:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80018be:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80018c2:	fa92 f2a2 	rbit	r2, r2
 80018c6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80018ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80018ce:	fab2 f282 	clz	r2, r2
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	f042 0220 	orr.w	r2, r2, #32
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	f002 021f 	and.w	r2, r2, #31
 80018de:	2101      	movs	r1, #1
 80018e0:	fa01 f202 	lsl.w	r2, r1, r2
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1ac      	bne.n	8001844 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8113 	beq.w	8001b26 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001904:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d07c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x74e>
 8001910:	2301      	movs	r3, #1
 8001912:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800191a:	fa93 f3a3 	rbit	r3, r3
 800191e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001922:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001926:	fab3 f383 	clz	r3, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	4ba2      	ldr	r3, [pc, #648]	@ (8001bb8 <HAL_RCC_OscConfig+0x8fc>)
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	461a      	mov	r2, r3
 8001936:	2301      	movs	r3, #1
 8001938:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193a:	f7ff fa07 	bl	8000d4c <HAL_GetTick>
 800193e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	e00a      	b.n	800195a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fa02 	bl	8000d4c <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d902      	bls.n	800195a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	f000 bcfe 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 800195a:	2302      	movs	r3, #2
 800195c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001964:	fa93 f2a3 	rbit	r2, r3
 8001968:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800197a:	2202      	movs	r2, #2
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001982:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fa93 f2a3 	rbit	r2, r3
 800198c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800199a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800199e:	2202      	movs	r2, #2
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	fa93 f2a3 	rbit	r2, r3
 80019b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80019b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ba:	4b7e      	ldr	r3, [pc, #504]	@ (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 80019bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019c6:	2102      	movs	r1, #2
 80019c8:	6019      	str	r1, [r3, #0]
 80019ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	fa93 f1a3 	rbit	r1, r3
 80019d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80019e0:	6019      	str	r1, [r3, #0]
  return result;
 80019e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	2101      	movs	r1, #1
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d09d      	beq.n	8001944 <HAL_RCC_OscConfig+0x688>
 8001a08:	e08d      	b.n	8001b26 <HAL_RCC_OscConfig+0x86a>
 8001a0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	fa93 f2a3 	rbit	r2, r3
 8001a24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a28:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a2c:	601a      	str	r2, [r3, #0]
  return result;
 8001a2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a32:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a36:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a38:	fab3 f383 	clz	r3, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b5d      	ldr	r3, [pc, #372]	@ (8001bb8 <HAL_RCC_OscConfig+0x8fc>)
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	461a      	mov	r2, r3
 8001a48:	2300      	movs	r3, #0
 8001a4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7ff f97e 	bl	8000d4c <HAL_GetTick>
 8001a50:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a56:	f7ff f979 	bl	8000d4c <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d902      	bls.n	8001a6c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	f000 bc75 	b.w	8002356 <HAL_RCC_OscConfig+0x109a>
 8001a6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a70:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001a74:	2202      	movs	r2, #2
 8001a76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a7c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	fa93 f2a3 	rbit	r2, r3
 8001a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001a98:	2202      	movs	r2, #2
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	fa93 f2a3 	rbit	r2, r3
 8001aaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001abc:	2202      	movs	r2, #2
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001ad6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad8:	4b36      	ldr	r3, [pc, #216]	@ (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 8001ada:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001adc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	6019      	str	r1, [r3, #0]
 8001ae8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	fa93 f1a3 	rbit	r1, r3
 8001af6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001afa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001afe:	6019      	str	r1, [r3, #0]
  return result;
 8001b00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b04:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d197      	bne.n	8001a56 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 81a5 	beq.w	8001e86 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b42:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d116      	bne.n	8001b7c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	4a18      	ldr	r2, [pc, #96]	@ (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b58:	61d3      	str	r3, [r2, #28]
 8001b5a:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <HAL_RCC_OscConfig+0x8f8>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001b62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b74:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b76:	2301      	movs	r3, #1
 8001b78:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <HAL_RCC_OscConfig+0x900>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d121      	bne.n	8001bcc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <HAL_RCC_OscConfig+0x900>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bbc <HAL_RCC_OscConfig+0x900>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b92:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b94:	f7ff f8da 	bl	8000d4c <HAL_GetTick>
 8001b98:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9c:	e010      	b.n	8001bc0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9e:	f7ff f8d5 	bl	8000d4c <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	@ 0x64
 8001bac:	d908      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e3d1      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	10908120 	.word	0x10908120
 8001bbc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	4b8d      	ldr	r3, [pc, #564]	@ (8001df8 <HAL_RCC_OscConfig+0xb3c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0e8      	beq.n	8001b9e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x92e>
 8001bdc:	4b87      	ldr	r3, [pc, #540]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4a86      	ldr	r2, [pc, #536]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6213      	str	r3, [r2, #32]
 8001be8:	e035      	b.n	8001c56 <HAL_RCC_OscConfig+0x99a>
 8001bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x958>
 8001bfa:	4b80      	ldr	r3, [pc, #512]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4a7f      	ldr	r2, [pc, #508]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	6213      	str	r3, [r2, #32]
 8001c06:	4b7d      	ldr	r3, [pc, #500]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4a7c      	ldr	r2, [pc, #496]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c0c:	f023 0304 	bic.w	r3, r3, #4
 8001c10:	6213      	str	r3, [r2, #32]
 8001c12:	e020      	b.n	8001c56 <HAL_RCC_OscConfig+0x99a>
 8001c14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c18:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	d10c      	bne.n	8001c3e <HAL_RCC_OscConfig+0x982>
 8001c24:	4b75      	ldr	r3, [pc, #468]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4a74      	ldr	r2, [pc, #464]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c2a:	f043 0304 	orr.w	r3, r3, #4
 8001c2e:	6213      	str	r3, [r2, #32]
 8001c30:	4b72      	ldr	r3, [pc, #456]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4a71      	ldr	r2, [pc, #452]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6213      	str	r3, [r2, #32]
 8001c3c:	e00b      	b.n	8001c56 <HAL_RCC_OscConfig+0x99a>
 8001c3e:	4b6f      	ldr	r3, [pc, #444]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	4a6e      	ldr	r2, [pc, #440]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	6213      	str	r3, [r2, #32]
 8001c4a:	4b6c      	ldr	r3, [pc, #432]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	4a6b      	ldr	r2, [pc, #428]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001c50:	f023 0304 	bic.w	r3, r3, #4
 8001c54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8081 	beq.w	8001d6a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c68:	f7ff f870 	bl	8000d4c <HAL_GetTick>
 8001c6c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	e00b      	b.n	8001c8a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c72:	f7ff f86b 	bl	8000d4c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e365      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 8001c8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c8e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001c92:	2202      	movs	r2, #2
 8001c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c9a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	fa93 f2a3 	rbit	r2, r3
 8001ca4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cbe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	fa93 f2a3 	rbit	r2, r3
 8001cc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ccc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001cd0:	601a      	str	r2, [r3, #0]
  return result;
 8001cd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001cda:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_OscConfig+0xa3a>
 8001cf0:	4b42      	ldr	r3, [pc, #264]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	e013      	b.n	8001d1e <HAL_RCC_OscConfig+0xa62>
 8001cf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cfa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001cfe:	2202      	movs	r2, #2
 8001d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d06:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	fa93 f2a3 	rbit	r2, r3
 8001d10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d14:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	4b38      	ldr	r3, [pc, #224]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d22:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001d26:	2102      	movs	r1, #2
 8001d28:	6011      	str	r1, [r2, #0]
 8001d2a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d2e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	fa92 f1a2 	rbit	r1, r2
 8001d38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d3c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001d40:	6011      	str	r1, [r2, #0]
  return result;
 8001d42:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d46:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	fab2 f282 	clz	r2, r2
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	f002 021f 	and.w	r2, r2, #31
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d084      	beq.n	8001c72 <HAL_RCC_OscConfig+0x9b6>
 8001d68:	e083      	b.n	8001e72 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7fe ffef 	bl	8000d4c <HAL_GetTick>
 8001d6e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d74:	f7fe ffea 	bl	8000d4c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e2e4      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 8001d8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d90:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001d94:	2202      	movs	r2, #2
 8001d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d9c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	fa93 f2a3 	rbit	r2, r3
 8001da6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001daa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001db8:	2202      	movs	r2, #2
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	fa93 f2a3 	rbit	r2, r3
 8001dca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dce:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001dd2:	601a      	str	r2, [r3, #0]
  return result;
 8001dd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ddc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d106      	bne.n	8001e00 <HAL_RCC_OscConfig+0xb44>
 8001df2:	4b02      	ldr	r3, [pc, #8]	@ (8001dfc <HAL_RCC_OscConfig+0xb40>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	e017      	b.n	8001e28 <HAL_RCC_OscConfig+0xb6c>
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e04:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001e08:	2202      	movs	r2, #2
 8001e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e10:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fa93 f2a3 	rbit	r2, r3
 8001e1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	4bb3      	ldr	r3, [pc, #716]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e2c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001e30:	2102      	movs	r1, #2
 8001e32:	6011      	str	r1, [r2, #0]
 8001e34:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e38:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	fa92 f1a2 	rbit	r1, r2
 8001e42:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e46:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001e4a:	6011      	str	r1, [r2, #0]
  return result;
 8001e4c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e50:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	fab2 f282 	clz	r2, r2
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	f002 021f 	and.w	r2, r2, #31
 8001e66:	2101      	movs	r1, #1
 8001e68:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d180      	bne.n	8001d74 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e72:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d105      	bne.n	8001e86 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7a:	4b9e      	ldr	r3, [pc, #632]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4a9d      	ldr	r2, [pc, #628]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001e80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 825e 	beq.w	8002354 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e98:	4b96      	ldr	r3, [pc, #600]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	f000 821f 	beq.w	80022e4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eaa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	f040 8170 	bne.w	8002198 <HAL_RCC_OscConfig+0xedc>
 8001eb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ebc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001ec0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	fa93 f2a3 	rbit	r2, r3
 8001ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001edc:	601a      	str	r2, [r3, #0]
  return result;
 8001ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001ee6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ef2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2300      	movs	r3, #0
 8001efc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7fe ff25 	bl	8000d4c <HAL_GetTick>
 8001f02:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f06:	e009      	b.n	8001f1c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f08:	f7fe ff20 	bl	8000d4c <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e21c      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 8001f1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f20:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	fa93 f2a3 	rbit	r2, r3
 8001f38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001f40:	601a      	str	r2, [r3, #0]
  return result;
 8001f42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f46:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001f4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d102      	bne.n	8001f66 <HAL_RCC_OscConfig+0xcaa>
 8001f60:	4b64      	ldr	r3, [pc, #400]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	e027      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcfa>
 8001f66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f6a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001f6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f78:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	fa93 f2a3 	rbit	r2, r3
 8001f82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f86:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f90:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001f94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f9e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	fa93 f2a3 	rbit	r2, r3
 8001fa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fac:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	4b50      	ldr	r3, [pc, #320]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fba:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001fbe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001fc2:	6011      	str	r1, [r2, #0]
 8001fc4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fc8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	fa92 f1a2 	rbit	r1, r2
 8001fd2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fd6:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001fda:	6011      	str	r1, [r2, #0]
  return result;
 8001fdc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fe0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	fab2 f282 	clz	r2, r2
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	f042 0220 	orr.w	r2, r2, #32
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	f002 021f 	and.w	r2, r2, #31
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d182      	bne.n	8001f08 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002002:	4b3c      	ldr	r3, [pc, #240]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8002004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002006:	f023 020f 	bic.w	r2, r3, #15
 800200a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	4937      	ldr	r1, [pc, #220]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8002018:	4313      	orrs	r3, r2
 800201a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800201c:	4b35      	ldr	r3, [pc, #212]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002024:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002028:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6a19      	ldr	r1, [r3, #32]
 8002030:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002034:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	430b      	orrs	r3, r1
 800203e:	492d      	ldr	r1, [pc, #180]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
 8002044:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002048:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800204c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002056:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	fa93 f2a3 	rbit	r2, r3
 8002060:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002064:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002068:	601a      	str	r2, [r3, #0]
  return result;
 800206a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800206e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002072:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800207e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	461a      	mov	r2, r3
 8002086:	2301      	movs	r3, #1
 8002088:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7fe fe5f 	bl	8000d4c <HAL_GetTick>
 800208e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002092:	e009      	b.n	80020a8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002094:	f7fe fe5a 	bl	8000d4c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e156      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 80020a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ac:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80020b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ba:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	fa93 f2a3 	rbit	r2, r3
 80020c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020c8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80020cc:	601a      	str	r2, [r3, #0]
  return result;
 80020ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80020d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <HAL_RCC_OscConfig+0xe3c>
 80020ec:	4b01      	ldr	r3, [pc, #4]	@ (80020f4 <HAL_RCC_OscConfig+0xe38>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	e02a      	b.n	8002148 <HAL_RCC_OscConfig+0xe8c>
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002100:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800210a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	fa93 f2a3 	rbit	r2, r3
 8002114:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002118:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002122:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002126:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002130:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fa93 f2a3 	rbit	r2, r3
 800213a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800213e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	4b86      	ldr	r3, [pc, #536]	@ (8002360 <HAL_RCC_OscConfig+0x10a4>)
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002148:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800214c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002150:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002154:	6011      	str	r1, [r2, #0]
 8002156:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800215a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	fa92 f1a2 	rbit	r1, r2
 8002164:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002168:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800216c:	6011      	str	r1, [r2, #0]
  return result;
 800216e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002172:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	fab2 f282 	clz	r2, r2
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	f042 0220 	orr.w	r2, r2, #32
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	f002 021f 	and.w	r2, r2, #31
 8002188:	2101      	movs	r1, #1
 800218a:	fa01 f202 	lsl.w	r2, r1, r2
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	f43f af7f 	beq.w	8002094 <HAL_RCC_OscConfig+0xdd8>
 8002196:	e0dd      	b.n	8002354 <HAL_RCC_OscConfig+0x1098>
 8002198:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800219c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80021a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021aa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	fa93 f2a3 	rbit	r2, r3
 80021b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80021bc:	601a      	str	r2, [r3, #0]
  return result;
 80021be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80021c6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021d2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	461a      	mov	r2, r3
 80021da:	2300      	movs	r3, #0
 80021dc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7fe fdb5 	bl	8000d4c <HAL_GetTick>
 80021e2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e6:	e009      	b.n	80021fc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe fdb0 	bl	8000d4c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e0ac      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
 80021fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002200:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002204:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	fa93 f2a3 	rbit	r2, r3
 8002218:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002220:	601a      	str	r2, [r3, #0]
  return result;
 8002222:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002226:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800222a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d102      	bne.n	8002246 <HAL_RCC_OscConfig+0xf8a>
 8002240:	4b47      	ldr	r3, [pc, #284]	@ (8002360 <HAL_RCC_OscConfig+0x10a4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	e027      	b.n	8002296 <HAL_RCC_OscConfig+0xfda>
 8002246:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800224a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800224e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002258:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	fa93 f2a3 	rbit	r2, r3
 8002262:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002266:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002270:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002274:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800227e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	fa93 f2a3 	rbit	r2, r3
 8002288:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800228c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	4b33      	ldr	r3, [pc, #204]	@ (8002360 <HAL_RCC_OscConfig+0x10a4>)
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800229a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800229e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80022a2:	6011      	str	r1, [r2, #0]
 80022a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022a8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	fa92 f1a2 	rbit	r1, r2
 80022b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022b6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80022ba:	6011      	str	r1, [r2, #0]
  return result;
 80022bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022c0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	fab2 f282 	clz	r2, r2
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	f042 0220 	orr.w	r2, r2, #32
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	f002 021f 	and.w	r2, r2, #31
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f202 	lsl.w	r2, r1, r2
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d182      	bne.n	80021e8 <HAL_RCC_OscConfig+0xf2c>
 80022e2:	e037      	b.n	8002354 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e02e      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022f8:	4b19      	ldr	r3, [pc, #100]	@ (8002360 <HAL_RCC_OscConfig+0x10a4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002300:	4b17      	ldr	r3, [pc, #92]	@ (8002360 <HAL_RCC_OscConfig+0x10a4>)
 8002302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002304:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002308:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800230c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002310:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002314:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	429a      	cmp	r2, r3
 800231e:	d117      	bne.n	8002350 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002320:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002324:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002328:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800232c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002334:	429a      	cmp	r2, r3
 8002336:	d10b      	bne.n	8002350 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002338:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800233c:	f003 020f 	and.w	r2, r3, #15
 8002340:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002344:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000

08002364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b09e      	sub	sp, #120	@ 0x78
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e162      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800237c:	4b90      	ldr	r3, [pc, #576]	@ (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d910      	bls.n	80023ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b8d      	ldr	r3, [pc, #564]	@ (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 0207 	bic.w	r2, r3, #7
 8002392:	498b      	ldr	r1, [pc, #556]	@ (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b89      	ldr	r3, [pc, #548]	@ (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e14a      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b8:	4b82      	ldr	r3, [pc, #520]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	497f      	ldr	r1, [pc, #508]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 80dc 	beq.w	8002590 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d13c      	bne.n	800245a <HAL_RCC_ClockConfig+0xf6>
 80023e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023e4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80023ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d102      	bne.n	800240a <HAL_RCC_ClockConfig+0xa6>
 8002404:	4b6f      	ldr	r3, [pc, #444]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	e00f      	b.n	800242a <HAL_RCC_ClockConfig+0xc6>
 800240a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800240e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	667b      	str	r3, [r7, #100]	@ 0x64
 8002418:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800241c:	663b      	str	r3, [r7, #96]	@ 0x60
 800241e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002426:	4b67      	ldr	r3, [pc, #412]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800242e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002430:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002432:	fa92 f2a2 	rbit	r2, r2
 8002436:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002438:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800243a:	fab2 f282 	clz	r2, r2
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	f042 0220 	orr.w	r2, r2, #32
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	f002 021f 	and.w	r2, r2, #31
 800244a:	2101      	movs	r1, #1
 800244c:	fa01 f202 	lsl.w	r2, r1, r2
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d17b      	bne.n	800254e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e0f3      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d13c      	bne.n	80024dc <HAL_RCC_ClockConfig+0x178>
 8002462:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002466:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d102      	bne.n	800248c <HAL_RCC_ClockConfig+0x128>
 8002486:	4b4f      	ldr	r3, [pc, #316]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	e00f      	b.n	80024ac <HAL_RCC_ClockConfig+0x148>
 800248c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002490:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	647b      	str	r3, [r7, #68]	@ 0x44
 800249a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800249e:	643b      	str	r3, [r7, #64]	@ 0x40
 80024a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024a8:	4b46      	ldr	r3, [pc, #280]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 80024aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024b0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80024b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024b4:	fa92 f2a2 	rbit	r2, r2
 80024b8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80024ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024bc:	fab2 f282 	clz	r2, r2
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	f042 0220 	orr.w	r2, r2, #32
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	f002 021f 	and.w	r2, r2, #31
 80024cc:	2101      	movs	r1, #1
 80024ce:	fa01 f202 	lsl.w	r2, r1, r2
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d13a      	bne.n	800254e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0b2      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
 80024dc:	2302      	movs	r3, #2
 80024de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80024e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d102      	bne.n	8002504 <HAL_RCC_ClockConfig+0x1a0>
 80024fe:	4b31      	ldr	r3, [pc, #196]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	e00d      	b.n	8002520 <HAL_RCC_ClockConfig+0x1bc>
 8002504:	2302      	movs	r3, #2
 8002506:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002510:	2302      	movs	r3, #2
 8002512:	623b      	str	r3, [r7, #32]
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	4b29      	ldr	r3, [pc, #164]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	2202      	movs	r2, #2
 8002522:	61ba      	str	r2, [r7, #24]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	fa92 f2a2 	rbit	r2, r2
 800252a:	617a      	str	r2, [r7, #20]
  return result;
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	fab2 f282 	clz	r2, r2
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	f042 0220 	orr.w	r2, r2, #32
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	f002 021f 	and.w	r2, r2, #31
 800253e:	2101      	movs	r1, #1
 8002540:	fa01 f202 	lsl.w	r2, r1, r2
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e079      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254e:	4b1d      	ldr	r3, [pc, #116]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f023 0203 	bic.w	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	491a      	ldr	r1, [pc, #104]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002560:	f7fe fbf4 	bl	8000d4c <HAL_GetTick>
 8002564:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	e00a      	b.n	800257e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002568:	f7fe fbf0 	bl	8000d4c <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e061      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <HAL_RCC_ClockConfig+0x260>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 020c 	and.w	r2, r3, #12
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	429a      	cmp	r2, r3
 800258e:	d1eb      	bne.n	8002568 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002590:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d214      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 0207 	bic.w	r2, r3, #7
 80025a6:	4906      	ldr	r1, [pc, #24]	@ (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b04      	ldr	r3, [pc, #16]	@ (80025c0 <HAL_RCC_ClockConfig+0x25c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e040      	b.n	8002642 <HAL_RCC_ClockConfig+0x2de>
 80025c0:	40022000 	.word	0x40022000
 80025c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d4:	4b1d      	ldr	r3, [pc, #116]	@ (800264c <HAL_RCC_ClockConfig+0x2e8>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	491a      	ldr	r1, [pc, #104]	@ (800264c <HAL_RCC_ClockConfig+0x2e8>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025f2:	4b16      	ldr	r3, [pc, #88]	@ (800264c <HAL_RCC_ClockConfig+0x2e8>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4912      	ldr	r1, [pc, #72]	@ (800264c <HAL_RCC_ClockConfig+0x2e8>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002606:	f000 f829 	bl	800265c <HAL_RCC_GetSysClockFreq>
 800260a:	4601      	mov	r1, r0
 800260c:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <HAL_RCC_ClockConfig+0x2e8>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002614:	22f0      	movs	r2, #240	@ 0xf0
 8002616:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	fa92 f2a2 	rbit	r2, r2
 800261e:	60fa      	str	r2, [r7, #12]
  return result;
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	fab2 f282 	clz	r2, r2
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	40d3      	lsrs	r3, r2
 800262a:	4a09      	ldr	r2, [pc, #36]	@ (8002650 <HAL_RCC_ClockConfig+0x2ec>)
 800262c:	5cd3      	ldrb	r3, [r2, r3]
 800262e:	fa21 f303 	lsr.w	r3, r1, r3
 8002632:	4a08      	ldr	r2, [pc, #32]	@ (8002654 <HAL_RCC_ClockConfig+0x2f0>)
 8002634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002636:	4b08      	ldr	r3, [pc, #32]	@ (8002658 <HAL_RCC_ClockConfig+0x2f4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe fb42 	bl	8000cc4 <HAL_InitTick>
  
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3778      	adds	r7, #120	@ 0x78
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	080045e8 	.word	0x080045e8
 8002654:	20000008 	.word	0x20000008
 8002658:	2000000c 	.word	0x2000000c

0800265c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002676:	4b1f      	ldr	r3, [pc, #124]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d002      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x30>
 8002686:	2b08      	cmp	r3, #8
 8002688:	d003      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x36>
 800268a:	e029      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800268c:	4b1a      	ldr	r3, [pc, #104]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800268e:	613b      	str	r3, [r7, #16]
      break;
 8002690:	e029      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	0c9b      	lsrs	r3, r3, #18
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	4a18      	ldr	r2, [pc, #96]	@ (80026fc <HAL_RCC_GetSysClockFreq+0xa0>)
 800269c:	5cd3      	ldrb	r3, [r2, r3]
 800269e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80026a0:	4b14      	ldr	r3, [pc, #80]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80026a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	4a15      	ldr	r2, [pc, #84]	@ (8002700 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026aa:	5cd3      	ldrb	r3, [r2, r3]
 80026ac:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026b8:	4a0f      	ldr	r2, [pc, #60]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	e007      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026ca:	4a0b      	ldr	r2, [pc, #44]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	fb02 f303 	mul.w	r3, r2, r3
 80026d8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	613b      	str	r3, [r7, #16]
      break;
 80026de:	e002      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026e0:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026e2:	613b      	str	r3, [r7, #16]
      break;
 80026e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e6:	693b      	ldr	r3, [r7, #16]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	371c      	adds	r7, #28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40021000 	.word	0x40021000
 80026f8:	007a1200 	.word	0x007a1200
 80026fc:	080045f8 	.word	0x080045f8
 8002700:	08004608 	.word	0x08004608

08002704 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e09d      	b.n	8002852 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	2b00      	cmp	r3, #0
 800271c:	d108      	bne.n	8002730 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002726:	d009      	beq.n	800273c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
 800272e:	e005      	b.n	800273c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe f968 	bl	8000a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002772:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800277c:	d902      	bls.n	8002784 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	e002      	b.n	800278a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002784:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002788:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002792:	d007      	beq.n	80027a4 <HAL_SPI_Init+0xa0>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800279c:	d002      	beq.n	80027a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027e6:	ea42 0103 	orr.w	r1, r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	0c1b      	lsrs	r3, r3, #16
 8002800:	f003 0204 	and.w	r2, r3, #4
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002820:	ea42 0103 	orr.w	r1, r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002840:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b088      	sub	sp, #32
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	4613      	mov	r3, r2
 8002868:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_SPI_Transmit+0x22>
 8002878:	2302      	movs	r3, #2
 800287a:	e15f      	b.n	8002b3c <HAL_SPI_Transmit+0x2e2>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002884:	f7fe fa62 	bl	8000d4c <HAL_GetTick>
 8002888:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d002      	beq.n	80028a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800289a:	2302      	movs	r3, #2
 800289c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800289e:	e148      	b.n	8002b32 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_SPI_Transmit+0x52>
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028b0:	e13f      	b.n	8002b32 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2203      	movs	r2, #3
 80028b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	88fa      	ldrh	r2, [r7, #6]
 80028ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	88fa      	ldrh	r2, [r7, #6]
 80028d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028fc:	d10f      	bne.n	800291e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800290c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800291c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002928:	2b40      	cmp	r3, #64	@ 0x40
 800292a:	d007      	beq.n	800293c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800293a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002944:	d94f      	bls.n	80029e6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <HAL_SPI_Transmit+0xfa>
 800294e:	8afb      	ldrh	r3, [r7, #22]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d142      	bne.n	80029da <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002958:	881a      	ldrh	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002964:	1c9a      	adds	r2, r3, #2
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002978:	e02f      	b.n	80029da <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b02      	cmp	r3, #2
 8002986:	d112      	bne.n	80029ae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298c:	881a      	ldrh	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002998:	1c9a      	adds	r2, r3, #2
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80029ac:	e015      	b.n	80029da <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029ae:	f7fe f9cd 	bl	8000d4c <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d803      	bhi.n	80029c6 <HAL_SPI_Transmit+0x16c>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029c4:	d102      	bne.n	80029cc <HAL_SPI_Transmit+0x172>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d106      	bne.n	80029da <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80029d8:	e0ab      	b.n	8002b32 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ca      	bne.n	800297a <HAL_SPI_Transmit+0x120>
 80029e4:	e080      	b.n	8002ae8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_SPI_Transmit+0x19a>
 80029ee:	8afb      	ldrh	r3, [r7, #22]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d174      	bne.n	8002ade <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d912      	bls.n	8002a24 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a02:	881a      	ldrh	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0e:	1c9a      	adds	r2, r3, #2
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b02      	subs	r3, #2
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a22:	e05c      	b.n	8002ade <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	330c      	adds	r3, #12
 8002a2e:	7812      	ldrb	r2, [r2, #0]
 8002a30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002a4a:	e048      	b.n	8002ade <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d12b      	bne.n	8002ab2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d912      	bls.n	8002a8a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a68:	881a      	ldrh	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a74:	1c9a      	adds	r2, r3, #2
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b02      	subs	r3, #2
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a88:	e029      	b.n	8002ade <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	330c      	adds	r3, #12
 8002a94:	7812      	ldrb	r2, [r2, #0]
 8002a96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ab0:	e015      	b.n	8002ade <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ab2:	f7fe f94b 	bl	8000d4c <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d803      	bhi.n	8002aca <HAL_SPI_Transmit+0x270>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ac8:	d102      	bne.n	8002ad0 <HAL_SPI_Transmit+0x276>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d106      	bne.n	8002ade <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002adc:	e029      	b.n	8002b32 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1b1      	bne.n	8002a4c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	6839      	ldr	r1, [r7, #0]
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 fcf9 	bl	80034e4 <SPI_EndRxTxTransaction>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10a      	bne.n	8002b1c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	77fb      	strb	r3, [r7, #31]
 8002b28:	e003      	b.n	8002b32 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002b3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3720      	adds	r7, #32
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d002      	beq.n	8002b6a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
 8002b66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b68:	e11a      	b.n	8002da0 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b72:	d112      	bne.n	8002b9a <HAL_SPI_Receive+0x56>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10e      	bne.n	8002b9a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2204      	movs	r2, #4
 8002b80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b84:	88fa      	ldrh	r2, [r7, #6]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f90e 	bl	8002db2 <HAL_SPI_TransmitReceive>
 8002b96:	4603      	mov	r3, r0
 8002b98:	e107      	b.n	8002daa <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_SPI_Receive+0x64>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e100      	b.n	8002daa <HAL_SPI_Receive+0x266>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bb0:	f7fe f8cc 	bl	8000d4c <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <HAL_SPI_Receive+0x7e>
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d102      	bne.n	8002bc8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bc6:	e0eb      	b.n	8002da0 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2204      	movs	r2, #4
 8002bcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	88fa      	ldrh	r2, [r7, #6]
 8002be0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	88fa      	ldrh	r2, [r7, #6]
 8002be8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c12:	d908      	bls.n	8002c26 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	e007      	b.n	8002c36 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c34:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c3e:	d10f      	bne.n	8002c60 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c5e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6a:	2b40      	cmp	r3, #64	@ 0x40
 8002c6c:	d007      	beq.n	8002c7e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c7c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c86:	d86f      	bhi.n	8002d68 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c88:	e034      	b.n	8002cf4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d117      	bne.n	8002cc8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f103 020c 	add.w	r2, r3, #12
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	7812      	ldrb	r2, [r2, #0]
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002cc6:	e015      	b.n	8002cf4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cc8:	f7fe f840 	bl	8000d4c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d803      	bhi.n	8002ce0 <HAL_SPI_Receive+0x19c>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cde:	d102      	bne.n	8002ce6 <HAL_SPI_Receive+0x1a2>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002cf2:	e055      	b.n	8002da0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1c4      	bne.n	8002c8a <HAL_SPI_Receive+0x146>
 8002d00:	e038      	b.n	8002d74 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d115      	bne.n	8002d3c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	b292      	uxth	r2, r2
 8002d1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	1c9a      	adds	r2, r3, #2
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002d3a:	e015      	b.n	8002d68 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d3c:	f7fe f806 	bl	8000d4c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d803      	bhi.n	8002d54 <HAL_SPI_Receive+0x210>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d52:	d102      	bne.n	8002d5a <HAL_SPI_Receive+0x216>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002d66:	e01b      	b.n	8002da0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1c6      	bne.n	8002d02 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	6839      	ldr	r1, [r7, #0]
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 fb5b 	bl	8003434 <SPI_EndRxTransaction>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	75fb      	strb	r3, [r7, #23]
 8002d96:	e003      	b.n	8002da0 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b08a      	sub	sp, #40	@ 0x28
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_SPI_TransmitReceive+0x26>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e20a      	b.n	80031ee <HAL_SPI_TransmitReceive+0x43c>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002de0:	f7fd ffb4 	bl	8000d4c <HAL_GetTick>
 8002de4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002dec:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002df4:	887b      	ldrh	r3, [r7, #2]
 8002df6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002df8:	887b      	ldrh	r3, [r7, #2]
 8002dfa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dfc:	7efb      	ldrb	r3, [r7, #27]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d00e      	beq.n	8002e20 <HAL_SPI_TransmitReceive+0x6e>
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e08:	d106      	bne.n	8002e18 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <HAL_SPI_TransmitReceive+0x66>
 8002e12:	7efb      	ldrb	r3, [r7, #27]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d003      	beq.n	8002e20 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002e1e:	e1e0      	b.n	80031e2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_SPI_TransmitReceive+0x80>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <HAL_SPI_TransmitReceive+0x80>
 8002e2c:	887b      	ldrh	r3, [r7, #2]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d103      	bne.n	8002e3a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002e38:	e1d3      	b.n	80031e2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d003      	beq.n	8002e4e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2205      	movs	r2, #5
 8002e4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	887a      	ldrh	r2, [r7, #2]
 8002e5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	887a      	ldrh	r2, [r7, #2]
 8002e66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	887a      	ldrh	r2, [r7, #2]
 8002e7a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e90:	d802      	bhi.n	8002e98 <HAL_SPI_TransmitReceive+0xe6>
 8002e92:	8a3b      	ldrh	r3, [r7, #16]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d908      	bls.n	8002eaa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	e007      	b.n	8002eba <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002eb8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec4:	2b40      	cmp	r3, #64	@ 0x40
 8002ec6:	d007      	beq.n	8002ed8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ed6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ee0:	f240 8081 	bls.w	8002fe6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <HAL_SPI_TransmitReceive+0x140>
 8002eec:	8a7b      	ldrh	r3, [r7, #18]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d16d      	bne.n	8002fce <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef6:	881a      	ldrh	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f02:	1c9a      	adds	r2, r3, #2
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f16:	e05a      	b.n	8002fce <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d11b      	bne.n	8002f5e <HAL_SPI_TransmitReceive+0x1ac>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d016      	beq.n	8002f5e <HAL_SPI_TransmitReceive+0x1ac>
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d113      	bne.n	8002f5e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3a:	881a      	ldrh	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f46:	1c9a      	adds	r2, r3, #2
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d11c      	bne.n	8002fa6 <HAL_SPI_TransmitReceive+0x1f4>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d016      	beq.n	8002fa6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	b292      	uxth	r2, r2
 8002f84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	1c9a      	adds	r2, r3, #2
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fa6:	f7fd fed1 	bl	8000d4c <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d80b      	bhi.n	8002fce <HAL_SPI_TransmitReceive+0x21c>
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fbc:	d007      	beq.n	8002fce <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002fcc:	e109      	b.n	80031e2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d19f      	bne.n	8002f18 <HAL_SPI_TransmitReceive+0x166>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d199      	bne.n	8002f18 <HAL_SPI_TransmitReceive+0x166>
 8002fe4:	e0e3      	b.n	80031ae <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_SPI_TransmitReceive+0x244>
 8002fee:	8a7b      	ldrh	r3, [r7, #18]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	f040 80cf 	bne.w	8003194 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d912      	bls.n	8003026 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003004:	881a      	ldrh	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003010:	1c9a      	adds	r2, r3, #2
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b02      	subs	r3, #2
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003024:	e0b6      	b.n	8003194 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	330c      	adds	r3, #12
 8003030:	7812      	ldrb	r2, [r2, #0]
 8003032:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800304c:	e0a2      	b.n	8003194 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b02      	cmp	r3, #2
 800305a:	d134      	bne.n	80030c6 <HAL_SPI_TransmitReceive+0x314>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d02f      	beq.n	80030c6 <HAL_SPI_TransmitReceive+0x314>
 8003066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003068:	2b01      	cmp	r3, #1
 800306a:	d12c      	bne.n	80030c6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b01      	cmp	r3, #1
 8003074:	d912      	bls.n	800309c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307a:	881a      	ldrh	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003086:	1c9a      	adds	r2, r3, #2
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b02      	subs	r3, #2
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800309a:	e012      	b.n	80030c2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	7812      	ldrb	r2, [r2, #0]
 80030a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d148      	bne.n	8003166 <HAL_SPI_TransmitReceive+0x3b4>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d042      	beq.n	8003166 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d923      	bls.n	8003134 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	b292      	uxth	r2, r2
 80030f8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	1c9a      	adds	r2, r3, #2
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b02      	subs	r3, #2
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800311c:	b29b      	uxth	r3, r3
 800311e:	2b01      	cmp	r3, #1
 8003120:	d81f      	bhi.n	8003162 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	e016      	b.n	8003162 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f103 020c 	add.w	r2, r3, #12
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	7812      	ldrb	r2, [r2, #0]
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003162:	2301      	movs	r3, #1
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003166:	f7fd fdf1 	bl	8000d4c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003172:	429a      	cmp	r2, r3
 8003174:	d803      	bhi.n	800317e <HAL_SPI_TransmitReceive+0x3cc>
 8003176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800317c:	d102      	bne.n	8003184 <HAL_SPI_TransmitReceive+0x3d2>
 800317e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003180:	2b00      	cmp	r3, #0
 8003182:	d107      	bne.n	8003194 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003192:	e026      	b.n	80031e2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	f47f af57 	bne.w	800304e <HAL_SPI_TransmitReceive+0x29c>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f47f af50 	bne.w	800304e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f996 	bl	80034e4 <SPI_EndRxTxTransaction>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031d8:	e003      	b.n	80031e2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80031ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3728      	adds	r7, #40	@ 0x28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003208:	f7fd fda0 	bl	8000d4c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	4413      	add	r3, r2
 8003216:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003218:	f7fd fd98 	bl	8000d4c <HAL_GetTick>
 800321c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800321e:	4b39      	ldr	r3, [pc, #228]	@ (8003304 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	015b      	lsls	r3, r3, #5
 8003224:	0d1b      	lsrs	r3, r3, #20
 8003226:	69fa      	ldr	r2, [r7, #28]
 8003228:	fb02 f303 	mul.w	r3, r2, r3
 800322c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800322e:	e054      	b.n	80032da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003236:	d050      	beq.n	80032da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003238:	f7fd fd88 	bl	8000d4c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	429a      	cmp	r2, r3
 8003246:	d902      	bls.n	800324e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d13d      	bne.n	80032ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800325c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003266:	d111      	bne.n	800328c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003270:	d004      	beq.n	800327c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800327a:	d107      	bne.n	800328c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800328a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003290:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003294:	d10f      	bne.n	80032b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e017      	b.n	80032fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4013      	ands	r3, r2
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	bf0c      	ite	eq
 80032ea:	2301      	moveq	r3, #1
 80032ec:	2300      	movne	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d19b      	bne.n	8003230 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3720      	adds	r7, #32
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000008 	.word	0x20000008

08003308 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	@ 0x28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800331a:	f7fd fd17 	bl	8000d4c <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	4413      	add	r3, r2
 8003328:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800332a:	f7fd fd0f 	bl	8000d4c <HAL_GetTick>
 800332e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	330c      	adds	r3, #12
 8003336:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003338:	4b3d      	ldr	r3, [pc, #244]	@ (8003430 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	00da      	lsls	r2, r3, #3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	0d1b      	lsrs	r3, r3, #20
 8003348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003350:	e060      	b.n	8003414 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003358:	d107      	bne.n	800336a <SPI_WaitFifoStateUntilTimeout+0x62>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d104      	bne.n	800336a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003368:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003370:	d050      	beq.n	8003414 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003372:	f7fd fceb 	bl	8000d4c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800337e:	429a      	cmp	r2, r3
 8003380:	d902      	bls.n	8003388 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	2b00      	cmp	r3, #0
 8003386:	d13d      	bne.n	8003404 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003396:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033a0:	d111      	bne.n	80033c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033aa:	d004      	beq.n	80033b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b4:	d107      	bne.n	80033c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033ce:	d10f      	bne.n	80033f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e010      	b.n	8003426 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	3b01      	subs	r3, #1
 8003412:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4013      	ands	r3, r2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	429a      	cmp	r2, r3
 8003422:	d196      	bne.n	8003352 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3728      	adds	r7, #40	@ 0x28
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000008 	.word	0x20000008

08003434 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003448:	d111      	bne.n	800346e <SPI_EndRxTransaction+0x3a>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003452:	d004      	beq.n	800345e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800345c:	d107      	bne.n	800346e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800346c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2200      	movs	r2, #0
 8003476:	2180      	movs	r1, #128	@ 0x80
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f7ff febd 	bl	80031f8 <SPI_WaitFlagStateUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e023      	b.n	80034dc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800349c:	d11d      	bne.n	80034da <SPI_EndRxTransaction+0xa6>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034a6:	d004      	beq.n	80034b2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b0:	d113      	bne.n	80034da <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff ff22 	bl	8003308 <SPI_WaitFifoStateUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d007      	beq.n	80034da <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ce:	f043 0220 	orr.w	r2, r3, #32
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e000      	b.n	80034dc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7ff ff03 	bl	8003308 <SPI_WaitFifoStateUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800350c:	f043 0220 	orr.w	r2, r3, #32
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e027      	b.n	8003568 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2200      	movs	r2, #0
 8003520:	2180      	movs	r1, #128	@ 0x80
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f7ff fe68 	bl	80031f8 <SPI_WaitFlagStateUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d007      	beq.n	800353e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003532:	f043 0220 	orr.w	r2, r3, #32
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e014      	b.n	8003568 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2200      	movs	r2, #0
 8003546:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff fedc 	bl	8003308 <SPI_WaitFifoStateUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e000      	b.n	8003568 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <std>:
 8003570:	2300      	movs	r3, #0
 8003572:	b510      	push	{r4, lr}
 8003574:	4604      	mov	r4, r0
 8003576:	e9c0 3300 	strd	r3, r3, [r0]
 800357a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800357e:	6083      	str	r3, [r0, #8]
 8003580:	8181      	strh	r1, [r0, #12]
 8003582:	6643      	str	r3, [r0, #100]	@ 0x64
 8003584:	81c2      	strh	r2, [r0, #14]
 8003586:	6183      	str	r3, [r0, #24]
 8003588:	4619      	mov	r1, r3
 800358a:	2208      	movs	r2, #8
 800358c:	305c      	adds	r0, #92	@ 0x5c
 800358e:	f000 f9f9 	bl	8003984 <memset>
 8003592:	4b0d      	ldr	r3, [pc, #52]	@ (80035c8 <std+0x58>)
 8003594:	6263      	str	r3, [r4, #36]	@ 0x24
 8003596:	4b0d      	ldr	r3, [pc, #52]	@ (80035cc <std+0x5c>)
 8003598:	62a3      	str	r3, [r4, #40]	@ 0x28
 800359a:	4b0d      	ldr	r3, [pc, #52]	@ (80035d0 <std+0x60>)
 800359c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800359e:	4b0d      	ldr	r3, [pc, #52]	@ (80035d4 <std+0x64>)
 80035a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80035a2:	4b0d      	ldr	r3, [pc, #52]	@ (80035d8 <std+0x68>)
 80035a4:	6224      	str	r4, [r4, #32]
 80035a6:	429c      	cmp	r4, r3
 80035a8:	d006      	beq.n	80035b8 <std+0x48>
 80035aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80035ae:	4294      	cmp	r4, r2
 80035b0:	d002      	beq.n	80035b8 <std+0x48>
 80035b2:	33d0      	adds	r3, #208	@ 0xd0
 80035b4:	429c      	cmp	r4, r3
 80035b6:	d105      	bne.n	80035c4 <std+0x54>
 80035b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80035bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035c0:	f000 ba58 	b.w	8003a74 <__retarget_lock_init_recursive>
 80035c4:	bd10      	pop	{r4, pc}
 80035c6:	bf00      	nop
 80035c8:	080037d5 	.word	0x080037d5
 80035cc:	080037f7 	.word	0x080037f7
 80035d0:	0800382f 	.word	0x0800382f
 80035d4:	08003853 	.word	0x08003853
 80035d8:	2000014c 	.word	0x2000014c

080035dc <stdio_exit_handler>:
 80035dc:	4a02      	ldr	r2, [pc, #8]	@ (80035e8 <stdio_exit_handler+0xc>)
 80035de:	4903      	ldr	r1, [pc, #12]	@ (80035ec <stdio_exit_handler+0x10>)
 80035e0:	4803      	ldr	r0, [pc, #12]	@ (80035f0 <stdio_exit_handler+0x14>)
 80035e2:	f000 b869 	b.w	80036b8 <_fwalk_sglue>
 80035e6:	bf00      	nop
 80035e8:	20000014 	.word	0x20000014
 80035ec:	08004315 	.word	0x08004315
 80035f0:	20000024 	.word	0x20000024

080035f4 <cleanup_stdio>:
 80035f4:	6841      	ldr	r1, [r0, #4]
 80035f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003628 <cleanup_stdio+0x34>)
 80035f8:	4299      	cmp	r1, r3
 80035fa:	b510      	push	{r4, lr}
 80035fc:	4604      	mov	r4, r0
 80035fe:	d001      	beq.n	8003604 <cleanup_stdio+0x10>
 8003600:	f000 fe88 	bl	8004314 <_fflush_r>
 8003604:	68a1      	ldr	r1, [r4, #8]
 8003606:	4b09      	ldr	r3, [pc, #36]	@ (800362c <cleanup_stdio+0x38>)
 8003608:	4299      	cmp	r1, r3
 800360a:	d002      	beq.n	8003612 <cleanup_stdio+0x1e>
 800360c:	4620      	mov	r0, r4
 800360e:	f000 fe81 	bl	8004314 <_fflush_r>
 8003612:	68e1      	ldr	r1, [r4, #12]
 8003614:	4b06      	ldr	r3, [pc, #24]	@ (8003630 <cleanup_stdio+0x3c>)
 8003616:	4299      	cmp	r1, r3
 8003618:	d004      	beq.n	8003624 <cleanup_stdio+0x30>
 800361a:	4620      	mov	r0, r4
 800361c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003620:	f000 be78 	b.w	8004314 <_fflush_r>
 8003624:	bd10      	pop	{r4, pc}
 8003626:	bf00      	nop
 8003628:	2000014c 	.word	0x2000014c
 800362c:	200001b4 	.word	0x200001b4
 8003630:	2000021c 	.word	0x2000021c

08003634 <global_stdio_init.part.0>:
 8003634:	b510      	push	{r4, lr}
 8003636:	4b0b      	ldr	r3, [pc, #44]	@ (8003664 <global_stdio_init.part.0+0x30>)
 8003638:	4c0b      	ldr	r4, [pc, #44]	@ (8003668 <global_stdio_init.part.0+0x34>)
 800363a:	4a0c      	ldr	r2, [pc, #48]	@ (800366c <global_stdio_init.part.0+0x38>)
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	4620      	mov	r0, r4
 8003640:	2200      	movs	r2, #0
 8003642:	2104      	movs	r1, #4
 8003644:	f7ff ff94 	bl	8003570 <std>
 8003648:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800364c:	2201      	movs	r2, #1
 800364e:	2109      	movs	r1, #9
 8003650:	f7ff ff8e 	bl	8003570 <std>
 8003654:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003658:	2202      	movs	r2, #2
 800365a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800365e:	2112      	movs	r1, #18
 8003660:	f7ff bf86 	b.w	8003570 <std>
 8003664:	20000284 	.word	0x20000284
 8003668:	2000014c 	.word	0x2000014c
 800366c:	080035dd 	.word	0x080035dd

08003670 <__sfp_lock_acquire>:
 8003670:	4801      	ldr	r0, [pc, #4]	@ (8003678 <__sfp_lock_acquire+0x8>)
 8003672:	f000 ba00 	b.w	8003a76 <__retarget_lock_acquire_recursive>
 8003676:	bf00      	nop
 8003678:	2000028d 	.word	0x2000028d

0800367c <__sfp_lock_release>:
 800367c:	4801      	ldr	r0, [pc, #4]	@ (8003684 <__sfp_lock_release+0x8>)
 800367e:	f000 b9fb 	b.w	8003a78 <__retarget_lock_release_recursive>
 8003682:	bf00      	nop
 8003684:	2000028d 	.word	0x2000028d

08003688 <__sinit>:
 8003688:	b510      	push	{r4, lr}
 800368a:	4604      	mov	r4, r0
 800368c:	f7ff fff0 	bl	8003670 <__sfp_lock_acquire>
 8003690:	6a23      	ldr	r3, [r4, #32]
 8003692:	b11b      	cbz	r3, 800369c <__sinit+0x14>
 8003694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003698:	f7ff bff0 	b.w	800367c <__sfp_lock_release>
 800369c:	4b04      	ldr	r3, [pc, #16]	@ (80036b0 <__sinit+0x28>)
 800369e:	6223      	str	r3, [r4, #32]
 80036a0:	4b04      	ldr	r3, [pc, #16]	@ (80036b4 <__sinit+0x2c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f5      	bne.n	8003694 <__sinit+0xc>
 80036a8:	f7ff ffc4 	bl	8003634 <global_stdio_init.part.0>
 80036ac:	e7f2      	b.n	8003694 <__sinit+0xc>
 80036ae:	bf00      	nop
 80036b0:	080035f5 	.word	0x080035f5
 80036b4:	20000284 	.word	0x20000284

080036b8 <_fwalk_sglue>:
 80036b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036bc:	4607      	mov	r7, r0
 80036be:	4688      	mov	r8, r1
 80036c0:	4614      	mov	r4, r2
 80036c2:	2600      	movs	r6, #0
 80036c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036c8:	f1b9 0901 	subs.w	r9, r9, #1
 80036cc:	d505      	bpl.n	80036da <_fwalk_sglue+0x22>
 80036ce:	6824      	ldr	r4, [r4, #0]
 80036d0:	2c00      	cmp	r4, #0
 80036d2:	d1f7      	bne.n	80036c4 <_fwalk_sglue+0xc>
 80036d4:	4630      	mov	r0, r6
 80036d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036da:	89ab      	ldrh	r3, [r5, #12]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d907      	bls.n	80036f0 <_fwalk_sglue+0x38>
 80036e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036e4:	3301      	adds	r3, #1
 80036e6:	d003      	beq.n	80036f0 <_fwalk_sglue+0x38>
 80036e8:	4629      	mov	r1, r5
 80036ea:	4638      	mov	r0, r7
 80036ec:	47c0      	blx	r8
 80036ee:	4306      	orrs	r6, r0
 80036f0:	3568      	adds	r5, #104	@ 0x68
 80036f2:	e7e9      	b.n	80036c8 <_fwalk_sglue+0x10>

080036f4 <iprintf>:
 80036f4:	b40f      	push	{r0, r1, r2, r3}
 80036f6:	b507      	push	{r0, r1, r2, lr}
 80036f8:	4906      	ldr	r1, [pc, #24]	@ (8003714 <iprintf+0x20>)
 80036fa:	ab04      	add	r3, sp, #16
 80036fc:	6808      	ldr	r0, [r1, #0]
 80036fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003702:	6881      	ldr	r1, [r0, #8]
 8003704:	9301      	str	r3, [sp, #4]
 8003706:	f000 fadb 	bl	8003cc0 <_vfiprintf_r>
 800370a:	b003      	add	sp, #12
 800370c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003710:	b004      	add	sp, #16
 8003712:	4770      	bx	lr
 8003714:	20000020 	.word	0x20000020

08003718 <_puts_r>:
 8003718:	6a03      	ldr	r3, [r0, #32]
 800371a:	b570      	push	{r4, r5, r6, lr}
 800371c:	6884      	ldr	r4, [r0, #8]
 800371e:	4605      	mov	r5, r0
 8003720:	460e      	mov	r6, r1
 8003722:	b90b      	cbnz	r3, 8003728 <_puts_r+0x10>
 8003724:	f7ff ffb0 	bl	8003688 <__sinit>
 8003728:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800372a:	07db      	lsls	r3, r3, #31
 800372c:	d405      	bmi.n	800373a <_puts_r+0x22>
 800372e:	89a3      	ldrh	r3, [r4, #12]
 8003730:	0598      	lsls	r0, r3, #22
 8003732:	d402      	bmi.n	800373a <_puts_r+0x22>
 8003734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003736:	f000 f99e 	bl	8003a76 <__retarget_lock_acquire_recursive>
 800373a:	89a3      	ldrh	r3, [r4, #12]
 800373c:	0719      	lsls	r1, r3, #28
 800373e:	d502      	bpl.n	8003746 <_puts_r+0x2e>
 8003740:	6923      	ldr	r3, [r4, #16]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d135      	bne.n	80037b2 <_puts_r+0x9a>
 8003746:	4621      	mov	r1, r4
 8003748:	4628      	mov	r0, r5
 800374a:	f000 f8c5 	bl	80038d8 <__swsetup_r>
 800374e:	b380      	cbz	r0, 80037b2 <_puts_r+0x9a>
 8003750:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003754:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003756:	07da      	lsls	r2, r3, #31
 8003758:	d405      	bmi.n	8003766 <_puts_r+0x4e>
 800375a:	89a3      	ldrh	r3, [r4, #12]
 800375c:	059b      	lsls	r3, r3, #22
 800375e:	d402      	bmi.n	8003766 <_puts_r+0x4e>
 8003760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003762:	f000 f989 	bl	8003a78 <__retarget_lock_release_recursive>
 8003766:	4628      	mov	r0, r5
 8003768:	bd70      	pop	{r4, r5, r6, pc}
 800376a:	2b00      	cmp	r3, #0
 800376c:	da04      	bge.n	8003778 <_puts_r+0x60>
 800376e:	69a2      	ldr	r2, [r4, #24]
 8003770:	429a      	cmp	r2, r3
 8003772:	dc17      	bgt.n	80037a4 <_puts_r+0x8c>
 8003774:	290a      	cmp	r1, #10
 8003776:	d015      	beq.n	80037a4 <_puts_r+0x8c>
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	6022      	str	r2, [r4, #0]
 800377e:	7019      	strb	r1, [r3, #0]
 8003780:	68a3      	ldr	r3, [r4, #8]
 8003782:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003786:	3b01      	subs	r3, #1
 8003788:	60a3      	str	r3, [r4, #8]
 800378a:	2900      	cmp	r1, #0
 800378c:	d1ed      	bne.n	800376a <_puts_r+0x52>
 800378e:	2b00      	cmp	r3, #0
 8003790:	da11      	bge.n	80037b6 <_puts_r+0x9e>
 8003792:	4622      	mov	r2, r4
 8003794:	210a      	movs	r1, #10
 8003796:	4628      	mov	r0, r5
 8003798:	f000 f85f 	bl	800385a <__swbuf_r>
 800379c:	3001      	adds	r0, #1
 800379e:	d0d7      	beq.n	8003750 <_puts_r+0x38>
 80037a0:	250a      	movs	r5, #10
 80037a2:	e7d7      	b.n	8003754 <_puts_r+0x3c>
 80037a4:	4622      	mov	r2, r4
 80037a6:	4628      	mov	r0, r5
 80037a8:	f000 f857 	bl	800385a <__swbuf_r>
 80037ac:	3001      	adds	r0, #1
 80037ae:	d1e7      	bne.n	8003780 <_puts_r+0x68>
 80037b0:	e7ce      	b.n	8003750 <_puts_r+0x38>
 80037b2:	3e01      	subs	r6, #1
 80037b4:	e7e4      	b.n	8003780 <_puts_r+0x68>
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	6022      	str	r2, [r4, #0]
 80037bc:	220a      	movs	r2, #10
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	e7ee      	b.n	80037a0 <_puts_r+0x88>
	...

080037c4 <puts>:
 80037c4:	4b02      	ldr	r3, [pc, #8]	@ (80037d0 <puts+0xc>)
 80037c6:	4601      	mov	r1, r0
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	f7ff bfa5 	b.w	8003718 <_puts_r>
 80037ce:	bf00      	nop
 80037d0:	20000020 	.word	0x20000020

080037d4 <__sread>:
 80037d4:	b510      	push	{r4, lr}
 80037d6:	460c      	mov	r4, r1
 80037d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037dc:	f000 f8fc 	bl	80039d8 <_read_r>
 80037e0:	2800      	cmp	r0, #0
 80037e2:	bfab      	itete	ge
 80037e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80037e6:	89a3      	ldrhlt	r3, [r4, #12]
 80037e8:	181b      	addge	r3, r3, r0
 80037ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80037ee:	bfac      	ite	ge
 80037f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80037f2:	81a3      	strhlt	r3, [r4, #12]
 80037f4:	bd10      	pop	{r4, pc}

080037f6 <__swrite>:
 80037f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037fa:	461f      	mov	r7, r3
 80037fc:	898b      	ldrh	r3, [r1, #12]
 80037fe:	05db      	lsls	r3, r3, #23
 8003800:	4605      	mov	r5, r0
 8003802:	460c      	mov	r4, r1
 8003804:	4616      	mov	r6, r2
 8003806:	d505      	bpl.n	8003814 <__swrite+0x1e>
 8003808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800380c:	2302      	movs	r3, #2
 800380e:	2200      	movs	r2, #0
 8003810:	f000 f8d0 	bl	80039b4 <_lseek_r>
 8003814:	89a3      	ldrh	r3, [r4, #12]
 8003816:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800381a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800381e:	81a3      	strh	r3, [r4, #12]
 8003820:	4632      	mov	r2, r6
 8003822:	463b      	mov	r3, r7
 8003824:	4628      	mov	r0, r5
 8003826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800382a:	f000 b8e7 	b.w	80039fc <_write_r>

0800382e <__sseek>:
 800382e:	b510      	push	{r4, lr}
 8003830:	460c      	mov	r4, r1
 8003832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003836:	f000 f8bd 	bl	80039b4 <_lseek_r>
 800383a:	1c43      	adds	r3, r0, #1
 800383c:	89a3      	ldrh	r3, [r4, #12]
 800383e:	bf15      	itete	ne
 8003840:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003842:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003846:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800384a:	81a3      	strheq	r3, [r4, #12]
 800384c:	bf18      	it	ne
 800384e:	81a3      	strhne	r3, [r4, #12]
 8003850:	bd10      	pop	{r4, pc}

08003852 <__sclose>:
 8003852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003856:	f000 b89d 	b.w	8003994 <_close_r>

0800385a <__swbuf_r>:
 800385a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385c:	460e      	mov	r6, r1
 800385e:	4614      	mov	r4, r2
 8003860:	4605      	mov	r5, r0
 8003862:	b118      	cbz	r0, 800386c <__swbuf_r+0x12>
 8003864:	6a03      	ldr	r3, [r0, #32]
 8003866:	b90b      	cbnz	r3, 800386c <__swbuf_r+0x12>
 8003868:	f7ff ff0e 	bl	8003688 <__sinit>
 800386c:	69a3      	ldr	r3, [r4, #24]
 800386e:	60a3      	str	r3, [r4, #8]
 8003870:	89a3      	ldrh	r3, [r4, #12]
 8003872:	071a      	lsls	r2, r3, #28
 8003874:	d501      	bpl.n	800387a <__swbuf_r+0x20>
 8003876:	6923      	ldr	r3, [r4, #16]
 8003878:	b943      	cbnz	r3, 800388c <__swbuf_r+0x32>
 800387a:	4621      	mov	r1, r4
 800387c:	4628      	mov	r0, r5
 800387e:	f000 f82b 	bl	80038d8 <__swsetup_r>
 8003882:	b118      	cbz	r0, 800388c <__swbuf_r+0x32>
 8003884:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003888:	4638      	mov	r0, r7
 800388a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	6922      	ldr	r2, [r4, #16]
 8003890:	1a98      	subs	r0, r3, r2
 8003892:	6963      	ldr	r3, [r4, #20]
 8003894:	b2f6      	uxtb	r6, r6
 8003896:	4283      	cmp	r3, r0
 8003898:	4637      	mov	r7, r6
 800389a:	dc05      	bgt.n	80038a8 <__swbuf_r+0x4e>
 800389c:	4621      	mov	r1, r4
 800389e:	4628      	mov	r0, r5
 80038a0:	f000 fd38 	bl	8004314 <_fflush_r>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d1ed      	bne.n	8003884 <__swbuf_r+0x2a>
 80038a8:	68a3      	ldr	r3, [r4, #8]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	60a3      	str	r3, [r4, #8]
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	6022      	str	r2, [r4, #0]
 80038b4:	701e      	strb	r6, [r3, #0]
 80038b6:	6962      	ldr	r2, [r4, #20]
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d004      	beq.n	80038c8 <__swbuf_r+0x6e>
 80038be:	89a3      	ldrh	r3, [r4, #12]
 80038c0:	07db      	lsls	r3, r3, #31
 80038c2:	d5e1      	bpl.n	8003888 <__swbuf_r+0x2e>
 80038c4:	2e0a      	cmp	r6, #10
 80038c6:	d1df      	bne.n	8003888 <__swbuf_r+0x2e>
 80038c8:	4621      	mov	r1, r4
 80038ca:	4628      	mov	r0, r5
 80038cc:	f000 fd22 	bl	8004314 <_fflush_r>
 80038d0:	2800      	cmp	r0, #0
 80038d2:	d0d9      	beq.n	8003888 <__swbuf_r+0x2e>
 80038d4:	e7d6      	b.n	8003884 <__swbuf_r+0x2a>
	...

080038d8 <__swsetup_r>:
 80038d8:	b538      	push	{r3, r4, r5, lr}
 80038da:	4b29      	ldr	r3, [pc, #164]	@ (8003980 <__swsetup_r+0xa8>)
 80038dc:	4605      	mov	r5, r0
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	460c      	mov	r4, r1
 80038e2:	b118      	cbz	r0, 80038ec <__swsetup_r+0x14>
 80038e4:	6a03      	ldr	r3, [r0, #32]
 80038e6:	b90b      	cbnz	r3, 80038ec <__swsetup_r+0x14>
 80038e8:	f7ff fece 	bl	8003688 <__sinit>
 80038ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038f0:	0719      	lsls	r1, r3, #28
 80038f2:	d422      	bmi.n	800393a <__swsetup_r+0x62>
 80038f4:	06da      	lsls	r2, r3, #27
 80038f6:	d407      	bmi.n	8003908 <__swsetup_r+0x30>
 80038f8:	2209      	movs	r2, #9
 80038fa:	602a      	str	r2, [r5, #0]
 80038fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003900:	81a3      	strh	r3, [r4, #12]
 8003902:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003906:	e033      	b.n	8003970 <__swsetup_r+0x98>
 8003908:	0758      	lsls	r0, r3, #29
 800390a:	d512      	bpl.n	8003932 <__swsetup_r+0x5a>
 800390c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800390e:	b141      	cbz	r1, 8003922 <__swsetup_r+0x4a>
 8003910:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003914:	4299      	cmp	r1, r3
 8003916:	d002      	beq.n	800391e <__swsetup_r+0x46>
 8003918:	4628      	mov	r0, r5
 800391a:	f000 f8af 	bl	8003a7c <_free_r>
 800391e:	2300      	movs	r3, #0
 8003920:	6363      	str	r3, [r4, #52]	@ 0x34
 8003922:	89a3      	ldrh	r3, [r4, #12]
 8003924:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003928:	81a3      	strh	r3, [r4, #12]
 800392a:	2300      	movs	r3, #0
 800392c:	6063      	str	r3, [r4, #4]
 800392e:	6923      	ldr	r3, [r4, #16]
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	89a3      	ldrh	r3, [r4, #12]
 8003934:	f043 0308 	orr.w	r3, r3, #8
 8003938:	81a3      	strh	r3, [r4, #12]
 800393a:	6923      	ldr	r3, [r4, #16]
 800393c:	b94b      	cbnz	r3, 8003952 <__swsetup_r+0x7a>
 800393e:	89a3      	ldrh	r3, [r4, #12]
 8003940:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003948:	d003      	beq.n	8003952 <__swsetup_r+0x7a>
 800394a:	4621      	mov	r1, r4
 800394c:	4628      	mov	r0, r5
 800394e:	f000 fd2f 	bl	80043b0 <__smakebuf_r>
 8003952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003956:	f013 0201 	ands.w	r2, r3, #1
 800395a:	d00a      	beq.n	8003972 <__swsetup_r+0x9a>
 800395c:	2200      	movs	r2, #0
 800395e:	60a2      	str	r2, [r4, #8]
 8003960:	6962      	ldr	r2, [r4, #20]
 8003962:	4252      	negs	r2, r2
 8003964:	61a2      	str	r2, [r4, #24]
 8003966:	6922      	ldr	r2, [r4, #16]
 8003968:	b942      	cbnz	r2, 800397c <__swsetup_r+0xa4>
 800396a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800396e:	d1c5      	bne.n	80038fc <__swsetup_r+0x24>
 8003970:	bd38      	pop	{r3, r4, r5, pc}
 8003972:	0799      	lsls	r1, r3, #30
 8003974:	bf58      	it	pl
 8003976:	6962      	ldrpl	r2, [r4, #20]
 8003978:	60a2      	str	r2, [r4, #8]
 800397a:	e7f4      	b.n	8003966 <__swsetup_r+0x8e>
 800397c:	2000      	movs	r0, #0
 800397e:	e7f7      	b.n	8003970 <__swsetup_r+0x98>
 8003980:	20000020 	.word	0x20000020

08003984 <memset>:
 8003984:	4402      	add	r2, r0
 8003986:	4603      	mov	r3, r0
 8003988:	4293      	cmp	r3, r2
 800398a:	d100      	bne.n	800398e <memset+0xa>
 800398c:	4770      	bx	lr
 800398e:	f803 1b01 	strb.w	r1, [r3], #1
 8003992:	e7f9      	b.n	8003988 <memset+0x4>

08003994 <_close_r>:
 8003994:	b538      	push	{r3, r4, r5, lr}
 8003996:	4d06      	ldr	r5, [pc, #24]	@ (80039b0 <_close_r+0x1c>)
 8003998:	2300      	movs	r3, #0
 800399a:	4604      	mov	r4, r0
 800399c:	4608      	mov	r0, r1
 800399e:	602b      	str	r3, [r5, #0]
 80039a0:	f7fd f8d4 	bl	8000b4c <_close>
 80039a4:	1c43      	adds	r3, r0, #1
 80039a6:	d102      	bne.n	80039ae <_close_r+0x1a>
 80039a8:	682b      	ldr	r3, [r5, #0]
 80039aa:	b103      	cbz	r3, 80039ae <_close_r+0x1a>
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	bd38      	pop	{r3, r4, r5, pc}
 80039b0:	20000288 	.word	0x20000288

080039b4 <_lseek_r>:
 80039b4:	b538      	push	{r3, r4, r5, lr}
 80039b6:	4d07      	ldr	r5, [pc, #28]	@ (80039d4 <_lseek_r+0x20>)
 80039b8:	4604      	mov	r4, r0
 80039ba:	4608      	mov	r0, r1
 80039bc:	4611      	mov	r1, r2
 80039be:	2200      	movs	r2, #0
 80039c0:	602a      	str	r2, [r5, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	f7fd f8e9 	bl	8000b9a <_lseek>
 80039c8:	1c43      	adds	r3, r0, #1
 80039ca:	d102      	bne.n	80039d2 <_lseek_r+0x1e>
 80039cc:	682b      	ldr	r3, [r5, #0]
 80039ce:	b103      	cbz	r3, 80039d2 <_lseek_r+0x1e>
 80039d0:	6023      	str	r3, [r4, #0]
 80039d2:	bd38      	pop	{r3, r4, r5, pc}
 80039d4:	20000288 	.word	0x20000288

080039d8 <_read_r>:
 80039d8:	b538      	push	{r3, r4, r5, lr}
 80039da:	4d07      	ldr	r5, [pc, #28]	@ (80039f8 <_read_r+0x20>)
 80039dc:	4604      	mov	r4, r0
 80039de:	4608      	mov	r0, r1
 80039e0:	4611      	mov	r1, r2
 80039e2:	2200      	movs	r2, #0
 80039e4:	602a      	str	r2, [r5, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	f7fd f893 	bl	8000b12 <_read>
 80039ec:	1c43      	adds	r3, r0, #1
 80039ee:	d102      	bne.n	80039f6 <_read_r+0x1e>
 80039f0:	682b      	ldr	r3, [r5, #0]
 80039f2:	b103      	cbz	r3, 80039f6 <_read_r+0x1e>
 80039f4:	6023      	str	r3, [r4, #0]
 80039f6:	bd38      	pop	{r3, r4, r5, pc}
 80039f8:	20000288 	.word	0x20000288

080039fc <_write_r>:
 80039fc:	b538      	push	{r3, r4, r5, lr}
 80039fe:	4d07      	ldr	r5, [pc, #28]	@ (8003a1c <_write_r+0x20>)
 8003a00:	4604      	mov	r4, r0
 8003a02:	4608      	mov	r0, r1
 8003a04:	4611      	mov	r1, r2
 8003a06:	2200      	movs	r2, #0
 8003a08:	602a      	str	r2, [r5, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f7fc ffc8 	bl	80009a0 <_write>
 8003a10:	1c43      	adds	r3, r0, #1
 8003a12:	d102      	bne.n	8003a1a <_write_r+0x1e>
 8003a14:	682b      	ldr	r3, [r5, #0]
 8003a16:	b103      	cbz	r3, 8003a1a <_write_r+0x1e>
 8003a18:	6023      	str	r3, [r4, #0]
 8003a1a:	bd38      	pop	{r3, r4, r5, pc}
 8003a1c:	20000288 	.word	0x20000288

08003a20 <__errno>:
 8003a20:	4b01      	ldr	r3, [pc, #4]	@ (8003a28 <__errno+0x8>)
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20000020 	.word	0x20000020

08003a2c <__libc_init_array>:
 8003a2c:	b570      	push	{r4, r5, r6, lr}
 8003a2e:	4d0d      	ldr	r5, [pc, #52]	@ (8003a64 <__libc_init_array+0x38>)
 8003a30:	4c0d      	ldr	r4, [pc, #52]	@ (8003a68 <__libc_init_array+0x3c>)
 8003a32:	1b64      	subs	r4, r4, r5
 8003a34:	10a4      	asrs	r4, r4, #2
 8003a36:	2600      	movs	r6, #0
 8003a38:	42a6      	cmp	r6, r4
 8003a3a:	d109      	bne.n	8003a50 <__libc_init_array+0x24>
 8003a3c:	4d0b      	ldr	r5, [pc, #44]	@ (8003a6c <__libc_init_array+0x40>)
 8003a3e:	4c0c      	ldr	r4, [pc, #48]	@ (8003a70 <__libc_init_array+0x44>)
 8003a40:	f000 fd24 	bl	800448c <_init>
 8003a44:	1b64      	subs	r4, r4, r5
 8003a46:	10a4      	asrs	r4, r4, #2
 8003a48:	2600      	movs	r6, #0
 8003a4a:	42a6      	cmp	r6, r4
 8003a4c:	d105      	bne.n	8003a5a <__libc_init_array+0x2e>
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}
 8003a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a54:	4798      	blx	r3
 8003a56:	3601      	adds	r6, #1
 8003a58:	e7ee      	b.n	8003a38 <__libc_init_array+0xc>
 8003a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a5e:	4798      	blx	r3
 8003a60:	3601      	adds	r6, #1
 8003a62:	e7f2      	b.n	8003a4a <__libc_init_array+0x1e>
 8003a64:	08004654 	.word	0x08004654
 8003a68:	08004654 	.word	0x08004654
 8003a6c:	08004654 	.word	0x08004654
 8003a70:	08004658 	.word	0x08004658

08003a74 <__retarget_lock_init_recursive>:
 8003a74:	4770      	bx	lr

08003a76 <__retarget_lock_acquire_recursive>:
 8003a76:	4770      	bx	lr

08003a78 <__retarget_lock_release_recursive>:
 8003a78:	4770      	bx	lr
	...

08003a7c <_free_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	4605      	mov	r5, r0
 8003a80:	2900      	cmp	r1, #0
 8003a82:	d041      	beq.n	8003b08 <_free_r+0x8c>
 8003a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a88:	1f0c      	subs	r4, r1, #4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bfb8      	it	lt
 8003a8e:	18e4      	addlt	r4, r4, r3
 8003a90:	f000 f8e0 	bl	8003c54 <__malloc_lock>
 8003a94:	4a1d      	ldr	r2, [pc, #116]	@ (8003b0c <_free_r+0x90>)
 8003a96:	6813      	ldr	r3, [r2, #0]
 8003a98:	b933      	cbnz	r3, 8003aa8 <_free_r+0x2c>
 8003a9a:	6063      	str	r3, [r4, #4]
 8003a9c:	6014      	str	r4, [r2, #0]
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aa4:	f000 b8dc 	b.w	8003c60 <__malloc_unlock>
 8003aa8:	42a3      	cmp	r3, r4
 8003aaa:	d908      	bls.n	8003abe <_free_r+0x42>
 8003aac:	6820      	ldr	r0, [r4, #0]
 8003aae:	1821      	adds	r1, r4, r0
 8003ab0:	428b      	cmp	r3, r1
 8003ab2:	bf01      	itttt	eq
 8003ab4:	6819      	ldreq	r1, [r3, #0]
 8003ab6:	685b      	ldreq	r3, [r3, #4]
 8003ab8:	1809      	addeq	r1, r1, r0
 8003aba:	6021      	streq	r1, [r4, #0]
 8003abc:	e7ed      	b.n	8003a9a <_free_r+0x1e>
 8003abe:	461a      	mov	r2, r3
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	b10b      	cbz	r3, 8003ac8 <_free_r+0x4c>
 8003ac4:	42a3      	cmp	r3, r4
 8003ac6:	d9fa      	bls.n	8003abe <_free_r+0x42>
 8003ac8:	6811      	ldr	r1, [r2, #0]
 8003aca:	1850      	adds	r0, r2, r1
 8003acc:	42a0      	cmp	r0, r4
 8003ace:	d10b      	bne.n	8003ae8 <_free_r+0x6c>
 8003ad0:	6820      	ldr	r0, [r4, #0]
 8003ad2:	4401      	add	r1, r0
 8003ad4:	1850      	adds	r0, r2, r1
 8003ad6:	4283      	cmp	r3, r0
 8003ad8:	6011      	str	r1, [r2, #0]
 8003ada:	d1e0      	bne.n	8003a9e <_free_r+0x22>
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	6053      	str	r3, [r2, #4]
 8003ae2:	4408      	add	r0, r1
 8003ae4:	6010      	str	r0, [r2, #0]
 8003ae6:	e7da      	b.n	8003a9e <_free_r+0x22>
 8003ae8:	d902      	bls.n	8003af0 <_free_r+0x74>
 8003aea:	230c      	movs	r3, #12
 8003aec:	602b      	str	r3, [r5, #0]
 8003aee:	e7d6      	b.n	8003a9e <_free_r+0x22>
 8003af0:	6820      	ldr	r0, [r4, #0]
 8003af2:	1821      	adds	r1, r4, r0
 8003af4:	428b      	cmp	r3, r1
 8003af6:	bf04      	itt	eq
 8003af8:	6819      	ldreq	r1, [r3, #0]
 8003afa:	685b      	ldreq	r3, [r3, #4]
 8003afc:	6063      	str	r3, [r4, #4]
 8003afe:	bf04      	itt	eq
 8003b00:	1809      	addeq	r1, r1, r0
 8003b02:	6021      	streq	r1, [r4, #0]
 8003b04:	6054      	str	r4, [r2, #4]
 8003b06:	e7ca      	b.n	8003a9e <_free_r+0x22>
 8003b08:	bd38      	pop	{r3, r4, r5, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000294 	.word	0x20000294

08003b10 <sbrk_aligned>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	4e0f      	ldr	r6, [pc, #60]	@ (8003b50 <sbrk_aligned+0x40>)
 8003b14:	460c      	mov	r4, r1
 8003b16:	6831      	ldr	r1, [r6, #0]
 8003b18:	4605      	mov	r5, r0
 8003b1a:	b911      	cbnz	r1, 8003b22 <sbrk_aligned+0x12>
 8003b1c:	f000 fca6 	bl	800446c <_sbrk_r>
 8003b20:	6030      	str	r0, [r6, #0]
 8003b22:	4621      	mov	r1, r4
 8003b24:	4628      	mov	r0, r5
 8003b26:	f000 fca1 	bl	800446c <_sbrk_r>
 8003b2a:	1c43      	adds	r3, r0, #1
 8003b2c:	d103      	bne.n	8003b36 <sbrk_aligned+0x26>
 8003b2e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003b32:	4620      	mov	r0, r4
 8003b34:	bd70      	pop	{r4, r5, r6, pc}
 8003b36:	1cc4      	adds	r4, r0, #3
 8003b38:	f024 0403 	bic.w	r4, r4, #3
 8003b3c:	42a0      	cmp	r0, r4
 8003b3e:	d0f8      	beq.n	8003b32 <sbrk_aligned+0x22>
 8003b40:	1a21      	subs	r1, r4, r0
 8003b42:	4628      	mov	r0, r5
 8003b44:	f000 fc92 	bl	800446c <_sbrk_r>
 8003b48:	3001      	adds	r0, #1
 8003b4a:	d1f2      	bne.n	8003b32 <sbrk_aligned+0x22>
 8003b4c:	e7ef      	b.n	8003b2e <sbrk_aligned+0x1e>
 8003b4e:	bf00      	nop
 8003b50:	20000290 	.word	0x20000290

08003b54 <_malloc_r>:
 8003b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b58:	1ccd      	adds	r5, r1, #3
 8003b5a:	f025 0503 	bic.w	r5, r5, #3
 8003b5e:	3508      	adds	r5, #8
 8003b60:	2d0c      	cmp	r5, #12
 8003b62:	bf38      	it	cc
 8003b64:	250c      	movcc	r5, #12
 8003b66:	2d00      	cmp	r5, #0
 8003b68:	4606      	mov	r6, r0
 8003b6a:	db01      	blt.n	8003b70 <_malloc_r+0x1c>
 8003b6c:	42a9      	cmp	r1, r5
 8003b6e:	d904      	bls.n	8003b7a <_malloc_r+0x26>
 8003b70:	230c      	movs	r3, #12
 8003b72:	6033      	str	r3, [r6, #0]
 8003b74:	2000      	movs	r0, #0
 8003b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c50 <_malloc_r+0xfc>
 8003b7e:	f000 f869 	bl	8003c54 <__malloc_lock>
 8003b82:	f8d8 3000 	ldr.w	r3, [r8]
 8003b86:	461c      	mov	r4, r3
 8003b88:	bb44      	cbnz	r4, 8003bdc <_malloc_r+0x88>
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	f7ff ffbf 	bl	8003b10 <sbrk_aligned>
 8003b92:	1c43      	adds	r3, r0, #1
 8003b94:	4604      	mov	r4, r0
 8003b96:	d158      	bne.n	8003c4a <_malloc_r+0xf6>
 8003b98:	f8d8 4000 	ldr.w	r4, [r8]
 8003b9c:	4627      	mov	r7, r4
 8003b9e:	2f00      	cmp	r7, #0
 8003ba0:	d143      	bne.n	8003c2a <_malloc_r+0xd6>
 8003ba2:	2c00      	cmp	r4, #0
 8003ba4:	d04b      	beq.n	8003c3e <_malloc_r+0xea>
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	4639      	mov	r1, r7
 8003baa:	4630      	mov	r0, r6
 8003bac:	eb04 0903 	add.w	r9, r4, r3
 8003bb0:	f000 fc5c 	bl	800446c <_sbrk_r>
 8003bb4:	4581      	cmp	r9, r0
 8003bb6:	d142      	bne.n	8003c3e <_malloc_r+0xea>
 8003bb8:	6821      	ldr	r1, [r4, #0]
 8003bba:	1a6d      	subs	r5, r5, r1
 8003bbc:	4629      	mov	r1, r5
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	f7ff ffa6 	bl	8003b10 <sbrk_aligned>
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	d03a      	beq.n	8003c3e <_malloc_r+0xea>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	442b      	add	r3, r5
 8003bcc:	6023      	str	r3, [r4, #0]
 8003bce:	f8d8 3000 	ldr.w	r3, [r8]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	bb62      	cbnz	r2, 8003c30 <_malloc_r+0xdc>
 8003bd6:	f8c8 7000 	str.w	r7, [r8]
 8003bda:	e00f      	b.n	8003bfc <_malloc_r+0xa8>
 8003bdc:	6822      	ldr	r2, [r4, #0]
 8003bde:	1b52      	subs	r2, r2, r5
 8003be0:	d420      	bmi.n	8003c24 <_malloc_r+0xd0>
 8003be2:	2a0b      	cmp	r2, #11
 8003be4:	d917      	bls.n	8003c16 <_malloc_r+0xc2>
 8003be6:	1961      	adds	r1, r4, r5
 8003be8:	42a3      	cmp	r3, r4
 8003bea:	6025      	str	r5, [r4, #0]
 8003bec:	bf18      	it	ne
 8003bee:	6059      	strne	r1, [r3, #4]
 8003bf0:	6863      	ldr	r3, [r4, #4]
 8003bf2:	bf08      	it	eq
 8003bf4:	f8c8 1000 	streq.w	r1, [r8]
 8003bf8:	5162      	str	r2, [r4, r5]
 8003bfa:	604b      	str	r3, [r1, #4]
 8003bfc:	4630      	mov	r0, r6
 8003bfe:	f000 f82f 	bl	8003c60 <__malloc_unlock>
 8003c02:	f104 000b 	add.w	r0, r4, #11
 8003c06:	1d23      	adds	r3, r4, #4
 8003c08:	f020 0007 	bic.w	r0, r0, #7
 8003c0c:	1ac2      	subs	r2, r0, r3
 8003c0e:	bf1c      	itt	ne
 8003c10:	1a1b      	subne	r3, r3, r0
 8003c12:	50a3      	strne	r3, [r4, r2]
 8003c14:	e7af      	b.n	8003b76 <_malloc_r+0x22>
 8003c16:	6862      	ldr	r2, [r4, #4]
 8003c18:	42a3      	cmp	r3, r4
 8003c1a:	bf0c      	ite	eq
 8003c1c:	f8c8 2000 	streq.w	r2, [r8]
 8003c20:	605a      	strne	r2, [r3, #4]
 8003c22:	e7eb      	b.n	8003bfc <_malloc_r+0xa8>
 8003c24:	4623      	mov	r3, r4
 8003c26:	6864      	ldr	r4, [r4, #4]
 8003c28:	e7ae      	b.n	8003b88 <_malloc_r+0x34>
 8003c2a:	463c      	mov	r4, r7
 8003c2c:	687f      	ldr	r7, [r7, #4]
 8003c2e:	e7b6      	b.n	8003b9e <_malloc_r+0x4a>
 8003c30:	461a      	mov	r2, r3
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	42a3      	cmp	r3, r4
 8003c36:	d1fb      	bne.n	8003c30 <_malloc_r+0xdc>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	6053      	str	r3, [r2, #4]
 8003c3c:	e7de      	b.n	8003bfc <_malloc_r+0xa8>
 8003c3e:	230c      	movs	r3, #12
 8003c40:	6033      	str	r3, [r6, #0]
 8003c42:	4630      	mov	r0, r6
 8003c44:	f000 f80c 	bl	8003c60 <__malloc_unlock>
 8003c48:	e794      	b.n	8003b74 <_malloc_r+0x20>
 8003c4a:	6005      	str	r5, [r0, #0]
 8003c4c:	e7d6      	b.n	8003bfc <_malloc_r+0xa8>
 8003c4e:	bf00      	nop
 8003c50:	20000294 	.word	0x20000294

08003c54 <__malloc_lock>:
 8003c54:	4801      	ldr	r0, [pc, #4]	@ (8003c5c <__malloc_lock+0x8>)
 8003c56:	f7ff bf0e 	b.w	8003a76 <__retarget_lock_acquire_recursive>
 8003c5a:	bf00      	nop
 8003c5c:	2000028c 	.word	0x2000028c

08003c60 <__malloc_unlock>:
 8003c60:	4801      	ldr	r0, [pc, #4]	@ (8003c68 <__malloc_unlock+0x8>)
 8003c62:	f7ff bf09 	b.w	8003a78 <__retarget_lock_release_recursive>
 8003c66:	bf00      	nop
 8003c68:	2000028c 	.word	0x2000028c

08003c6c <__sfputc_r>:
 8003c6c:	6893      	ldr	r3, [r2, #8]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	b410      	push	{r4}
 8003c74:	6093      	str	r3, [r2, #8]
 8003c76:	da08      	bge.n	8003c8a <__sfputc_r+0x1e>
 8003c78:	6994      	ldr	r4, [r2, #24]
 8003c7a:	42a3      	cmp	r3, r4
 8003c7c:	db01      	blt.n	8003c82 <__sfputc_r+0x16>
 8003c7e:	290a      	cmp	r1, #10
 8003c80:	d103      	bne.n	8003c8a <__sfputc_r+0x1e>
 8003c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c86:	f7ff bde8 	b.w	800385a <__swbuf_r>
 8003c8a:	6813      	ldr	r3, [r2, #0]
 8003c8c:	1c58      	adds	r0, r3, #1
 8003c8e:	6010      	str	r0, [r2, #0]
 8003c90:	7019      	strb	r1, [r3, #0]
 8003c92:	4608      	mov	r0, r1
 8003c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <__sfputs_r>:
 8003c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9c:	4606      	mov	r6, r0
 8003c9e:	460f      	mov	r7, r1
 8003ca0:	4614      	mov	r4, r2
 8003ca2:	18d5      	adds	r5, r2, r3
 8003ca4:	42ac      	cmp	r4, r5
 8003ca6:	d101      	bne.n	8003cac <__sfputs_r+0x12>
 8003ca8:	2000      	movs	r0, #0
 8003caa:	e007      	b.n	8003cbc <__sfputs_r+0x22>
 8003cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cb0:	463a      	mov	r2, r7
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	f7ff ffda 	bl	8003c6c <__sfputc_r>
 8003cb8:	1c43      	adds	r3, r0, #1
 8003cba:	d1f3      	bne.n	8003ca4 <__sfputs_r+0xa>
 8003cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cc0 <_vfiprintf_r>:
 8003cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc4:	460d      	mov	r5, r1
 8003cc6:	b09d      	sub	sp, #116	@ 0x74
 8003cc8:	4614      	mov	r4, r2
 8003cca:	4698      	mov	r8, r3
 8003ccc:	4606      	mov	r6, r0
 8003cce:	b118      	cbz	r0, 8003cd8 <_vfiprintf_r+0x18>
 8003cd0:	6a03      	ldr	r3, [r0, #32]
 8003cd2:	b90b      	cbnz	r3, 8003cd8 <_vfiprintf_r+0x18>
 8003cd4:	f7ff fcd8 	bl	8003688 <__sinit>
 8003cd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003cda:	07d9      	lsls	r1, r3, #31
 8003cdc:	d405      	bmi.n	8003cea <_vfiprintf_r+0x2a>
 8003cde:	89ab      	ldrh	r3, [r5, #12]
 8003ce0:	059a      	lsls	r2, r3, #22
 8003ce2:	d402      	bmi.n	8003cea <_vfiprintf_r+0x2a>
 8003ce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ce6:	f7ff fec6 	bl	8003a76 <__retarget_lock_acquire_recursive>
 8003cea:	89ab      	ldrh	r3, [r5, #12]
 8003cec:	071b      	lsls	r3, r3, #28
 8003cee:	d501      	bpl.n	8003cf4 <_vfiprintf_r+0x34>
 8003cf0:	692b      	ldr	r3, [r5, #16]
 8003cf2:	b99b      	cbnz	r3, 8003d1c <_vfiprintf_r+0x5c>
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	f7ff fdee 	bl	80038d8 <__swsetup_r>
 8003cfc:	b170      	cbz	r0, 8003d1c <_vfiprintf_r+0x5c>
 8003cfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d00:	07dc      	lsls	r4, r3, #31
 8003d02:	d504      	bpl.n	8003d0e <_vfiprintf_r+0x4e>
 8003d04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d08:	b01d      	add	sp, #116	@ 0x74
 8003d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d0e:	89ab      	ldrh	r3, [r5, #12]
 8003d10:	0598      	lsls	r0, r3, #22
 8003d12:	d4f7      	bmi.n	8003d04 <_vfiprintf_r+0x44>
 8003d14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d16:	f7ff feaf 	bl	8003a78 <__retarget_lock_release_recursive>
 8003d1a:	e7f3      	b.n	8003d04 <_vfiprintf_r+0x44>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d20:	2320      	movs	r3, #32
 8003d22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d26:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d2a:	2330      	movs	r3, #48	@ 0x30
 8003d2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003edc <_vfiprintf_r+0x21c>
 8003d30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d34:	f04f 0901 	mov.w	r9, #1
 8003d38:	4623      	mov	r3, r4
 8003d3a:	469a      	mov	sl, r3
 8003d3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d40:	b10a      	cbz	r2, 8003d46 <_vfiprintf_r+0x86>
 8003d42:	2a25      	cmp	r2, #37	@ 0x25
 8003d44:	d1f9      	bne.n	8003d3a <_vfiprintf_r+0x7a>
 8003d46:	ebba 0b04 	subs.w	fp, sl, r4
 8003d4a:	d00b      	beq.n	8003d64 <_vfiprintf_r+0xa4>
 8003d4c:	465b      	mov	r3, fp
 8003d4e:	4622      	mov	r2, r4
 8003d50:	4629      	mov	r1, r5
 8003d52:	4630      	mov	r0, r6
 8003d54:	f7ff ffa1 	bl	8003c9a <__sfputs_r>
 8003d58:	3001      	adds	r0, #1
 8003d5a:	f000 80a7 	beq.w	8003eac <_vfiprintf_r+0x1ec>
 8003d5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d60:	445a      	add	r2, fp
 8003d62:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d64:	f89a 3000 	ldrb.w	r3, [sl]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 809f 	beq.w	8003eac <_vfiprintf_r+0x1ec>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d78:	f10a 0a01 	add.w	sl, sl, #1
 8003d7c:	9304      	str	r3, [sp, #16]
 8003d7e:	9307      	str	r3, [sp, #28]
 8003d80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d84:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d86:	4654      	mov	r4, sl
 8003d88:	2205      	movs	r2, #5
 8003d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d8e:	4853      	ldr	r0, [pc, #332]	@ (8003edc <_vfiprintf_r+0x21c>)
 8003d90:	f7fc fa26 	bl	80001e0 <memchr>
 8003d94:	9a04      	ldr	r2, [sp, #16]
 8003d96:	b9d8      	cbnz	r0, 8003dd0 <_vfiprintf_r+0x110>
 8003d98:	06d1      	lsls	r1, r2, #27
 8003d9a:	bf44      	itt	mi
 8003d9c:	2320      	movmi	r3, #32
 8003d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003da2:	0713      	lsls	r3, r2, #28
 8003da4:	bf44      	itt	mi
 8003da6:	232b      	movmi	r3, #43	@ 0x2b
 8003da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003dac:	f89a 3000 	ldrb.w	r3, [sl]
 8003db0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003db2:	d015      	beq.n	8003de0 <_vfiprintf_r+0x120>
 8003db4:	9a07      	ldr	r2, [sp, #28]
 8003db6:	4654      	mov	r4, sl
 8003db8:	2000      	movs	r0, #0
 8003dba:	f04f 0c0a 	mov.w	ip, #10
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dc4:	3b30      	subs	r3, #48	@ 0x30
 8003dc6:	2b09      	cmp	r3, #9
 8003dc8:	d94b      	bls.n	8003e62 <_vfiprintf_r+0x1a2>
 8003dca:	b1b0      	cbz	r0, 8003dfa <_vfiprintf_r+0x13a>
 8003dcc:	9207      	str	r2, [sp, #28]
 8003dce:	e014      	b.n	8003dfa <_vfiprintf_r+0x13a>
 8003dd0:	eba0 0308 	sub.w	r3, r0, r8
 8003dd4:	fa09 f303 	lsl.w	r3, r9, r3
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	9304      	str	r3, [sp, #16]
 8003ddc:	46a2      	mov	sl, r4
 8003dde:	e7d2      	b.n	8003d86 <_vfiprintf_r+0xc6>
 8003de0:	9b03      	ldr	r3, [sp, #12]
 8003de2:	1d19      	adds	r1, r3, #4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	9103      	str	r1, [sp, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	bfbb      	ittet	lt
 8003dec:	425b      	neglt	r3, r3
 8003dee:	f042 0202 	orrlt.w	r2, r2, #2
 8003df2:	9307      	strge	r3, [sp, #28]
 8003df4:	9307      	strlt	r3, [sp, #28]
 8003df6:	bfb8      	it	lt
 8003df8:	9204      	strlt	r2, [sp, #16]
 8003dfa:	7823      	ldrb	r3, [r4, #0]
 8003dfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8003dfe:	d10a      	bne.n	8003e16 <_vfiprintf_r+0x156>
 8003e00:	7863      	ldrb	r3, [r4, #1]
 8003e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e04:	d132      	bne.n	8003e6c <_vfiprintf_r+0x1ac>
 8003e06:	9b03      	ldr	r3, [sp, #12]
 8003e08:	1d1a      	adds	r2, r3, #4
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	9203      	str	r2, [sp, #12]
 8003e0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e12:	3402      	adds	r4, #2
 8003e14:	9305      	str	r3, [sp, #20]
 8003e16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003eec <_vfiprintf_r+0x22c>
 8003e1a:	7821      	ldrb	r1, [r4, #0]
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	4650      	mov	r0, sl
 8003e20:	f7fc f9de 	bl	80001e0 <memchr>
 8003e24:	b138      	cbz	r0, 8003e36 <_vfiprintf_r+0x176>
 8003e26:	9b04      	ldr	r3, [sp, #16]
 8003e28:	eba0 000a 	sub.w	r0, r0, sl
 8003e2c:	2240      	movs	r2, #64	@ 0x40
 8003e2e:	4082      	lsls	r2, r0
 8003e30:	4313      	orrs	r3, r2
 8003e32:	3401      	adds	r4, #1
 8003e34:	9304      	str	r3, [sp, #16]
 8003e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e3a:	4829      	ldr	r0, [pc, #164]	@ (8003ee0 <_vfiprintf_r+0x220>)
 8003e3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e40:	2206      	movs	r2, #6
 8003e42:	f7fc f9cd 	bl	80001e0 <memchr>
 8003e46:	2800      	cmp	r0, #0
 8003e48:	d03f      	beq.n	8003eca <_vfiprintf_r+0x20a>
 8003e4a:	4b26      	ldr	r3, [pc, #152]	@ (8003ee4 <_vfiprintf_r+0x224>)
 8003e4c:	bb1b      	cbnz	r3, 8003e96 <_vfiprintf_r+0x1d6>
 8003e4e:	9b03      	ldr	r3, [sp, #12]
 8003e50:	3307      	adds	r3, #7
 8003e52:	f023 0307 	bic.w	r3, r3, #7
 8003e56:	3308      	adds	r3, #8
 8003e58:	9303      	str	r3, [sp, #12]
 8003e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e5c:	443b      	add	r3, r7
 8003e5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e60:	e76a      	b.n	8003d38 <_vfiprintf_r+0x78>
 8003e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e66:	460c      	mov	r4, r1
 8003e68:	2001      	movs	r0, #1
 8003e6a:	e7a8      	b.n	8003dbe <_vfiprintf_r+0xfe>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	3401      	adds	r4, #1
 8003e70:	9305      	str	r3, [sp, #20]
 8003e72:	4619      	mov	r1, r3
 8003e74:	f04f 0c0a 	mov.w	ip, #10
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e7e:	3a30      	subs	r2, #48	@ 0x30
 8003e80:	2a09      	cmp	r2, #9
 8003e82:	d903      	bls.n	8003e8c <_vfiprintf_r+0x1cc>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0c6      	beq.n	8003e16 <_vfiprintf_r+0x156>
 8003e88:	9105      	str	r1, [sp, #20]
 8003e8a:	e7c4      	b.n	8003e16 <_vfiprintf_r+0x156>
 8003e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e90:	4604      	mov	r4, r0
 8003e92:	2301      	movs	r3, #1
 8003e94:	e7f0      	b.n	8003e78 <_vfiprintf_r+0x1b8>
 8003e96:	ab03      	add	r3, sp, #12
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	462a      	mov	r2, r5
 8003e9c:	4b12      	ldr	r3, [pc, #72]	@ (8003ee8 <_vfiprintf_r+0x228>)
 8003e9e:	a904      	add	r1, sp, #16
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	f3af 8000 	nop.w
 8003ea6:	4607      	mov	r7, r0
 8003ea8:	1c78      	adds	r0, r7, #1
 8003eaa:	d1d6      	bne.n	8003e5a <_vfiprintf_r+0x19a>
 8003eac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003eae:	07d9      	lsls	r1, r3, #31
 8003eb0:	d405      	bmi.n	8003ebe <_vfiprintf_r+0x1fe>
 8003eb2:	89ab      	ldrh	r3, [r5, #12]
 8003eb4:	059a      	lsls	r2, r3, #22
 8003eb6:	d402      	bmi.n	8003ebe <_vfiprintf_r+0x1fe>
 8003eb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003eba:	f7ff fddd 	bl	8003a78 <__retarget_lock_release_recursive>
 8003ebe:	89ab      	ldrh	r3, [r5, #12]
 8003ec0:	065b      	lsls	r3, r3, #25
 8003ec2:	f53f af1f 	bmi.w	8003d04 <_vfiprintf_r+0x44>
 8003ec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ec8:	e71e      	b.n	8003d08 <_vfiprintf_r+0x48>
 8003eca:	ab03      	add	r3, sp, #12
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	462a      	mov	r2, r5
 8003ed0:	4b05      	ldr	r3, [pc, #20]	@ (8003ee8 <_vfiprintf_r+0x228>)
 8003ed2:	a904      	add	r1, sp, #16
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	f000 f879 	bl	8003fcc <_printf_i>
 8003eda:	e7e4      	b.n	8003ea6 <_vfiprintf_r+0x1e6>
 8003edc:	08004618 	.word	0x08004618
 8003ee0:	08004622 	.word	0x08004622
 8003ee4:	00000000 	.word	0x00000000
 8003ee8:	08003c9b 	.word	0x08003c9b
 8003eec:	0800461e 	.word	0x0800461e

08003ef0 <_printf_common>:
 8003ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef4:	4616      	mov	r6, r2
 8003ef6:	4698      	mov	r8, r3
 8003ef8:	688a      	ldr	r2, [r1, #8]
 8003efa:	690b      	ldr	r3, [r1, #16]
 8003efc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f00:	4293      	cmp	r3, r2
 8003f02:	bfb8      	it	lt
 8003f04:	4613      	movlt	r3, r2
 8003f06:	6033      	str	r3, [r6, #0]
 8003f08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f0c:	4607      	mov	r7, r0
 8003f0e:	460c      	mov	r4, r1
 8003f10:	b10a      	cbz	r2, 8003f16 <_printf_common+0x26>
 8003f12:	3301      	adds	r3, #1
 8003f14:	6033      	str	r3, [r6, #0]
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	0699      	lsls	r1, r3, #26
 8003f1a:	bf42      	ittt	mi
 8003f1c:	6833      	ldrmi	r3, [r6, #0]
 8003f1e:	3302      	addmi	r3, #2
 8003f20:	6033      	strmi	r3, [r6, #0]
 8003f22:	6825      	ldr	r5, [r4, #0]
 8003f24:	f015 0506 	ands.w	r5, r5, #6
 8003f28:	d106      	bne.n	8003f38 <_printf_common+0x48>
 8003f2a:	f104 0a19 	add.w	sl, r4, #25
 8003f2e:	68e3      	ldr	r3, [r4, #12]
 8003f30:	6832      	ldr	r2, [r6, #0]
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	42ab      	cmp	r3, r5
 8003f36:	dc26      	bgt.n	8003f86 <_printf_common+0x96>
 8003f38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f3c:	6822      	ldr	r2, [r4, #0]
 8003f3e:	3b00      	subs	r3, #0
 8003f40:	bf18      	it	ne
 8003f42:	2301      	movne	r3, #1
 8003f44:	0692      	lsls	r2, r2, #26
 8003f46:	d42b      	bmi.n	8003fa0 <_printf_common+0xb0>
 8003f48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f4c:	4641      	mov	r1, r8
 8003f4e:	4638      	mov	r0, r7
 8003f50:	47c8      	blx	r9
 8003f52:	3001      	adds	r0, #1
 8003f54:	d01e      	beq.n	8003f94 <_printf_common+0xa4>
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	6922      	ldr	r2, [r4, #16]
 8003f5a:	f003 0306 	and.w	r3, r3, #6
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	bf02      	ittt	eq
 8003f62:	68e5      	ldreq	r5, [r4, #12]
 8003f64:	6833      	ldreq	r3, [r6, #0]
 8003f66:	1aed      	subeq	r5, r5, r3
 8003f68:	68a3      	ldr	r3, [r4, #8]
 8003f6a:	bf0c      	ite	eq
 8003f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f70:	2500      	movne	r5, #0
 8003f72:	4293      	cmp	r3, r2
 8003f74:	bfc4      	itt	gt
 8003f76:	1a9b      	subgt	r3, r3, r2
 8003f78:	18ed      	addgt	r5, r5, r3
 8003f7a:	2600      	movs	r6, #0
 8003f7c:	341a      	adds	r4, #26
 8003f7e:	42b5      	cmp	r5, r6
 8003f80:	d11a      	bne.n	8003fb8 <_printf_common+0xc8>
 8003f82:	2000      	movs	r0, #0
 8003f84:	e008      	b.n	8003f98 <_printf_common+0xa8>
 8003f86:	2301      	movs	r3, #1
 8003f88:	4652      	mov	r2, sl
 8003f8a:	4641      	mov	r1, r8
 8003f8c:	4638      	mov	r0, r7
 8003f8e:	47c8      	blx	r9
 8003f90:	3001      	adds	r0, #1
 8003f92:	d103      	bne.n	8003f9c <_printf_common+0xac>
 8003f94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f9c:	3501      	adds	r5, #1
 8003f9e:	e7c6      	b.n	8003f2e <_printf_common+0x3e>
 8003fa0:	18e1      	adds	r1, r4, r3
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	2030      	movs	r0, #48	@ 0x30
 8003fa6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003faa:	4422      	add	r2, r4
 8003fac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	e7c7      	b.n	8003f48 <_printf_common+0x58>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	4622      	mov	r2, r4
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	4638      	mov	r0, r7
 8003fc0:	47c8      	blx	r9
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	d0e6      	beq.n	8003f94 <_printf_common+0xa4>
 8003fc6:	3601      	adds	r6, #1
 8003fc8:	e7d9      	b.n	8003f7e <_printf_common+0x8e>
	...

08003fcc <_printf_i>:
 8003fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd0:	7e0f      	ldrb	r7, [r1, #24]
 8003fd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003fd4:	2f78      	cmp	r7, #120	@ 0x78
 8003fd6:	4691      	mov	r9, r2
 8003fd8:	4680      	mov	r8, r0
 8003fda:	460c      	mov	r4, r1
 8003fdc:	469a      	mov	sl, r3
 8003fde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003fe2:	d807      	bhi.n	8003ff4 <_printf_i+0x28>
 8003fe4:	2f62      	cmp	r7, #98	@ 0x62
 8003fe6:	d80a      	bhi.n	8003ffe <_printf_i+0x32>
 8003fe8:	2f00      	cmp	r7, #0
 8003fea:	f000 80d2 	beq.w	8004192 <_printf_i+0x1c6>
 8003fee:	2f58      	cmp	r7, #88	@ 0x58
 8003ff0:	f000 80b9 	beq.w	8004166 <_printf_i+0x19a>
 8003ff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ff8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ffc:	e03a      	b.n	8004074 <_printf_i+0xa8>
 8003ffe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004002:	2b15      	cmp	r3, #21
 8004004:	d8f6      	bhi.n	8003ff4 <_printf_i+0x28>
 8004006:	a101      	add	r1, pc, #4	@ (adr r1, 800400c <_printf_i+0x40>)
 8004008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800400c:	08004065 	.word	0x08004065
 8004010:	08004079 	.word	0x08004079
 8004014:	08003ff5 	.word	0x08003ff5
 8004018:	08003ff5 	.word	0x08003ff5
 800401c:	08003ff5 	.word	0x08003ff5
 8004020:	08003ff5 	.word	0x08003ff5
 8004024:	08004079 	.word	0x08004079
 8004028:	08003ff5 	.word	0x08003ff5
 800402c:	08003ff5 	.word	0x08003ff5
 8004030:	08003ff5 	.word	0x08003ff5
 8004034:	08003ff5 	.word	0x08003ff5
 8004038:	08004179 	.word	0x08004179
 800403c:	080040a3 	.word	0x080040a3
 8004040:	08004133 	.word	0x08004133
 8004044:	08003ff5 	.word	0x08003ff5
 8004048:	08003ff5 	.word	0x08003ff5
 800404c:	0800419b 	.word	0x0800419b
 8004050:	08003ff5 	.word	0x08003ff5
 8004054:	080040a3 	.word	0x080040a3
 8004058:	08003ff5 	.word	0x08003ff5
 800405c:	08003ff5 	.word	0x08003ff5
 8004060:	0800413b 	.word	0x0800413b
 8004064:	6833      	ldr	r3, [r6, #0]
 8004066:	1d1a      	adds	r2, r3, #4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6032      	str	r2, [r6, #0]
 800406c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004070:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004074:	2301      	movs	r3, #1
 8004076:	e09d      	b.n	80041b4 <_printf_i+0x1e8>
 8004078:	6833      	ldr	r3, [r6, #0]
 800407a:	6820      	ldr	r0, [r4, #0]
 800407c:	1d19      	adds	r1, r3, #4
 800407e:	6031      	str	r1, [r6, #0]
 8004080:	0606      	lsls	r6, r0, #24
 8004082:	d501      	bpl.n	8004088 <_printf_i+0xbc>
 8004084:	681d      	ldr	r5, [r3, #0]
 8004086:	e003      	b.n	8004090 <_printf_i+0xc4>
 8004088:	0645      	lsls	r5, r0, #25
 800408a:	d5fb      	bpl.n	8004084 <_printf_i+0xb8>
 800408c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004090:	2d00      	cmp	r5, #0
 8004092:	da03      	bge.n	800409c <_printf_i+0xd0>
 8004094:	232d      	movs	r3, #45	@ 0x2d
 8004096:	426d      	negs	r5, r5
 8004098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800409c:	4859      	ldr	r0, [pc, #356]	@ (8004204 <_printf_i+0x238>)
 800409e:	230a      	movs	r3, #10
 80040a0:	e011      	b.n	80040c6 <_printf_i+0xfa>
 80040a2:	6821      	ldr	r1, [r4, #0]
 80040a4:	6833      	ldr	r3, [r6, #0]
 80040a6:	0608      	lsls	r0, r1, #24
 80040a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80040ac:	d402      	bmi.n	80040b4 <_printf_i+0xe8>
 80040ae:	0649      	lsls	r1, r1, #25
 80040b0:	bf48      	it	mi
 80040b2:	b2ad      	uxthmi	r5, r5
 80040b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80040b6:	4853      	ldr	r0, [pc, #332]	@ (8004204 <_printf_i+0x238>)
 80040b8:	6033      	str	r3, [r6, #0]
 80040ba:	bf14      	ite	ne
 80040bc:	230a      	movne	r3, #10
 80040be:	2308      	moveq	r3, #8
 80040c0:	2100      	movs	r1, #0
 80040c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040c6:	6866      	ldr	r6, [r4, #4]
 80040c8:	60a6      	str	r6, [r4, #8]
 80040ca:	2e00      	cmp	r6, #0
 80040cc:	bfa2      	ittt	ge
 80040ce:	6821      	ldrge	r1, [r4, #0]
 80040d0:	f021 0104 	bicge.w	r1, r1, #4
 80040d4:	6021      	strge	r1, [r4, #0]
 80040d6:	b90d      	cbnz	r5, 80040dc <_printf_i+0x110>
 80040d8:	2e00      	cmp	r6, #0
 80040da:	d04b      	beq.n	8004174 <_printf_i+0x1a8>
 80040dc:	4616      	mov	r6, r2
 80040de:	fbb5 f1f3 	udiv	r1, r5, r3
 80040e2:	fb03 5711 	mls	r7, r3, r1, r5
 80040e6:	5dc7      	ldrb	r7, [r0, r7]
 80040e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040ec:	462f      	mov	r7, r5
 80040ee:	42bb      	cmp	r3, r7
 80040f0:	460d      	mov	r5, r1
 80040f2:	d9f4      	bls.n	80040de <_printf_i+0x112>
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d10b      	bne.n	8004110 <_printf_i+0x144>
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	07df      	lsls	r7, r3, #31
 80040fc:	d508      	bpl.n	8004110 <_printf_i+0x144>
 80040fe:	6923      	ldr	r3, [r4, #16]
 8004100:	6861      	ldr	r1, [r4, #4]
 8004102:	4299      	cmp	r1, r3
 8004104:	bfde      	ittt	le
 8004106:	2330      	movle	r3, #48	@ 0x30
 8004108:	f806 3c01 	strble.w	r3, [r6, #-1]
 800410c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004110:	1b92      	subs	r2, r2, r6
 8004112:	6122      	str	r2, [r4, #16]
 8004114:	f8cd a000 	str.w	sl, [sp]
 8004118:	464b      	mov	r3, r9
 800411a:	aa03      	add	r2, sp, #12
 800411c:	4621      	mov	r1, r4
 800411e:	4640      	mov	r0, r8
 8004120:	f7ff fee6 	bl	8003ef0 <_printf_common>
 8004124:	3001      	adds	r0, #1
 8004126:	d14a      	bne.n	80041be <_printf_i+0x1f2>
 8004128:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800412c:	b004      	add	sp, #16
 800412e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	f043 0320 	orr.w	r3, r3, #32
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	4833      	ldr	r0, [pc, #204]	@ (8004208 <_printf_i+0x23c>)
 800413c:	2778      	movs	r7, #120	@ 0x78
 800413e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	6831      	ldr	r1, [r6, #0]
 8004146:	061f      	lsls	r7, r3, #24
 8004148:	f851 5b04 	ldr.w	r5, [r1], #4
 800414c:	d402      	bmi.n	8004154 <_printf_i+0x188>
 800414e:	065f      	lsls	r7, r3, #25
 8004150:	bf48      	it	mi
 8004152:	b2ad      	uxthmi	r5, r5
 8004154:	6031      	str	r1, [r6, #0]
 8004156:	07d9      	lsls	r1, r3, #31
 8004158:	bf44      	itt	mi
 800415a:	f043 0320 	orrmi.w	r3, r3, #32
 800415e:	6023      	strmi	r3, [r4, #0]
 8004160:	b11d      	cbz	r5, 800416a <_printf_i+0x19e>
 8004162:	2310      	movs	r3, #16
 8004164:	e7ac      	b.n	80040c0 <_printf_i+0xf4>
 8004166:	4827      	ldr	r0, [pc, #156]	@ (8004204 <_printf_i+0x238>)
 8004168:	e7e9      	b.n	800413e <_printf_i+0x172>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	f023 0320 	bic.w	r3, r3, #32
 8004170:	6023      	str	r3, [r4, #0]
 8004172:	e7f6      	b.n	8004162 <_printf_i+0x196>
 8004174:	4616      	mov	r6, r2
 8004176:	e7bd      	b.n	80040f4 <_printf_i+0x128>
 8004178:	6833      	ldr	r3, [r6, #0]
 800417a:	6825      	ldr	r5, [r4, #0]
 800417c:	6961      	ldr	r1, [r4, #20]
 800417e:	1d18      	adds	r0, r3, #4
 8004180:	6030      	str	r0, [r6, #0]
 8004182:	062e      	lsls	r6, r5, #24
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	d501      	bpl.n	800418c <_printf_i+0x1c0>
 8004188:	6019      	str	r1, [r3, #0]
 800418a:	e002      	b.n	8004192 <_printf_i+0x1c6>
 800418c:	0668      	lsls	r0, r5, #25
 800418e:	d5fb      	bpl.n	8004188 <_printf_i+0x1bc>
 8004190:	8019      	strh	r1, [r3, #0]
 8004192:	2300      	movs	r3, #0
 8004194:	6123      	str	r3, [r4, #16]
 8004196:	4616      	mov	r6, r2
 8004198:	e7bc      	b.n	8004114 <_printf_i+0x148>
 800419a:	6833      	ldr	r3, [r6, #0]
 800419c:	1d1a      	adds	r2, r3, #4
 800419e:	6032      	str	r2, [r6, #0]
 80041a0:	681e      	ldr	r6, [r3, #0]
 80041a2:	6862      	ldr	r2, [r4, #4]
 80041a4:	2100      	movs	r1, #0
 80041a6:	4630      	mov	r0, r6
 80041a8:	f7fc f81a 	bl	80001e0 <memchr>
 80041ac:	b108      	cbz	r0, 80041b2 <_printf_i+0x1e6>
 80041ae:	1b80      	subs	r0, r0, r6
 80041b0:	6060      	str	r0, [r4, #4]
 80041b2:	6863      	ldr	r3, [r4, #4]
 80041b4:	6123      	str	r3, [r4, #16]
 80041b6:	2300      	movs	r3, #0
 80041b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041bc:	e7aa      	b.n	8004114 <_printf_i+0x148>
 80041be:	6923      	ldr	r3, [r4, #16]
 80041c0:	4632      	mov	r2, r6
 80041c2:	4649      	mov	r1, r9
 80041c4:	4640      	mov	r0, r8
 80041c6:	47d0      	blx	sl
 80041c8:	3001      	adds	r0, #1
 80041ca:	d0ad      	beq.n	8004128 <_printf_i+0x15c>
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	079b      	lsls	r3, r3, #30
 80041d0:	d413      	bmi.n	80041fa <_printf_i+0x22e>
 80041d2:	68e0      	ldr	r0, [r4, #12]
 80041d4:	9b03      	ldr	r3, [sp, #12]
 80041d6:	4298      	cmp	r0, r3
 80041d8:	bfb8      	it	lt
 80041da:	4618      	movlt	r0, r3
 80041dc:	e7a6      	b.n	800412c <_printf_i+0x160>
 80041de:	2301      	movs	r3, #1
 80041e0:	4632      	mov	r2, r6
 80041e2:	4649      	mov	r1, r9
 80041e4:	4640      	mov	r0, r8
 80041e6:	47d0      	blx	sl
 80041e8:	3001      	adds	r0, #1
 80041ea:	d09d      	beq.n	8004128 <_printf_i+0x15c>
 80041ec:	3501      	adds	r5, #1
 80041ee:	68e3      	ldr	r3, [r4, #12]
 80041f0:	9903      	ldr	r1, [sp, #12]
 80041f2:	1a5b      	subs	r3, r3, r1
 80041f4:	42ab      	cmp	r3, r5
 80041f6:	dcf2      	bgt.n	80041de <_printf_i+0x212>
 80041f8:	e7eb      	b.n	80041d2 <_printf_i+0x206>
 80041fa:	2500      	movs	r5, #0
 80041fc:	f104 0619 	add.w	r6, r4, #25
 8004200:	e7f5      	b.n	80041ee <_printf_i+0x222>
 8004202:	bf00      	nop
 8004204:	08004629 	.word	0x08004629
 8004208:	0800463a 	.word	0x0800463a

0800420c <__sflush_r>:
 800420c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004214:	0716      	lsls	r6, r2, #28
 8004216:	4605      	mov	r5, r0
 8004218:	460c      	mov	r4, r1
 800421a:	d454      	bmi.n	80042c6 <__sflush_r+0xba>
 800421c:	684b      	ldr	r3, [r1, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	dc02      	bgt.n	8004228 <__sflush_r+0x1c>
 8004222:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	dd48      	ble.n	80042ba <__sflush_r+0xae>
 8004228:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800422a:	2e00      	cmp	r6, #0
 800422c:	d045      	beq.n	80042ba <__sflush_r+0xae>
 800422e:	2300      	movs	r3, #0
 8004230:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004234:	682f      	ldr	r7, [r5, #0]
 8004236:	6a21      	ldr	r1, [r4, #32]
 8004238:	602b      	str	r3, [r5, #0]
 800423a:	d030      	beq.n	800429e <__sflush_r+0x92>
 800423c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800423e:	89a3      	ldrh	r3, [r4, #12]
 8004240:	0759      	lsls	r1, r3, #29
 8004242:	d505      	bpl.n	8004250 <__sflush_r+0x44>
 8004244:	6863      	ldr	r3, [r4, #4]
 8004246:	1ad2      	subs	r2, r2, r3
 8004248:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800424a:	b10b      	cbz	r3, 8004250 <__sflush_r+0x44>
 800424c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800424e:	1ad2      	subs	r2, r2, r3
 8004250:	2300      	movs	r3, #0
 8004252:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004254:	6a21      	ldr	r1, [r4, #32]
 8004256:	4628      	mov	r0, r5
 8004258:	47b0      	blx	r6
 800425a:	1c43      	adds	r3, r0, #1
 800425c:	89a3      	ldrh	r3, [r4, #12]
 800425e:	d106      	bne.n	800426e <__sflush_r+0x62>
 8004260:	6829      	ldr	r1, [r5, #0]
 8004262:	291d      	cmp	r1, #29
 8004264:	d82b      	bhi.n	80042be <__sflush_r+0xb2>
 8004266:	4a2a      	ldr	r2, [pc, #168]	@ (8004310 <__sflush_r+0x104>)
 8004268:	410a      	asrs	r2, r1
 800426a:	07d6      	lsls	r6, r2, #31
 800426c:	d427      	bmi.n	80042be <__sflush_r+0xb2>
 800426e:	2200      	movs	r2, #0
 8004270:	6062      	str	r2, [r4, #4]
 8004272:	04d9      	lsls	r1, r3, #19
 8004274:	6922      	ldr	r2, [r4, #16]
 8004276:	6022      	str	r2, [r4, #0]
 8004278:	d504      	bpl.n	8004284 <__sflush_r+0x78>
 800427a:	1c42      	adds	r2, r0, #1
 800427c:	d101      	bne.n	8004282 <__sflush_r+0x76>
 800427e:	682b      	ldr	r3, [r5, #0]
 8004280:	b903      	cbnz	r3, 8004284 <__sflush_r+0x78>
 8004282:	6560      	str	r0, [r4, #84]	@ 0x54
 8004284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004286:	602f      	str	r7, [r5, #0]
 8004288:	b1b9      	cbz	r1, 80042ba <__sflush_r+0xae>
 800428a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800428e:	4299      	cmp	r1, r3
 8004290:	d002      	beq.n	8004298 <__sflush_r+0x8c>
 8004292:	4628      	mov	r0, r5
 8004294:	f7ff fbf2 	bl	8003a7c <_free_r>
 8004298:	2300      	movs	r3, #0
 800429a:	6363      	str	r3, [r4, #52]	@ 0x34
 800429c:	e00d      	b.n	80042ba <__sflush_r+0xae>
 800429e:	2301      	movs	r3, #1
 80042a0:	4628      	mov	r0, r5
 80042a2:	47b0      	blx	r6
 80042a4:	4602      	mov	r2, r0
 80042a6:	1c50      	adds	r0, r2, #1
 80042a8:	d1c9      	bne.n	800423e <__sflush_r+0x32>
 80042aa:	682b      	ldr	r3, [r5, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0c6      	beq.n	800423e <__sflush_r+0x32>
 80042b0:	2b1d      	cmp	r3, #29
 80042b2:	d001      	beq.n	80042b8 <__sflush_r+0xac>
 80042b4:	2b16      	cmp	r3, #22
 80042b6:	d11e      	bne.n	80042f6 <__sflush_r+0xea>
 80042b8:	602f      	str	r7, [r5, #0]
 80042ba:	2000      	movs	r0, #0
 80042bc:	e022      	b.n	8004304 <__sflush_r+0xf8>
 80042be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042c2:	b21b      	sxth	r3, r3
 80042c4:	e01b      	b.n	80042fe <__sflush_r+0xf2>
 80042c6:	690f      	ldr	r7, [r1, #16]
 80042c8:	2f00      	cmp	r7, #0
 80042ca:	d0f6      	beq.n	80042ba <__sflush_r+0xae>
 80042cc:	0793      	lsls	r3, r2, #30
 80042ce:	680e      	ldr	r6, [r1, #0]
 80042d0:	bf08      	it	eq
 80042d2:	694b      	ldreq	r3, [r1, #20]
 80042d4:	600f      	str	r7, [r1, #0]
 80042d6:	bf18      	it	ne
 80042d8:	2300      	movne	r3, #0
 80042da:	eba6 0807 	sub.w	r8, r6, r7
 80042de:	608b      	str	r3, [r1, #8]
 80042e0:	f1b8 0f00 	cmp.w	r8, #0
 80042e4:	dde9      	ble.n	80042ba <__sflush_r+0xae>
 80042e6:	6a21      	ldr	r1, [r4, #32]
 80042e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80042ea:	4643      	mov	r3, r8
 80042ec:	463a      	mov	r2, r7
 80042ee:	4628      	mov	r0, r5
 80042f0:	47b0      	blx	r6
 80042f2:	2800      	cmp	r0, #0
 80042f4:	dc08      	bgt.n	8004308 <__sflush_r+0xfc>
 80042f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042fe:	81a3      	strh	r3, [r4, #12]
 8004300:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004308:	4407      	add	r7, r0
 800430a:	eba8 0800 	sub.w	r8, r8, r0
 800430e:	e7e7      	b.n	80042e0 <__sflush_r+0xd4>
 8004310:	dfbffffe 	.word	0xdfbffffe

08004314 <_fflush_r>:
 8004314:	b538      	push	{r3, r4, r5, lr}
 8004316:	690b      	ldr	r3, [r1, #16]
 8004318:	4605      	mov	r5, r0
 800431a:	460c      	mov	r4, r1
 800431c:	b913      	cbnz	r3, 8004324 <_fflush_r+0x10>
 800431e:	2500      	movs	r5, #0
 8004320:	4628      	mov	r0, r5
 8004322:	bd38      	pop	{r3, r4, r5, pc}
 8004324:	b118      	cbz	r0, 800432e <_fflush_r+0x1a>
 8004326:	6a03      	ldr	r3, [r0, #32]
 8004328:	b90b      	cbnz	r3, 800432e <_fflush_r+0x1a>
 800432a:	f7ff f9ad 	bl	8003688 <__sinit>
 800432e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f3      	beq.n	800431e <_fflush_r+0xa>
 8004336:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004338:	07d0      	lsls	r0, r2, #31
 800433a:	d404      	bmi.n	8004346 <_fflush_r+0x32>
 800433c:	0599      	lsls	r1, r3, #22
 800433e:	d402      	bmi.n	8004346 <_fflush_r+0x32>
 8004340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004342:	f7ff fb98 	bl	8003a76 <__retarget_lock_acquire_recursive>
 8004346:	4628      	mov	r0, r5
 8004348:	4621      	mov	r1, r4
 800434a:	f7ff ff5f 	bl	800420c <__sflush_r>
 800434e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004350:	07da      	lsls	r2, r3, #31
 8004352:	4605      	mov	r5, r0
 8004354:	d4e4      	bmi.n	8004320 <_fflush_r+0xc>
 8004356:	89a3      	ldrh	r3, [r4, #12]
 8004358:	059b      	lsls	r3, r3, #22
 800435a:	d4e1      	bmi.n	8004320 <_fflush_r+0xc>
 800435c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800435e:	f7ff fb8b 	bl	8003a78 <__retarget_lock_release_recursive>
 8004362:	e7dd      	b.n	8004320 <_fflush_r+0xc>

08004364 <__swhatbuf_r>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	460c      	mov	r4, r1
 8004368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800436c:	2900      	cmp	r1, #0
 800436e:	b096      	sub	sp, #88	@ 0x58
 8004370:	4615      	mov	r5, r2
 8004372:	461e      	mov	r6, r3
 8004374:	da0d      	bge.n	8004392 <__swhatbuf_r+0x2e>
 8004376:	89a3      	ldrh	r3, [r4, #12]
 8004378:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800437c:	f04f 0100 	mov.w	r1, #0
 8004380:	bf14      	ite	ne
 8004382:	2340      	movne	r3, #64	@ 0x40
 8004384:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004388:	2000      	movs	r0, #0
 800438a:	6031      	str	r1, [r6, #0]
 800438c:	602b      	str	r3, [r5, #0]
 800438e:	b016      	add	sp, #88	@ 0x58
 8004390:	bd70      	pop	{r4, r5, r6, pc}
 8004392:	466a      	mov	r2, sp
 8004394:	f000 f848 	bl	8004428 <_fstat_r>
 8004398:	2800      	cmp	r0, #0
 800439a:	dbec      	blt.n	8004376 <__swhatbuf_r+0x12>
 800439c:	9901      	ldr	r1, [sp, #4]
 800439e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80043a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80043a6:	4259      	negs	r1, r3
 80043a8:	4159      	adcs	r1, r3
 80043aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043ae:	e7eb      	b.n	8004388 <__swhatbuf_r+0x24>

080043b0 <__smakebuf_r>:
 80043b0:	898b      	ldrh	r3, [r1, #12]
 80043b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043b4:	079d      	lsls	r5, r3, #30
 80043b6:	4606      	mov	r6, r0
 80043b8:	460c      	mov	r4, r1
 80043ba:	d507      	bpl.n	80043cc <__smakebuf_r+0x1c>
 80043bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	6123      	str	r3, [r4, #16]
 80043c4:	2301      	movs	r3, #1
 80043c6:	6163      	str	r3, [r4, #20]
 80043c8:	b003      	add	sp, #12
 80043ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043cc:	ab01      	add	r3, sp, #4
 80043ce:	466a      	mov	r2, sp
 80043d0:	f7ff ffc8 	bl	8004364 <__swhatbuf_r>
 80043d4:	9f00      	ldr	r7, [sp, #0]
 80043d6:	4605      	mov	r5, r0
 80043d8:	4639      	mov	r1, r7
 80043da:	4630      	mov	r0, r6
 80043dc:	f7ff fbba 	bl	8003b54 <_malloc_r>
 80043e0:	b948      	cbnz	r0, 80043f6 <__smakebuf_r+0x46>
 80043e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043e6:	059a      	lsls	r2, r3, #22
 80043e8:	d4ee      	bmi.n	80043c8 <__smakebuf_r+0x18>
 80043ea:	f023 0303 	bic.w	r3, r3, #3
 80043ee:	f043 0302 	orr.w	r3, r3, #2
 80043f2:	81a3      	strh	r3, [r4, #12]
 80043f4:	e7e2      	b.n	80043bc <__smakebuf_r+0xc>
 80043f6:	89a3      	ldrh	r3, [r4, #12]
 80043f8:	6020      	str	r0, [r4, #0]
 80043fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043fe:	81a3      	strh	r3, [r4, #12]
 8004400:	9b01      	ldr	r3, [sp, #4]
 8004402:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004406:	b15b      	cbz	r3, 8004420 <__smakebuf_r+0x70>
 8004408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800440c:	4630      	mov	r0, r6
 800440e:	f000 f81d 	bl	800444c <_isatty_r>
 8004412:	b128      	cbz	r0, 8004420 <__smakebuf_r+0x70>
 8004414:	89a3      	ldrh	r3, [r4, #12]
 8004416:	f023 0303 	bic.w	r3, r3, #3
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	81a3      	strh	r3, [r4, #12]
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	431d      	orrs	r5, r3
 8004424:	81a5      	strh	r5, [r4, #12]
 8004426:	e7cf      	b.n	80043c8 <__smakebuf_r+0x18>

08004428 <_fstat_r>:
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4d07      	ldr	r5, [pc, #28]	@ (8004448 <_fstat_r+0x20>)
 800442c:	2300      	movs	r3, #0
 800442e:	4604      	mov	r4, r0
 8004430:	4608      	mov	r0, r1
 8004432:	4611      	mov	r1, r2
 8004434:	602b      	str	r3, [r5, #0]
 8004436:	f7fc fb95 	bl	8000b64 <_fstat>
 800443a:	1c43      	adds	r3, r0, #1
 800443c:	d102      	bne.n	8004444 <_fstat_r+0x1c>
 800443e:	682b      	ldr	r3, [r5, #0]
 8004440:	b103      	cbz	r3, 8004444 <_fstat_r+0x1c>
 8004442:	6023      	str	r3, [r4, #0]
 8004444:	bd38      	pop	{r3, r4, r5, pc}
 8004446:	bf00      	nop
 8004448:	20000288 	.word	0x20000288

0800444c <_isatty_r>:
 800444c:	b538      	push	{r3, r4, r5, lr}
 800444e:	4d06      	ldr	r5, [pc, #24]	@ (8004468 <_isatty_r+0x1c>)
 8004450:	2300      	movs	r3, #0
 8004452:	4604      	mov	r4, r0
 8004454:	4608      	mov	r0, r1
 8004456:	602b      	str	r3, [r5, #0]
 8004458:	f7fc fb94 	bl	8000b84 <_isatty>
 800445c:	1c43      	adds	r3, r0, #1
 800445e:	d102      	bne.n	8004466 <_isatty_r+0x1a>
 8004460:	682b      	ldr	r3, [r5, #0]
 8004462:	b103      	cbz	r3, 8004466 <_isatty_r+0x1a>
 8004464:	6023      	str	r3, [r4, #0]
 8004466:	bd38      	pop	{r3, r4, r5, pc}
 8004468:	20000288 	.word	0x20000288

0800446c <_sbrk_r>:
 800446c:	b538      	push	{r3, r4, r5, lr}
 800446e:	4d06      	ldr	r5, [pc, #24]	@ (8004488 <_sbrk_r+0x1c>)
 8004470:	2300      	movs	r3, #0
 8004472:	4604      	mov	r4, r0
 8004474:	4608      	mov	r0, r1
 8004476:	602b      	str	r3, [r5, #0]
 8004478:	f7fc fb9c 	bl	8000bb4 <_sbrk>
 800447c:	1c43      	adds	r3, r0, #1
 800447e:	d102      	bne.n	8004486 <_sbrk_r+0x1a>
 8004480:	682b      	ldr	r3, [r5, #0]
 8004482:	b103      	cbz	r3, 8004486 <_sbrk_r+0x1a>
 8004484:	6023      	str	r3, [r4, #0]
 8004486:	bd38      	pop	{r3, r4, r5, pc}
 8004488:	20000288 	.word	0x20000288

0800448c <_init>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr

08004498 <_fini>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	bf00      	nop
 800449c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449e:	bc08      	pop	{r3}
 80044a0:	469e      	mov	lr, r3
 80044a2:	4770      	bx	lr
